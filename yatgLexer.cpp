/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g
 *     -                            On : 2010-06-26 17:43:26
 *     -                 for the lexer : yatgLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "yatgLexer.h"
/* ----------------------------------------- */


/** String literals used by yatgLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x6C, 0x6F, 0x63, 0x61, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x67, 0x6C, 0x6F, 0x62, 0x61, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x69, 0x66,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x74, 0x68, 0x65, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x64, 0x6F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x65, 0x6C, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x77, 0x68, 0x69, 0x6C, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x66, 0x6F, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x69, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_10[]  = { 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_11[]  = { 0x74, 0x6F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_12[]  = { 0x62, 0x79,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_13[]  = { 0x77, 0x68, 0x65, 0x72, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_14[]  = { 0x65, 0x78, 0x69, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_15[]  = { 0x77, 0x69, 0x74, 0x68,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_16[]  = { 0x63, 0x61, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_17[]  = { 0x6F, 0x66,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_18[]  = { 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_19[]  = { 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_20[]  = { 0x74, 0x72, 0x79,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_21[]  = { 0x6D, 0x61, 0x70, 0x70, 0x65, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_22[]  = { 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_23[]  = { 0x66, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_24[]  = { 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_25[]  = { 0x61, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_26[]  = { 0x61, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_27[]  = { 0x6C, 0x65, 0x76, 0x65, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_28[]  = { 0x74, 0x69, 0x6D, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_29[]  = { 0x63, 0x6F, 0x6F, 0x72, 0x64, 0x73, 0x79, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_30[]  = { 0x77, 0x6F, 0x72, 0x6C, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_31[]  = { 0x70, 0x61, 0x72, 0x65, 0x6E, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_32[]  = { 0x61, 0x62, 0x6F, 0x75, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_33[]  = { 0x70, 0x69, 0x76, 0x6F, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_34[]  = { 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_35[]  = { 0x75, 0x6E, 0x64, 0x6F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_36[]  = { 0x73, 0x65, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_37[]  = { 0x74, 0x72, 0x75, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_38[]  = { 0x66, 0x61, 0x6C, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_39[]  = { 0x6F, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_40[]  = { 0x6F, 0x66, 0x66,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_41[]  = { 0x6F, 0x6B,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_42[]  = { 0x75, 0x6E, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_43[]  = { 0x75, 0x6E, 0x73, 0x75, 0x70, 0x70, 0x6C, 0x69, 0x65, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_44[]  = { 0x7C, 0x7C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_45[]  = { 0x26, 0x26,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_46[]  = { 0x3D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_47[]  = { 0x21, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_48[]  = { 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_49[]  = { 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_50[]  = { 0x2A, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_51[]  = { 0x2F, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_52[]  = { 0x25, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_53[]  = { 0x2B, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_54[]  = { 0x2D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_55[]  = { 0x2E, 0x2E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_56[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x69, 0x6E, 0x75, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_57[]  = { 0x63, 0x61, 0x74, 0x63, 0x68,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_58[]  = { 0x2F, 0x2A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_59[]  = { 0x2A, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_60[]  = { 0x2F, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_61[]  = { 0x2D, 0x2D,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pyatgLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pyatgLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pyatgLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pyatgLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or 16 bit input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_ASCII) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_ASCII

/* 8 bit "ASCII" (actually any 8 bit character set) */

#  define	    NEXTCHAR			((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP				((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR			((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP				((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define	    CONSUME()											\
{																	\
    if	(NEXTCHAR < (DATAP + INPUT->sizeBuf))						\
    {																\
		INPUT->charPositionInLine++;								\
		if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)		\
		{															\
			INPUT->line++;											\
			INPUT->charPositionInLine	= 0;						\
			INPUT->currentLine		= (void *)(NEXTCHAR + 1);		\
		}															\
		INPUT->nextChar = (void *)(NEXTCHAR + 1);					\
    }																\
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()				INPUT->istream->consume(INPUT->istream)
#define	    LA(n)					INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mSTRING_LITERIAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mEscapeSequence    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_COMMA    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_LOCAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_GLOBAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_EQUAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_IF    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_THEN    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_DO    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_ELSE    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_WHILE    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_FOR    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_IN    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_COLLECT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_TO    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_BY    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_WHERE    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_EXIT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_WITH    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_CASE    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_OF    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_OPAREN    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_CPAREN    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_COLON    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_DEFAULT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_STRUCT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_TRY    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_MAPPED    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_FUNCTION    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_FN    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_RETURN    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_ANIMATE    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_AT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_LEVEL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_TIME    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_COORDSYS    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_WORLD    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_PARENT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_ABOUT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_PIVOT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_SELECTION    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_UNDO    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_SET    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_PLUS    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_MINUS    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_STAR    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_FSLASH    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_PERCENT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_OBRACKET    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_CBRACKET    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_HASH    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_TRUE    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_FALSE    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_ON    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_OFF    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_OK    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_UNDEFINED    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_UNSUPPLIED    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_D_BAR    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_D_AMP    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_D_EQUAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_EXC_EQUAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_LT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_GT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_LT_EQUAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_GT_EQUAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_STAR_EQUAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_FSLASH_EQUAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_PERCENT_EQUAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_PLUS_EQUAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_MINUS_EQUAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_DQUOTE    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mESQ_FSLASH_SQUOTE    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_OCBRACKET    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_CCBRACKET    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_D_DOT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_CONTINUE    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mKW_CATCH    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mSS_DOT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mIDENTIFIER    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mLETTER    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mDIGIT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mHEX_LITERAL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mHexDigit    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mWS    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mEOL    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mCOMMENT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mLINE_COMMENT    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mREF_OP    (pyatgLexer ctx);
static ANTLR3_INLINE  void	mTokens    (pyatgLexer ctx);
static void	yatgLexerFree(pyatgLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
yatgLexerFree  (pyatgLexer ctx)
{
    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called yatgLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pyatgLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pyatgLexer yatgLexerNew         
(pANTLR3_INPUT_STREAM instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return yatgLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called yatgLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pyatgLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pyatgLexer yatgLexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pyatgLexer ctx; // Context structure we will build and return

    ctx = (pyatgLexer) ANTLR3_CALLOC(1, sizeof(yatgLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in yatgLexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our yatgLexer interface
     */
    ctx->mSTRING_LITERIAL	= mSTRING_LITERIAL;
    ctx->mEscapeSequence	= mEscapeSequence;
    ctx->mSS_COMMA	= mSS_COMMA;
    ctx->mKW_LOCAL	= mKW_LOCAL;
    ctx->mKW_GLOBAL	= mKW_GLOBAL;
    ctx->mSS_EQUAL	= mSS_EQUAL;
    ctx->mKW_IF	= mKW_IF;
    ctx->mKW_THEN	= mKW_THEN;
    ctx->mKW_DO	= mKW_DO;
    ctx->mKW_ELSE	= mKW_ELSE;
    ctx->mKW_WHILE	= mKW_WHILE;
    ctx->mKW_FOR	= mKW_FOR;
    ctx->mKW_IN	= mKW_IN;
    ctx->mKW_COLLECT	= mKW_COLLECT;
    ctx->mKW_TO	= mKW_TO;
    ctx->mKW_BY	= mKW_BY;
    ctx->mKW_WHERE	= mKW_WHERE;
    ctx->mKW_EXIT	= mKW_EXIT;
    ctx->mKW_WITH	= mKW_WITH;
    ctx->mKW_CASE	= mKW_CASE;
    ctx->mKW_OF	= mKW_OF;
    ctx->mSS_OPAREN	= mSS_OPAREN;
    ctx->mSS_CPAREN	= mSS_CPAREN;
    ctx->mSS_COLON	= mSS_COLON;
    ctx->mKW_DEFAULT	= mKW_DEFAULT;
    ctx->mKW_STRUCT	= mKW_STRUCT;
    ctx->mKW_TRY	= mKW_TRY;
    ctx->mKW_MAPPED	= mKW_MAPPED;
    ctx->mKW_FUNCTION	= mKW_FUNCTION;
    ctx->mKW_FN	= mKW_FN;
    ctx->mKW_RETURN	= mKW_RETURN;
    ctx->mKW_ANIMATE	= mKW_ANIMATE;
    ctx->mKW_AT	= mKW_AT;
    ctx->mKW_LEVEL	= mKW_LEVEL;
    ctx->mKW_TIME	= mKW_TIME;
    ctx->mKW_COORDSYS	= mKW_COORDSYS;
    ctx->mKW_WORLD	= mKW_WORLD;
    ctx->mKW_PARENT	= mKW_PARENT;
    ctx->mKW_ABOUT	= mKW_ABOUT;
    ctx->mKW_PIVOT	= mKW_PIVOT;
    ctx->mKW_SELECTION	= mKW_SELECTION;
    ctx->mKW_UNDO	= mKW_UNDO;
    ctx->mKW_SET	= mKW_SET;
    ctx->mSS_PLUS	= mSS_PLUS;
    ctx->mSS_MINUS	= mSS_MINUS;
    ctx->mSS_STAR	= mSS_STAR;
    ctx->mSS_FSLASH	= mSS_FSLASH;
    ctx->mSS_PERCENT	= mSS_PERCENT;
    ctx->mSS_OBRACKET	= mSS_OBRACKET;
    ctx->mSS_CBRACKET	= mSS_CBRACKET;
    ctx->mSS_HASH	= mSS_HASH;
    ctx->mKW_TRUE	= mKW_TRUE;
    ctx->mKW_FALSE	= mKW_FALSE;
    ctx->mKW_ON	= mKW_ON;
    ctx->mKW_OFF	= mKW_OFF;
    ctx->mKW_OK	= mKW_OK;
    ctx->mKW_UNDEFINED	= mKW_UNDEFINED;
    ctx->mKW_UNSUPPLIED	= mKW_UNSUPPLIED;
    ctx->mSS_D_BAR	= mSS_D_BAR;
    ctx->mSS_D_AMP	= mSS_D_AMP;
    ctx->mSS_D_EQUAL	= mSS_D_EQUAL;
    ctx->mSS_EXC_EQUAL	= mSS_EXC_EQUAL;
    ctx->mSS_LT	= mSS_LT;
    ctx->mSS_GT	= mSS_GT;
    ctx->mSS_LT_EQUAL	= mSS_LT_EQUAL;
    ctx->mSS_GT_EQUAL	= mSS_GT_EQUAL;
    ctx->mSS_STAR_EQUAL	= mSS_STAR_EQUAL;
    ctx->mSS_FSLASH_EQUAL	= mSS_FSLASH_EQUAL;
    ctx->mSS_PERCENT_EQUAL	= mSS_PERCENT_EQUAL;
    ctx->mSS_PLUS_EQUAL	= mSS_PLUS_EQUAL;
    ctx->mSS_MINUS_EQUAL	= mSS_MINUS_EQUAL;
    ctx->mSS_DQUOTE	= mSS_DQUOTE;
    ctx->mESQ_FSLASH_SQUOTE	= mESQ_FSLASH_SQUOTE;
    ctx->mSS_OCBRACKET	= mSS_OCBRACKET;
    ctx->mSS_CCBRACKET	= mSS_CCBRACKET;
    ctx->mSS_D_DOT	= mSS_D_DOT;
    ctx->mKW_CONTINUE	= mKW_CONTINUE;
    ctx->mKW_CATCH	= mKW_CATCH;
    ctx->mSS_DOT	= mSS_DOT;
    ctx->mIDENTIFIER	= mIDENTIFIER;
    ctx->mLETTER	= mLETTER;
    ctx->mDIGIT	= mDIGIT;
    ctx->mHEX_LITERAL	= mHEX_LITERAL;
    ctx->mHexDigit	= mHexDigit;
    ctx->mWS	= mWS;
    ctx->mEOL	= mEOL;
    ctx->mCOMMENT	= mCOMMENT;
    ctx->mLINE_COMMENT	= mLINE_COMMENT;
    ctx->mREF_OP	= mREF_OP;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= yatgLexerFree;

    
    


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}
 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 439:6: ( '\"' ( EscapeSequence | ~ ( '\\\\' | '\"' ) )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING_LITERIAL
 *
 * Looks to match the characters the constitute the token STRING_LITERIAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING_LITERIAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRING_LITERIAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:439:6: ( '\"' ( EscapeSequence | ~ ( '\\\\' | '\"' ) )* '\"' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:439:9: '\"' ( EscapeSequence | ~ ( '\\\\' | '\"' ) )* '\"'
    {
        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleSTRING_LITERIALEx;
        }


        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:439:13: ( EscapeSequence | ~ ( '\\\\' | '\"' ) )*

        for (;;)
        {
            int alt1=3;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA1_0 = LA(1);
                if ( (LA1_0 == '\\') ) 
                {
                    alt1=1;
                }
                else if ( (((LA1_0 >= 0x0000) && (LA1_0 <= '!')) || ((LA1_0 >= '#') && (LA1_0 <= '[')) || ((LA1_0 >= ']') && (LA1_0 <= 0xFFFF))) ) 
                {
                    alt1=2;
                }

            }
            switch (alt1) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:439:15: EscapeSequence
        	    {
        	        /* 439:15: EscapeSequence */
        	        mEscapeSequence(ctx ); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleSTRING_LITERIALEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:439:32: ~ ( '\\\\' | '\"' )
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '!')) || ((LA(1) >= '#') && (LA(1) <= '[')) || ((LA(1) >= ']') && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleSTRING_LITERIALEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop1;	/* break out of the loop */
        	    break;
            }
        }
        loop1: ; /* Jump out to here if this rule does not match */

        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleSTRING_LITERIALEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTRING_LITERIALEx; /* Prevent compiler warnings */
    ruleSTRING_LITERIALEx: ;

}
// $ANTLR end STRING_LITERIAL

//   Comes from: 444:6: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EscapeSequence
 *
 * Looks to match the characters the constitute the token EscapeSequence
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEscapeSequence(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:444:6: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:444:10: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    {
        MATCHC('\\'); 
        if  (HASEXCEPTION())
        {
            goto ruleEscapeSequenceEx;
        }

        if ( LA(1) == '"' || LA(1) == '\'' || LA(1) == '\\' || LA(1) == 'b' || LA(1) == 'f' || LA(1) == 'n' || LA(1) == 'r' || LA(1) == 't' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleEscapeSequenceEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleEscapeSequenceEx; /* Prevent compiler warnings */
    ruleEscapeSequenceEx: ;

}
// $ANTLR end EscapeSequence

//   Comes from: 448:2: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_COMMA
 *
 * Looks to match the characters the constitute the token SS_COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_COMMA(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_COMMA;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:448:2: ( ',' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:448:4: ','
    {
        MATCHC(','); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_COMMAEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_COMMAEx; /* Prevent compiler warnings */
    ruleSS_COMMAEx: ;

}
// $ANTLR end SS_COMMA

//   Comes from: 452:2: ( 'local' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_LOCAL
 *
 * Looks to match the characters the constitute the token KW_LOCAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_LOCAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_LOCAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:452:2: ( 'local' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:452:4: 'local'
    {
        MATCHS(lit_1); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_LOCALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_LOCALEx; /* Prevent compiler warnings */
    ruleKW_LOCALEx: ;

}
// $ANTLR end KW_LOCAL

//   Comes from: 456:2: ( 'global' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_GLOBAL
 *
 * Looks to match the characters the constitute the token KW_GLOBAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_GLOBAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_GLOBAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:456:2: ( 'global' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:456:4: 'global'
    {
        MATCHS(lit_2); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_GLOBALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_GLOBALEx; /* Prevent compiler warnings */
    ruleKW_GLOBALEx: ;

}
// $ANTLR end KW_GLOBAL

//   Comes from: 460:2: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_EQUAL
 *
 * Looks to match the characters the constitute the token SS_EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_EQUAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_EQUAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:460:2: ( '=' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:460:4: '='
    {
        MATCHC('='); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_EQUALEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_EQUALEx; /* Prevent compiler warnings */
    ruleSS_EQUALEx: ;

}
// $ANTLR end SS_EQUAL

//   Comes from: 464:2: ( 'if' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_IF
 *
 * Looks to match the characters the constitute the token KW_IF
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_IF(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_IF;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:464:2: ( 'if' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:464:4: 'if'
    {
        MATCHS(lit_3); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_IFEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_IFEx; /* Prevent compiler warnings */
    ruleKW_IFEx: ;

}
// $ANTLR end KW_IF

//   Comes from: 468:2: ( 'then' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_THEN
 *
 * Looks to match the characters the constitute the token KW_THEN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_THEN(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_THEN;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:468:2: ( 'then' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:468:4: 'then'
    {
        MATCHS(lit_4); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_THENEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_THENEx; /* Prevent compiler warnings */
    ruleKW_THENEx: ;

}
// $ANTLR end KW_THEN

//   Comes from: 472:2: ( 'do' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_DO
 *
 * Looks to match the characters the constitute the token KW_DO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_DO(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_DO;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:472:2: ( 'do' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:472:4: 'do'
    {
        MATCHS(lit_5); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_DOEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_DOEx; /* Prevent compiler warnings */
    ruleKW_DOEx: ;

}
// $ANTLR end KW_DO

//   Comes from: 476:2: ( 'else' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_ELSE
 *
 * Looks to match the characters the constitute the token KW_ELSE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_ELSE(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_ELSE;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:476:2: ( 'else' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:476:4: 'else'
    {
        MATCHS(lit_6); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_ELSEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_ELSEEx; /* Prevent compiler warnings */
    ruleKW_ELSEEx: ;

}
// $ANTLR end KW_ELSE

//   Comes from: 480:2: ( 'while' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_WHILE
 *
 * Looks to match the characters the constitute the token KW_WHILE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_WHILE(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_WHILE;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:480:2: ( 'while' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:480:4: 'while'
    {
        MATCHS(lit_7); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_WHILEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_WHILEEx; /* Prevent compiler warnings */
    ruleKW_WHILEEx: ;

}
// $ANTLR end KW_WHILE

//   Comes from: 484:2: ( 'for' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_FOR
 *
 * Looks to match the characters the constitute the token KW_FOR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_FOR(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_FOR;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:484:2: ( 'for' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:484:4: 'for'
    {
        MATCHS(lit_8); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_FOREx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_FOREx; /* Prevent compiler warnings */
    ruleKW_FOREx: ;

}
// $ANTLR end KW_FOR

//   Comes from: 488:2: ( 'in' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_IN
 *
 * Looks to match the characters the constitute the token KW_IN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_IN(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_IN;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:488:2: ( 'in' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:488:4: 'in'
    {
        MATCHS(lit_9); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_INEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_INEx; /* Prevent compiler warnings */
    ruleKW_INEx: ;

}
// $ANTLR end KW_IN

//   Comes from: 492:2: ( 'collect' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_COLLECT
 *
 * Looks to match the characters the constitute the token KW_COLLECT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_COLLECT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_COLLECT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:492:2: ( 'collect' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:492:4: 'collect'
    {
        MATCHS(lit_10); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_COLLECTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_COLLECTEx; /* Prevent compiler warnings */
    ruleKW_COLLECTEx: ;

}
// $ANTLR end KW_COLLECT

//   Comes from: 496:2: ( 'to' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_TO
 *
 * Looks to match the characters the constitute the token KW_TO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_TO(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_TO;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:496:2: ( 'to' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:496:4: 'to'
    {
        MATCHS(lit_11); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_TOEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_TOEx; /* Prevent compiler warnings */
    ruleKW_TOEx: ;

}
// $ANTLR end KW_TO

//   Comes from: 500:2: ( 'by' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_BY
 *
 * Looks to match the characters the constitute the token KW_BY
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_BY(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_BY;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:500:2: ( 'by' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:500:4: 'by'
    {
        MATCHS(lit_12); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_BYEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_BYEx; /* Prevent compiler warnings */
    ruleKW_BYEx: ;

}
// $ANTLR end KW_BY

//   Comes from: 504:2: ( 'where' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_WHERE
 *
 * Looks to match the characters the constitute the token KW_WHERE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_WHERE(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_WHERE;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:504:2: ( 'where' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:504:4: 'where'
    {
        MATCHS(lit_13); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_WHEREEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_WHEREEx; /* Prevent compiler warnings */
    ruleKW_WHEREEx: ;

}
// $ANTLR end KW_WHERE

//   Comes from: 508:2: ( 'exit' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_EXIT
 *
 * Looks to match the characters the constitute the token KW_EXIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_EXIT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_EXIT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:508:2: ( 'exit' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:508:4: 'exit'
    {
        MATCHS(lit_14); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_EXITEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_EXITEx; /* Prevent compiler warnings */
    ruleKW_EXITEx: ;

}
// $ANTLR end KW_EXIT

//   Comes from: 512:2: ( 'with' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_WITH
 *
 * Looks to match the characters the constitute the token KW_WITH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_WITH(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_WITH;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:512:2: ( 'with' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:512:4: 'with'
    {
        MATCHS(lit_15); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_WITHEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_WITHEx; /* Prevent compiler warnings */
    ruleKW_WITHEx: ;

}
// $ANTLR end KW_WITH

//   Comes from: 516:2: ( 'case' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_CASE
 *
 * Looks to match the characters the constitute the token KW_CASE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_CASE(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_CASE;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:516:2: ( 'case' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:516:4: 'case'
    {
        MATCHS(lit_16); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_CASEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_CASEEx; /* Prevent compiler warnings */
    ruleKW_CASEEx: ;

}
// $ANTLR end KW_CASE

//   Comes from: 520:2: ( 'of' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_OF
 *
 * Looks to match the characters the constitute the token KW_OF
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_OF(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_OF;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:520:2: ( 'of' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:520:4: 'of'
    {
        MATCHS(lit_17); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_OFEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_OFEx; /* Prevent compiler warnings */
    ruleKW_OFEx: ;

}
// $ANTLR end KW_OF

//   Comes from: 524:2: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_OPAREN
 *
 * Looks to match the characters the constitute the token SS_OPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_OPAREN(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_OPAREN;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:524:2: ( '(' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:524:4: '('
    {
        MATCHC('('); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_OPARENEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_OPARENEx; /* Prevent compiler warnings */
    ruleSS_OPARENEx: ;

}
// $ANTLR end SS_OPAREN

//   Comes from: 528:2: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_CPAREN
 *
 * Looks to match the characters the constitute the token SS_CPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_CPAREN(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_CPAREN;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:528:2: ( ')' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:528:4: ')'
    {
        MATCHC(')'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_CPARENEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_CPARENEx; /* Prevent compiler warnings */
    ruleSS_CPARENEx: ;

}
// $ANTLR end SS_CPAREN

//   Comes from: 532:2: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_COLON
 *
 * Looks to match the characters the constitute the token SS_COLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_COLON(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_COLON;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:532:2: ( ':' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:532:4: ':'
    {
        MATCHC(':'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_COLONEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_COLONEx; /* Prevent compiler warnings */
    ruleSS_COLONEx: ;

}
// $ANTLR end SS_COLON

//   Comes from: 536:2: ( 'default' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_DEFAULT
 *
 * Looks to match the characters the constitute the token KW_DEFAULT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_DEFAULT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_DEFAULT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:536:2: ( 'default' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:536:4: 'default'
    {
        MATCHS(lit_18); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_DEFAULTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_DEFAULTEx; /* Prevent compiler warnings */
    ruleKW_DEFAULTEx: ;

}
// $ANTLR end KW_DEFAULT

//   Comes from: 540:2: ( 'struct' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_STRUCT
 *
 * Looks to match the characters the constitute the token KW_STRUCT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_STRUCT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_STRUCT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:540:2: ( 'struct' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:540:4: 'struct'
    {
        MATCHS(lit_19); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_STRUCTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_STRUCTEx; /* Prevent compiler warnings */
    ruleKW_STRUCTEx: ;

}
// $ANTLR end KW_STRUCT

//   Comes from: 544:2: ( 'try' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_TRY
 *
 * Looks to match the characters the constitute the token KW_TRY
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_TRY(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_TRY;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:544:2: ( 'try' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:544:4: 'try'
    {
        MATCHS(lit_20); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_TRYEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_TRYEx; /* Prevent compiler warnings */
    ruleKW_TRYEx: ;

}
// $ANTLR end KW_TRY

//   Comes from: 548:2: ( 'mapped' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_MAPPED
 *
 * Looks to match the characters the constitute the token KW_MAPPED
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_MAPPED(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_MAPPED;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:548:2: ( 'mapped' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:548:4: 'mapped'
    {
        MATCHS(lit_21); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_MAPPEDEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_MAPPEDEx; /* Prevent compiler warnings */
    ruleKW_MAPPEDEx: ;

}
// $ANTLR end KW_MAPPED

//   Comes from: 552:2: ( 'function' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_FUNCTION
 *
 * Looks to match the characters the constitute the token KW_FUNCTION
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_FUNCTION(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_FUNCTION;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:552:2: ( 'function' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:552:4: 'function'
    {
        MATCHS(lit_22); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_FUNCTIONEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_FUNCTIONEx; /* Prevent compiler warnings */
    ruleKW_FUNCTIONEx: ;

}
// $ANTLR end KW_FUNCTION

//   Comes from: 556:2: ( 'fn' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_FN
 *
 * Looks to match the characters the constitute the token KW_FN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_FN(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_FN;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:556:2: ( 'fn' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:556:4: 'fn'
    {
        MATCHS(lit_23); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_FNEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_FNEx; /* Prevent compiler warnings */
    ruleKW_FNEx: ;

}
// $ANTLR end KW_FN

//   Comes from: 560:2: ( 'return' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_RETURN
 *
 * Looks to match the characters the constitute the token KW_RETURN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_RETURN(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_RETURN;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:560:2: ( 'return' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:560:4: 'return'
    {
        MATCHS(lit_24); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_RETURNEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_RETURNEx; /* Prevent compiler warnings */
    ruleKW_RETURNEx: ;

}
// $ANTLR end KW_RETURN

//   Comes from: 564:2: ( 'animate' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_ANIMATE
 *
 * Looks to match the characters the constitute the token KW_ANIMATE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_ANIMATE(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_ANIMATE;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:564:2: ( 'animate' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:564:4: 'animate'
    {
        MATCHS(lit_25); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_ANIMATEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_ANIMATEEx; /* Prevent compiler warnings */
    ruleKW_ANIMATEEx: ;

}
// $ANTLR end KW_ANIMATE

//   Comes from: 568:2: ( 'at' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_AT
 *
 * Looks to match the characters the constitute the token KW_AT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_AT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_AT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:568:2: ( 'at' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:568:4: 'at'
    {
        MATCHS(lit_26); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_ATEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_ATEx; /* Prevent compiler warnings */
    ruleKW_ATEx: ;

}
// $ANTLR end KW_AT

//   Comes from: 572:2: ( 'level' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_LEVEL
 *
 * Looks to match the characters the constitute the token KW_LEVEL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_LEVEL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_LEVEL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:572:2: ( 'level' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:572:4: 'level'
    {
        MATCHS(lit_27); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_LEVELEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_LEVELEx; /* Prevent compiler warnings */
    ruleKW_LEVELEx: ;

}
// $ANTLR end KW_LEVEL

//   Comes from: 576:2: ( 'time' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_TIME
 *
 * Looks to match the characters the constitute the token KW_TIME
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_TIME(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_TIME;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:576:2: ( 'time' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:576:4: 'time'
    {
        MATCHS(lit_28); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_TIMEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_TIMEEx; /* Prevent compiler warnings */
    ruleKW_TIMEEx: ;

}
// $ANTLR end KW_TIME

//   Comes from: 580:2: ( 'coordsys' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_COORDSYS
 *
 * Looks to match the characters the constitute the token KW_COORDSYS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_COORDSYS(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_COORDSYS;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:580:2: ( 'coordsys' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:580:4: 'coordsys'
    {
        MATCHS(lit_29); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_COORDSYSEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_COORDSYSEx; /* Prevent compiler warnings */
    ruleKW_COORDSYSEx: ;

}
// $ANTLR end KW_COORDSYS

//   Comes from: 584:2: ( 'world' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_WORLD
 *
 * Looks to match the characters the constitute the token KW_WORLD
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_WORLD(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_WORLD;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:584:2: ( 'world' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:584:4: 'world'
    {
        MATCHS(lit_30); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_WORLDEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_WORLDEx; /* Prevent compiler warnings */
    ruleKW_WORLDEx: ;

}
// $ANTLR end KW_WORLD

//   Comes from: 588:2: ( 'parent' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_PARENT
 *
 * Looks to match the characters the constitute the token KW_PARENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_PARENT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_PARENT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:588:2: ( 'parent' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:588:4: 'parent'
    {
        MATCHS(lit_31); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_PARENTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_PARENTEx; /* Prevent compiler warnings */
    ruleKW_PARENTEx: ;

}
// $ANTLR end KW_PARENT

//   Comes from: 592:2: ( 'about' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_ABOUT
 *
 * Looks to match the characters the constitute the token KW_ABOUT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_ABOUT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_ABOUT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:592:2: ( 'about' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:592:4: 'about'
    {
        MATCHS(lit_32); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_ABOUTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_ABOUTEx; /* Prevent compiler warnings */
    ruleKW_ABOUTEx: ;

}
// $ANTLR end KW_ABOUT

//   Comes from: 596:2: ( 'pivot' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_PIVOT
 *
 * Looks to match the characters the constitute the token KW_PIVOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_PIVOT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_PIVOT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:596:2: ( 'pivot' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:596:4: 'pivot'
    {
        MATCHS(lit_33); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_PIVOTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_PIVOTEx; /* Prevent compiler warnings */
    ruleKW_PIVOTEx: ;

}
// $ANTLR end KW_PIVOT

//   Comes from: 600:2: ( 'selection' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_SELECTION
 *
 * Looks to match the characters the constitute the token KW_SELECTION
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_SELECTION(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_SELECTION;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:600:2: ( 'selection' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:600:4: 'selection'
    {
        MATCHS(lit_34); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_SELECTIONEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_SELECTIONEx; /* Prevent compiler warnings */
    ruleKW_SELECTIONEx: ;

}
// $ANTLR end KW_SELECTION

//   Comes from: 604:2: ( 'undo' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_UNDO
 *
 * Looks to match the characters the constitute the token KW_UNDO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_UNDO(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_UNDO;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:604:2: ( 'undo' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:604:4: 'undo'
    {
        MATCHS(lit_35); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_UNDOEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_UNDOEx; /* Prevent compiler warnings */
    ruleKW_UNDOEx: ;

}
// $ANTLR end KW_UNDO

//   Comes from: 608:2: ( 'set' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_SET
 *
 * Looks to match the characters the constitute the token KW_SET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_SET(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_SET;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:608:2: ( 'set' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:608:4: 'set'
    {
        MATCHS(lit_36); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_SETEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_SETEx; /* Prevent compiler warnings */
    ruleKW_SETEx: ;

}
// $ANTLR end KW_SET

//   Comes from: 612:2: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_PLUS
 *
 * Looks to match the characters the constitute the token SS_PLUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_PLUS(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_PLUS;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:612:2: ( '+' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:612:4: '+'
    {
        MATCHC('+'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_PLUSEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_PLUSEx; /* Prevent compiler warnings */
    ruleSS_PLUSEx: ;

}
// $ANTLR end SS_PLUS

//   Comes from: 616:2: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_MINUS
 *
 * Looks to match the characters the constitute the token SS_MINUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_MINUS(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_MINUS;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:616:2: ( '-' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:616:4: '-'
    {
        MATCHC('-'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_MINUSEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_MINUSEx; /* Prevent compiler warnings */
    ruleSS_MINUSEx: ;

}
// $ANTLR end SS_MINUS

//   Comes from: 620:2: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_STAR
 *
 * Looks to match the characters the constitute the token SS_STAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_STAR(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_STAR;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:620:2: ( '*' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:620:4: '*'
    {
        MATCHC('*'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_STAREx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_STAREx; /* Prevent compiler warnings */
    ruleSS_STAREx: ;

}
// $ANTLR end SS_STAR

//   Comes from: 624:2: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_FSLASH
 *
 * Looks to match the characters the constitute the token SS_FSLASH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_FSLASH(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_FSLASH;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:624:2: ( '/' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:624:4: '/'
    {
        MATCHC('/'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_FSLASHEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_FSLASHEx; /* Prevent compiler warnings */
    ruleSS_FSLASHEx: ;

}
// $ANTLR end SS_FSLASH

//   Comes from: 628:2: ( '%' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_PERCENT
 *
 * Looks to match the characters the constitute the token SS_PERCENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_PERCENT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_PERCENT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:628:2: ( '%' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:628:4: '%'
    {
        MATCHC('%'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_PERCENTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_PERCENTEx; /* Prevent compiler warnings */
    ruleSS_PERCENTEx: ;

}
// $ANTLR end SS_PERCENT

//   Comes from: 632:2: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_OBRACKET
 *
 * Looks to match the characters the constitute the token SS_OBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_OBRACKET(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_OBRACKET;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:632:2: ( '[' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:632:4: '['
    {
        MATCHC('['); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_OBRACKETEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_OBRACKETEx; /* Prevent compiler warnings */
    ruleSS_OBRACKETEx: ;

}
// $ANTLR end SS_OBRACKET

//   Comes from: 636:2: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_CBRACKET
 *
 * Looks to match the characters the constitute the token SS_CBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_CBRACKET(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_CBRACKET;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:636:2: ( ']' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:636:4: ']'
    {
        MATCHC(']'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_CBRACKETEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_CBRACKETEx; /* Prevent compiler warnings */
    ruleSS_CBRACKETEx: ;

}
// $ANTLR end SS_CBRACKET

//   Comes from: 640:2: ( '#' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_HASH
 *
 * Looks to match the characters the constitute the token SS_HASH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_HASH(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_HASH;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:640:2: ( '#' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:640:4: '#'
    {
        MATCHC('#'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_HASHEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_HASHEx; /* Prevent compiler warnings */
    ruleSS_HASHEx: ;

}
// $ANTLR end SS_HASH

//   Comes from: 644:2: ( 'true' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_TRUE
 *
 * Looks to match the characters the constitute the token KW_TRUE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_TRUE(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_TRUE;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:644:2: ( 'true' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:644:4: 'true'
    {
        MATCHS(lit_37); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_TRUEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_TRUEEx; /* Prevent compiler warnings */
    ruleKW_TRUEEx: ;

}
// $ANTLR end KW_TRUE

//   Comes from: 648:2: ( 'false' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_FALSE
 *
 * Looks to match the characters the constitute the token KW_FALSE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_FALSE(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_FALSE;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:648:2: ( 'false' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:648:4: 'false'
    {
        MATCHS(lit_38); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_FALSEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_FALSEEx; /* Prevent compiler warnings */
    ruleKW_FALSEEx: ;

}
// $ANTLR end KW_FALSE

//   Comes from: 652:2: ( 'on' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_ON
 *
 * Looks to match the characters the constitute the token KW_ON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_ON(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_ON;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:652:2: ( 'on' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:652:4: 'on'
    {
        MATCHS(lit_39); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_ONEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_ONEx; /* Prevent compiler warnings */
    ruleKW_ONEx: ;

}
// $ANTLR end KW_ON

//   Comes from: 656:2: ( 'off' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_OFF
 *
 * Looks to match the characters the constitute the token KW_OFF
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_OFF(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_OFF;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:656:2: ( 'off' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:656:4: 'off'
    {
        MATCHS(lit_40); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_OFFEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_OFFEx; /* Prevent compiler warnings */
    ruleKW_OFFEx: ;

}
// $ANTLR end KW_OFF

//   Comes from: 660:2: ( 'ok' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_OK
 *
 * Looks to match the characters the constitute the token KW_OK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_OK(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_OK;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:660:2: ( 'ok' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:660:4: 'ok'
    {
        MATCHS(lit_41); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_OKEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_OKEx; /* Prevent compiler warnings */
    ruleKW_OKEx: ;

}
// $ANTLR end KW_OK

//   Comes from: 664:2: ( 'undefined' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_UNDEFINED
 *
 * Looks to match the characters the constitute the token KW_UNDEFINED
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_UNDEFINED(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_UNDEFINED;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:664:2: ( 'undefined' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:664:4: 'undefined'
    {
        MATCHS(lit_42); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_UNDEFINEDEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_UNDEFINEDEx; /* Prevent compiler warnings */
    ruleKW_UNDEFINEDEx: ;

}
// $ANTLR end KW_UNDEFINED

//   Comes from: 668:2: ( 'unsupplied' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_UNSUPPLIED
 *
 * Looks to match the characters the constitute the token KW_UNSUPPLIED
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_UNSUPPLIED(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_UNSUPPLIED;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:668:2: ( 'unsupplied' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:668:4: 'unsupplied'
    {
        MATCHS(lit_43); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_UNSUPPLIEDEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_UNSUPPLIEDEx; /* Prevent compiler warnings */
    ruleKW_UNSUPPLIEDEx: ;

}
// $ANTLR end KW_UNSUPPLIED

//   Comes from: 672:2: ( '||' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_D_BAR
 *
 * Looks to match the characters the constitute the token SS_D_BAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_D_BAR(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_D_BAR;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:672:2: ( '||' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:672:4: '||'
    {
        MATCHS(lit_44); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_D_BAREx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_D_BAREx; /* Prevent compiler warnings */
    ruleSS_D_BAREx: ;

}
// $ANTLR end SS_D_BAR

//   Comes from: 676:2: ( '&&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_D_AMP
 *
 * Looks to match the characters the constitute the token SS_D_AMP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_D_AMP(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_D_AMP;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:676:2: ( '&&' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:676:4: '&&'
    {
        MATCHS(lit_45); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_D_AMPEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_D_AMPEx; /* Prevent compiler warnings */
    ruleSS_D_AMPEx: ;

}
// $ANTLR end SS_D_AMP

//   Comes from: 680:2: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_D_EQUAL
 *
 * Looks to match the characters the constitute the token SS_D_EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_D_EQUAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_D_EQUAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:680:2: ( '==' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:680:4: '=='
    {
        MATCHS(lit_46); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_D_EQUALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_D_EQUALEx; /* Prevent compiler warnings */
    ruleSS_D_EQUALEx: ;

}
// $ANTLR end SS_D_EQUAL

//   Comes from: 684:2: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_EXC_EQUAL
 *
 * Looks to match the characters the constitute the token SS_EXC_EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_EXC_EQUAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_EXC_EQUAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:684:2: ( '!=' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:684:4: '!='
    {
        MATCHS(lit_47); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_EXC_EQUALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_EXC_EQUALEx; /* Prevent compiler warnings */
    ruleSS_EXC_EQUALEx: ;

}
// $ANTLR end SS_EXC_EQUAL

//   Comes from: 688:2: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_LT
 *
 * Looks to match the characters the constitute the token SS_LT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_LT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_LT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:688:2: ( '<' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:688:4: '<'
    {
        MATCHC('<'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_LTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_LTEx; /* Prevent compiler warnings */
    ruleSS_LTEx: ;

}
// $ANTLR end SS_LT

//   Comes from: 692:2: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_GT
 *
 * Looks to match the characters the constitute the token SS_GT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_GT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_GT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:692:2: ( '>' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:692:4: '>'
    {
        MATCHC('>'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_GTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_GTEx; /* Prevent compiler warnings */
    ruleSS_GTEx: ;

}
// $ANTLR end SS_GT

//   Comes from: 696:2: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_LT_EQUAL
 *
 * Looks to match the characters the constitute the token SS_LT_EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_LT_EQUAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_LT_EQUAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:696:2: ( '<=' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:696:4: '<='
    {
        MATCHS(lit_48); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_LT_EQUALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_LT_EQUALEx; /* Prevent compiler warnings */
    ruleSS_LT_EQUALEx: ;

}
// $ANTLR end SS_LT_EQUAL

//   Comes from: 700:2: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_GT_EQUAL
 *
 * Looks to match the characters the constitute the token SS_GT_EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_GT_EQUAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_GT_EQUAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:700:2: ( '>=' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:700:4: '>='
    {
        MATCHS(lit_49); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_GT_EQUALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_GT_EQUALEx; /* Prevent compiler warnings */
    ruleSS_GT_EQUALEx: ;

}
// $ANTLR end SS_GT_EQUAL

//   Comes from: 704:2: ( '*=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_STAR_EQUAL
 *
 * Looks to match the characters the constitute the token SS_STAR_EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_STAR_EQUAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_STAR_EQUAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:704:2: ( '*=' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:704:4: '*='
    {
        MATCHS(lit_50); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_STAR_EQUALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_STAR_EQUALEx; /* Prevent compiler warnings */
    ruleSS_STAR_EQUALEx: ;

}
// $ANTLR end SS_STAR_EQUAL

//   Comes from: 708:2: ( '/=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_FSLASH_EQUAL
 *
 * Looks to match the characters the constitute the token SS_FSLASH_EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_FSLASH_EQUAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_FSLASH_EQUAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:708:2: ( '/=' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:708:4: '/='
    {
        MATCHS(lit_51); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_FSLASH_EQUALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_FSLASH_EQUALEx; /* Prevent compiler warnings */
    ruleSS_FSLASH_EQUALEx: ;

}
// $ANTLR end SS_FSLASH_EQUAL

//   Comes from: 712:2: ( '%=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_PERCENT_EQUAL
 *
 * Looks to match the characters the constitute the token SS_PERCENT_EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_PERCENT_EQUAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_PERCENT_EQUAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:712:2: ( '%=' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:712:4: '%='
    {
        MATCHS(lit_52); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_PERCENT_EQUALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_PERCENT_EQUALEx; /* Prevent compiler warnings */
    ruleSS_PERCENT_EQUALEx: ;

}
// $ANTLR end SS_PERCENT_EQUAL

//   Comes from: 716:2: ( '+=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_PLUS_EQUAL
 *
 * Looks to match the characters the constitute the token SS_PLUS_EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_PLUS_EQUAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_PLUS_EQUAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:716:2: ( '+=' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:716:4: '+='
    {
        MATCHS(lit_53); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_PLUS_EQUALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_PLUS_EQUALEx; /* Prevent compiler warnings */
    ruleSS_PLUS_EQUALEx: ;

}
// $ANTLR end SS_PLUS_EQUAL

//   Comes from: 720:2: ( '-=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_MINUS_EQUAL
 *
 * Looks to match the characters the constitute the token SS_MINUS_EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_MINUS_EQUAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_MINUS_EQUAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:720:2: ( '-=' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:720:4: '-='
    {
        MATCHS(lit_54); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_MINUS_EQUALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_MINUS_EQUALEx; /* Prevent compiler warnings */
    ruleSS_MINUS_EQUALEx: ;

}
// $ANTLR end SS_MINUS_EQUAL

//   Comes from: 724:2: ( '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_DQUOTE
 *
 * Looks to match the characters the constitute the token SS_DQUOTE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_DQUOTE(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_DQUOTE;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:724:2: ( '\"' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:724:4: '\"'
    {
        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_DQUOTEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_DQUOTEEx; /* Prevent compiler warnings */
    ruleSS_DQUOTEEx: ;

}
// $ANTLR end SS_DQUOTE

//   Comes from: 728:2: ( '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ESQ_FSLASH_SQUOTE
 *
 * Looks to match the characters the constitute the token ESQ_FSLASH_SQUOTE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mESQ_FSLASH_SQUOTE(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ESQ_FSLASH_SQUOTE;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:728:2: ( '\\'' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:728:4: '\\''
    {
        MATCHC('\''); 
        if  (HASEXCEPTION())
        {
            goto ruleESQ_FSLASH_SQUOTEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleESQ_FSLASH_SQUOTEEx; /* Prevent compiler warnings */
    ruleESQ_FSLASH_SQUOTEEx: ;

}
// $ANTLR end ESQ_FSLASH_SQUOTE

//   Comes from: 732:2: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_OCBRACKET
 *
 * Looks to match the characters the constitute the token SS_OCBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_OCBRACKET(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_OCBRACKET;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:732:2: ( '{' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:732:4: '{'
    {
        MATCHC('{'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_OCBRACKETEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_OCBRACKETEx; /* Prevent compiler warnings */
    ruleSS_OCBRACKETEx: ;

}
// $ANTLR end SS_OCBRACKET

//   Comes from: 736:2: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_CCBRACKET
 *
 * Looks to match the characters the constitute the token SS_CCBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_CCBRACKET(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_CCBRACKET;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:736:2: ( '}' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:736:4: '}'
    {
        MATCHC('}'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_CCBRACKETEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_CCBRACKETEx; /* Prevent compiler warnings */
    ruleSS_CCBRACKETEx: ;

}
// $ANTLR end SS_CCBRACKET

//   Comes from: 740:2: ( '..' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_D_DOT
 *
 * Looks to match the characters the constitute the token SS_D_DOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_D_DOT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_D_DOT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:740:2: ( '..' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:740:4: '..'
    {
        MATCHS(lit_55); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_D_DOTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_D_DOTEx; /* Prevent compiler warnings */
    ruleSS_D_DOTEx: ;

}
// $ANTLR end SS_D_DOT

//   Comes from: 744:2: ( 'continue' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_CONTINUE
 *
 * Looks to match the characters the constitute the token KW_CONTINUE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_CONTINUE(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_CONTINUE;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:744:2: ( 'continue' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:744:4: 'continue'
    {
        MATCHS(lit_56); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_CONTINUEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_CONTINUEEx; /* Prevent compiler warnings */
    ruleKW_CONTINUEEx: ;

}
// $ANTLR end KW_CONTINUE

//   Comes from: 748:2: ( 'catch' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_CATCH
 *
 * Looks to match the characters the constitute the token KW_CATCH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_CATCH(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_CATCH;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:748:2: ( 'catch' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:748:4: 'catch'
    {
        MATCHS(lit_57); 
        if  (HASEXCEPTION())
        {
            goto ruleKW_CATCHEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleKW_CATCHEx; /* Prevent compiler warnings */
    ruleKW_CATCHEx: ;

}
// $ANTLR end KW_CATCH

//   Comes from: 752:2: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SS_DOT
 *
 * Looks to match the characters the constitute the token SS_DOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSS_DOT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SS_DOT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:752:2: ( '.' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:752:4: '.'
    {
        MATCHC('.'); 
        if  (HASEXCEPTION())
        {
            goto ruleSS_DOTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSS_DOTEx; /* Prevent compiler warnings */
    ruleSS_DOTEx: ;

}
// $ANTLR end SS_DOT

//   Comes from: 756:2: ( LETTER ( LETTER | '0' .. '9' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IDENTIFIER
 *
 * Looks to match the characters the constitute the token IDENTIFIER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mIDENTIFIER(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = IDENTIFIER;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:756:2: ( LETTER ( LETTER | '0' .. '9' )* )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:756:4: LETTER ( LETTER | '0' .. '9' )*
    {
        /* 756:4: LETTER ( LETTER | '0' .. '9' )* */
        mLETTER(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleIDENTIFIEREx;
        }


        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:756:11: ( LETTER | '0' .. '9' )*

        for (;;)
        {
            int alt2=2;
            switch ( LA(1) ) 
            {
            case '$':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt2=1;
            	}
                break;

            }

            switch (alt2) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:
        	    {
        	        if ( LA(1) == '$' || ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleIDENTIFIEREx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop2;	/* break out of the loop */
        	    break;
            }
        }
        loop2: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleIDENTIFIEREx; /* Prevent compiler warnings */
    ruleIDENTIFIEREx: ;

}
// $ANTLR end IDENTIFIER

//   Comes from: 761:2: ( '$' | 'A' .. 'Z' | 'a' .. 'z' | '_' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LETTER
 *
 * Looks to match the characters the constitute the token LETTER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLETTER(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:761:2: ( '$' | 'A' .. 'Z' | 'a' .. 'z' | '_' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:
    {
        if ( LA(1) == '$' || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleLETTEREx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleLETTEREx; /* Prevent compiler warnings */
    ruleLETTEREx: ;

}
// $ANTLR end LETTER

//   Comes from: 767:8: ( ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIGIT
 *
 * Looks to match the characters the constitute the token DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDIGIT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DIGIT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:767:8: ( ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:767:10: ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )?
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:767:10: ( '0' .. '9' )+
        {
            int cnt3=0;

            for (;;)
            {
                int alt3=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt3=1;
        		}
        	    break;

        	}

        	switch (alt3) 
        	{
        	    case 1:
        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:767:11: '0' .. '9'
        	        {
        	            MATCHRANGE('0', '9'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleDIGITEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt3 >= 1 )
        		{
        		    goto loop3;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleDIGITEx;
        	}
        	cnt3++;
            }
            loop3: ;	/* Jump to here if this rule does not match */
        }

        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:767:21: ( '.' ( '0' .. '9' )+ )?
        {
            int alt5=2;
            switch ( LA(1) ) 
            {
                case '.':
                	{
                		alt5=1;
                	}
                    break;
            }

            switch (alt5) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:767:22: '.' ( '0' .. '9' )+
        	    {
        	        MATCHC('.'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleDIGITEx;
        	        }

        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:767:25: ( '0' .. '9' )+
        	        {
        	            int cnt4=0;

        	            for (;;)
        	            {
        	                int alt4=2;
        	        	switch ( LA(1) ) 
        	        	{
        	        	case '0':
        	        	case '1':
        	        	case '2':
        	        	case '3':
        	        	case '4':
        	        	case '5':
        	        	case '6':
        	        	case '7':
        	        	case '8':
        	        	case '9':
        	        		{
        	        			alt4=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt4) 
        	        	{
        	        	    case 1:
        	        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:767:26: '0' .. '9'
        	        	        {
        	        	            MATCHRANGE('0', '9'); 
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruleDIGITEx;
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:
        	        	    
        	        		if ( cnt4 >= 1 )
        	        		{
        	        		    goto loop4;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto ruleDIGITEx;
        	        	}
        	        	cnt4++;
        	            }
        	            loop4: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;

            }
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleDIGITEx; /* Prevent compiler warnings */
    ruleDIGITEx: ;

}
// $ANTLR end DIGIT

//   Comes from: 771:2: ( '0' ( 'x' | 'X' ) ( HexDigit )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_LITERAL
 *
 * Looks to match the characters the constitute the token HEX_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHEX_LITERAL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = HEX_LITERAL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:771:2: ( '0' ( 'x' | 'X' ) ( HexDigit )+ )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:771:4: '0' ( 'x' | 'X' ) ( HexDigit )+
    {
        MATCHC('0'); 
        if  (HASEXCEPTION())
        {
            goto ruleHEX_LITERALEx;
        }

        if ( LA(1) == 'X' || LA(1) == 'x' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleHEX_LITERALEx;
        }

        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:771:18: ( HexDigit )+
        {
            int cnt6=0;

            for (;;)
            {
                int alt6=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        	case 'A':
        	case 'B':
        	case 'C':
        	case 'D':
        	case 'E':
        	case 'F':
        	case 'a':
        	case 'b':
        	case 'c':
        	case 'd':
        	case 'e':
        	case 'f':
        		{
        			alt6=1;
        		}
        	    break;

        	}

        	switch (alt6) 
        	{
        	    case 1:
        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:771:18: HexDigit
        	        {
        	            /* 771:18: HexDigit */
        	            mHexDigit(ctx ); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleHEX_LITERALEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt6 >= 1 )
        		{
        		    goto loop6;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleHEX_LITERALEx;
        	}
        	cnt6++;
            }
            loop6: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleHEX_LITERALEx; /* Prevent compiler warnings */
    ruleHEX_LITERALEx: ;

}
// $ANTLR end HEX_LITERAL

//   Comes from: 776:2: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HexDigit
 *
 * Looks to match the characters the constitute the token HexDigit
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHexDigit(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:776:2: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:776:4: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
    {
        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleHexDigitEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleHexDigitEx; /* Prevent compiler warnings */
    ruleHexDigitEx: ;

}
// $ANTLR end HexDigit

//   Comes from: 780:2: ( ( ' ' | '\\t' | '\\u000C' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:780:2: ( ( ' ' | '\\t' | '\\u000C' ) )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:780:5: ( ' ' | '\\t' | '\\u000C' )
    {
        if ( LA(1) == '\t' || LA(1) == '\f' || LA(1) == ' ' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWSEx;
        }

        {
            LEXSTATE->channel=HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 784:2: ( ( ';' | ( '\\r' )? '\\n' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EOL
 *
 * Looks to match the characters the constitute the token EOL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEOL(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = EOL;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:784:2: ( ( ';' | ( '\\r' )? '\\n' )+ )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:784:4: ( ';' | ( '\\r' )? '\\n' )+
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:784:4: ( ';' | ( '\\r' )? '\\n' )+
        {
            int cnt8=0;

            for (;;)
            {
                int alt8=3;
        	switch ( LA(1) ) 
        	{
        	case ';':
        		{
        			alt8=1;
        		}
        	    break;
        	case '\n':
        	case '\r':
        		{
        			alt8=2;
        		}
        	    break;

        	}

        	switch (alt8) 
        	{
        	    case 1:
        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:784:5: ';'
        	        {
        	            MATCHC(';'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleEOLEx;
        	            }


        	        }
        	        break;
        	    case 2:
        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:784:12: ( '\\r' )? '\\n'
        	        {

        	            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:784:12: ( '\\r' )?
        	            {
        	                int alt7=2;
        	                switch ( LA(1) ) 
        	                {
        	                    case '\r':
        	                    	{
        	                    		alt7=1;
        	                    	}
        	                        break;
        	                }

        	                switch (alt7) 
        	                {
        	            	case 1:
        	            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:784:12: '\\r'
        	            	    {
        	            	        MATCHC('\r'); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto ruleEOLEx;
        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }
        	            MATCHC('\n'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleEOLEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt8 >= 1 )
        		{
        		    goto loop8;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleEOLEx;
        	}
        	cnt8++;
            }
            loop8: ;	/* Jump to here if this rule does not match */
        }
        {
            LEXSTATE->channel=HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleEOLEx; /* Prevent compiler warnings */
    ruleEOLEx: ;

}
// $ANTLR end EOL

//   Comes from: 788:2: ( '/*' ( options {greedy=false; } : . )* '*/' | '//' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMENT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMENT;
       
    
    {
        //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:788:2: ( '/*' ( options {greedy=false; } : . )* '*/' | '//' )
        
        ANTLR3_UINT32 alt10;

        alt10=2;

        switch ( LA(1) ) 
        {
        case '/':
        	{
        		switch ( LA(2) ) 
        		{
        		case '*':
        			{
        				alt10=1;
        			}
        		    break;
        		case '/':
        			{
        				alt10=2;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 10;
        		    EXCEPTION->state        = 1;


        		    goto ruleCOMMENTEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 10;
            EXCEPTION->state        = 0;


            goto ruleCOMMENTEx;
        }

        switch (alt10) 
        {
    	case 1:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:788:5: '/*' ( options {greedy=false; } : . )* '*/'
    	    {
    	        MATCHS(lit_58); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }



    	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:788:10: ( options {greedy=false; } : . )*

    	        for (;;)
    	        {
    	            int alt9=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA9_0 = LA(1);
    	                if ( (LA9_0 == '*') ) 
    	                {
    	                    {
    	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                        */
    	                        int LA9_1 = LA(2);
    	                        if ( (LA9_1 == '/') ) 
    	                        {
    	                            alt9=2;
    	                        }
    	                        else if ( (((LA9_1 >= 0x0000) && (LA9_1 <= '.')) || ((LA9_1 >= '0') && (LA9_1 <= 0xFFFF))) ) 
    	                        {
    	                            alt9=1;
    	                        }

    	                    }
    	                }
    	                else if ( (((LA9_0 >= 0x0000) && (LA9_0 <= ')')) || ((LA9_0 >= '+') && (LA9_0 <= 0xFFFF))) ) 
    	                {
    	                    alt9=1;
    	                }

    	            }
    	            switch (alt9) 
    	            {
    	        	case 1:
    	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:788:38: .
    	        	    {
    	        	        MATCHANY(); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop9;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop9: ; /* Jump out to here if this rule does not match */

    	        MATCHS(lit_59); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }


    	        {
    	            LEXSTATE->channel=HIDDEN;
    	        }

    	    }
    	    break;
    	case 2:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:790:2: '//'
    	    {
    	        MATCHS(lit_60); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 794:6: ( '--' (~ ( '\\n' ) )* ( '\\r' )? '\\n' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LINE_COMMENT
 *
 * Looks to match the characters the constitute the token LINE_COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLINE_COMMENT(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LINE_COMMENT;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:794:6: ( '--' (~ ( '\\n' ) )* ( '\\r' )? '\\n' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:794:8: '--' (~ ( '\\n' ) )* ( '\\r' )? '\\n'
    {
        MATCHS(lit_61); 
        if  (HASEXCEPTION())
        {
            goto ruleLINE_COMMENTEx;
        }



        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:794:13: (~ ( '\\n' ) )*

        for (;;)
        {
            int alt11=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA11_0 = LA(1);
                if ( (((LA11_0 >= 0x0000) && (LA11_0 <= '\t')) || ((LA11_0 >= 0x000B) && (LA11_0 <= 0xFFFF))) ) 
                {
                    alt11=1;
                }

            }
            switch (alt11) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:794:13: ~ ( '\\n' )
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop11;	/* break out of the loop */
        	    break;
            }
        }
        loop11: ; /* Jump out to here if this rule does not match */


        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:794:22: ( '\\r' )?
        {
            int alt12=2;
            switch ( LA(1) ) 
            {
                case '\r':
                	{
                		alt12=1;
                	}
                    break;
            }

            switch (alt12) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:794:22: '\\r'
        	    {
        	        MATCHC('\r'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;

            }
        }
        MATCHC('\n'); 
        if  (HASEXCEPTION())
        {
            goto ruleLINE_COMMENTEx;
        }

        {
            LEXSTATE->channel=HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLINE_COMMENTEx; /* Prevent compiler warnings */
    ruleLINE_COMMENTEx: ;

}
// $ANTLR end LINE_COMMENT

//   Comes from: 797:2: ( '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start REF_OP
 *
 * Looks to match the characters the constitute the token REF_OP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mREF_OP(pyatgLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = REF_OP;
       
    
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:797:2: ( '&' )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:797:3: '&'
    {
        MATCHC('&'); 
        if  (HASEXCEPTION())
        {
            goto ruleREF_OPEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleREF_OPEx; /* Prevent compiler warnings */
    ruleREF_OPEx: ;

}
// $ANTLR end REF_OP

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pyatgLexer ctx)
{
    {
        //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:8: ( STRING_LITERIAL | SS_COMMA | KW_LOCAL | KW_GLOBAL | SS_EQUAL | KW_IF | KW_THEN | KW_DO | KW_ELSE | KW_WHILE | KW_FOR | KW_IN | KW_COLLECT | KW_TO | KW_BY | KW_WHERE | KW_EXIT | KW_WITH | KW_CASE | KW_OF | SS_OPAREN | SS_CPAREN | SS_COLON | KW_DEFAULT | KW_STRUCT | KW_TRY | KW_MAPPED | KW_FUNCTION | KW_FN | KW_RETURN | KW_ANIMATE | KW_AT | KW_LEVEL | KW_TIME | KW_COORDSYS | KW_WORLD | KW_PARENT | KW_ABOUT | KW_PIVOT | KW_SELECTION | KW_UNDO | KW_SET | SS_PLUS | SS_MINUS | SS_STAR | SS_FSLASH | SS_PERCENT | SS_OBRACKET | SS_CBRACKET | SS_HASH | KW_TRUE | KW_FALSE | KW_ON | KW_OFF | KW_OK | KW_UNDEFINED | KW_UNSUPPLIED | SS_D_BAR | SS_D_AMP | SS_D_EQUAL | SS_EXC_EQUAL | SS_LT | SS_GT | SS_LT_EQUAL | SS_GT_EQUAL | SS_STAR_EQUAL | SS_FSLASH_EQUAL | SS_PERCENT_EQUAL | SS_PLUS_EQUAL | SS_MINUS_EQUAL | SS_DQUOTE | ESQ_FSLASH_SQUOTE | SS_OCBRACKET | SS_CCBRACKET | SS_D_DOT | KW_CONTINUE | KW_CATCH | SS_DOT | IDENTIFIER | DIGIT | HEX_LITERAL | WS | EOL | COMMENT | LINE_COMMENT | REF_OP )
        
        ANTLR3_UINT32 alt13;

        alt13=86;

        switch ( LA(1) ) 
        {
        case '"':
        	{

        		{
        		    int LA13_1 = LA(2);
        		    if ( (((LA13_1 >= 0x0000) && (LA13_1 <= 0xFFFF))) ) 
        		    {
        		        alt13=1;
        		    }
        		    else 
        		    {
        		        alt13=71;    }
        		}
        	}
            break;
        case ',':
        	{
        		alt13=2;
        	}
            break;
        case 'l':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'c':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'a':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'l':
        									{
        										switch ( LA(6) ) 
        										{
        										case '$':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt13=79;
        											}
        										    break;

        										default:
        										    alt13=3;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;
        		case 'e':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'v':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'l':
        									{
        										switch ( LA(6) ) 
        										{
        										case '$':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt13=79;
        											}
        										    break;

        										default:
        										    alt13=33;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'g':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'l':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'b':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'a':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'l':
        											{
        												switch ( LA(7) ) 
        												{
        												case '$':
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt13=79;
        													}
        												    break;

        												default:
        												    alt13=4;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case '=':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt13=60;
        			}
        		    break;

        		default:
        		    alt13=5;}

        	}
            break;
        case 'i':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'f':
        			{
        				switch ( LA(3) ) 
        				{
        				case '$':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt13=79;
        					}
        				    break;

        				default:
        				    alt13=6;}

        			}
        		    break;
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case '$':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt13=79;
        					}
        				    break;

        				default:
        				    alt13=12;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 't':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'h':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'e':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'n':
        							{
        								switch ( LA(5) ) 
        								{
        								case '$':
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt13=79;
        									}
        								    break;

        								default:
        								    alt13=7;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case '$':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt13=79;
        					}
        				    break;

        				default:
        				    alt13=14;}

        			}
        		    break;
        		case 'r':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'y':
        					{
        						switch ( LA(4) ) 
        						{
        						case '$':
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt13=79;
        							}
        						    break;

        						default:
        						    alt13=26;}

        					}
        				    break;
        				case 'u':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case '$':
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt13=79;
        									}
        								    break;

        								default:
        								    alt13=51;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;
        		case 'i':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'm':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case '$':
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt13=79;
        									}
        								    break;

        								default:
        								    alt13=34;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'd':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case '$':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt13=79;
        					}
        				    break;

        				default:
        				    alt13=8;}

        			}
        		    break;
        		case 'e':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'f':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'a':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'u':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'l':
        											{
        												switch ( LA(7) ) 
        												{
        												case 't':
        													{
        														switch ( LA(8) ) 
        														{
        														case '$':
        														case '0':
        														case '1':
        														case '2':
        														case '3':
        														case '4':
        														case '5':
        														case '6':
        														case '7':
        														case '8':
        														case '9':
        														case 'A':
        														case 'B':
        														case 'C':
        														case 'D':
        														case 'E':
        														case 'F':
        														case 'G':
        														case 'H':
        														case 'I':
        														case 'J':
        														case 'K':
        														case 'L':
        														case 'M':
        														case 'N':
        														case 'O':
        														case 'P':
        														case 'Q':
        														case 'R':
        														case 'S':
        														case 'T':
        														case 'U':
        														case 'V':
        														case 'W':
        														case 'X':
        														case 'Y':
        														case 'Z':
        														case '_':
        														case 'a':
        														case 'b':
        														case 'c':
        														case 'd':
        														case 'e':
        														case 'f':
        														case 'g':
        														case 'h':
        														case 'i':
        														case 'j':
        														case 'k':
        														case 'l':
        														case 'm':
        														case 'n':
        														case 'o':
        														case 'p':
        														case 'q':
        														case 'r':
        														case 's':
        														case 't':
        														case 'u':
        														case 'v':
        														case 'w':
        														case 'x':
        														case 'y':
        														case 'z':
        															{
        																alt13=79;
        															}
        														    break;

        														default:
        														    alt13=24;}

        													}
        												    break;

        												default:
        												    alt13=79;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'e':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'l':
        			{
        				switch ( LA(3) ) 
        				{
        				case 's':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case '$':
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt13=79;
        									}
        								    break;

        								default:
        								    alt13=9;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;
        		case 'x':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'i':
        					{
        						switch ( LA(4) ) 
        						{
        						case 't':
        							{
        								switch ( LA(5) ) 
        								{
        								case '$':
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt13=79;
        									}
        								    break;

        								default:
        								    alt13=17;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'w':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'h':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'i':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'l':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'e':
        									{
        										switch ( LA(6) ) 
        										{
        										case '$':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt13=79;
        											}
        										    break;

        										default:
        										    alt13=10;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;
        				case 'e':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'r':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'e':
        									{
        										switch ( LA(6) ) 
        										{
        										case '$':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt13=79;
        											}
        										    break;

        										default:
        										    alt13=16;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;
        		case 'i':
        			{
        				switch ( LA(3) ) 
        				{
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'h':
        							{
        								switch ( LA(5) ) 
        								{
        								case '$':
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt13=79;
        									}
        								    break;

        								default:
        								    alt13=18;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'r':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'l':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'd':
        									{
        										switch ( LA(6) ) 
        										{
        										case '$':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt13=79;
        											}
        										    break;

        										default:
        										    alt13=36;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'f':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'r':
        					{
        						switch ( LA(4) ) 
        						{
        						case '$':
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt13=79;
        							}
        						    break;

        						default:
        						    alt13=11;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;
        		case 'u':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'n':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'c':
        							{
        								switch ( LA(5) ) 
        								{
        								case 't':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'i':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'o':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'n':
        															{
        																switch ( LA(9) ) 
        																{
        																case '$':
        																case '0':
        																case '1':
        																case '2':
        																case '3':
        																case '4':
        																case '5':
        																case '6':
        																case '7':
        																case '8':
        																case '9':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt13=79;
        																	}
        																    break;

        																default:
        																    alt13=28;}

        															}
        														    break;

        														default:
        														    alt13=79;}

        													}
        												    break;

        												default:
        												    alt13=79;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case '$':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt13=79;
        					}
        				    break;

        				default:
        				    alt13=29;}

        			}
        		    break;
        		case 'a':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'l':
        					{
        						switch ( LA(4) ) 
        						{
        						case 's':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'e':
        									{
        										switch ( LA(6) ) 
        										{
        										case '$':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt13=79;
        											}
        										    break;

        										default:
        										    alt13=52;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'c':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'l':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'l':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'e':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'c':
        											{
        												switch ( LA(7) ) 
        												{
        												case 't':
        													{
        														switch ( LA(8) ) 
        														{
        														case '$':
        														case '0':
        														case '1':
        														case '2':
        														case '3':
        														case '4':
        														case '5':
        														case '6':
        														case '7':
        														case '8':
        														case '9':
        														case 'A':
        														case 'B':
        														case 'C':
        														case 'D':
        														case 'E':
        														case 'F':
        														case 'G':
        														case 'H':
        														case 'I':
        														case 'J':
        														case 'K':
        														case 'L':
        														case 'M':
        														case 'N':
        														case 'O':
        														case 'P':
        														case 'Q':
        														case 'R':
        														case 'S':
        														case 'T':
        														case 'U':
        														case 'V':
        														case 'W':
        														case 'X':
        														case 'Y':
        														case 'Z':
        														case '_':
        														case 'a':
        														case 'b':
        														case 'c':
        														case 'd':
        														case 'e':
        														case 'f':
        														case 'g':
        														case 'h':
        														case 'i':
        														case 'j':
        														case 'k':
        														case 'l':
        														case 'm':
        														case 'n':
        														case 'o':
        														case 'p':
        														case 'q':
        														case 'r':
        														case 's':
        														case 't':
        														case 'u':
        														case 'v':
        														case 'w':
        														case 'x':
        														case 'y':
        														case 'z':
        															{
        																alt13=79;
        															}
        														    break;

        														default:
        														    alt13=13;}

        													}
        												    break;

        												default:
        												    alt13=79;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'r':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'd':
        									{
        										switch ( LA(6) ) 
        										{
        										case 's':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'y':
        													{
        														switch ( LA(8) ) 
        														{
        														case 's':
        															{
        																switch ( LA(9) ) 
        																{
        																case '$':
        																case '0':
        																case '1':
        																case '2':
        																case '3':
        																case '4':
        																case '5':
        																case '6':
        																case '7':
        																case '8':
        																case '9':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt13=79;
        																	}
        																    break;

        																default:
        																    alt13=35;}

        															}
        														    break;

        														default:
        														    alt13=79;}

        													}
        												    break;

        												default:
        												    alt13=79;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;
        				case 'n':
        					{
        						switch ( LA(4) ) 
        						{
        						case 't':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'i':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'n':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'u':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'e':
        															{
        																switch ( LA(9) ) 
        																{
        																case '$':
        																case '0':
        																case '1':
        																case '2':
        																case '3':
        																case '4':
        																case '5':
        																case '6':
        																case '7':
        																case '8':
        																case '9':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt13=79;
        																	}
        																    break;

        																default:
        																    alt13=76;}

        															}
        														    break;

        														default:
        														    alt13=79;}

        													}
        												    break;

        												default:
        												    alt13=79;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;
        		case 'a':
        			{
        				switch ( LA(3) ) 
        				{
        				case 's':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case '$':
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt13=79;
        									}
        								    break;

        								default:
        								    alt13=19;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'c':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'h':
        									{
        										switch ( LA(6) ) 
        										{
        										case '$':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt13=79;
        											}
        										    break;

        										default:
        										    alt13=77;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'b':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'y':
        			{
        				switch ( LA(3) ) 
        				{
        				case '$':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt13=79;
        					}
        				    break;

        				default:
        				    alt13=15;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'o':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'f':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'f':
        					{
        						switch ( LA(4) ) 
        						{
        						case '$':
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt13=79;
        							}
        						    break;

        						default:
        						    alt13=54;}

        					}
        				    break;
        				case '$':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt13=79;
        					}
        				    break;

        				default:
        				    alt13=20;}

        			}
        		    break;
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case '$':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt13=79;
        					}
        				    break;

        				default:
        				    alt13=53;}

        			}
        		    break;
        		case 'k':
        			{
        				switch ( LA(3) ) 
        				{
        				case '$':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt13=79;
        					}
        				    break;

        				default:
        				    alt13=55;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case '(':
        	{
        		alt13=21;
        	}
            break;
        case ')':
        	{
        		alt13=22;
        	}
            break;
        case ':':
        	{
        		alt13=23;
        	}
            break;
        case 's':
        	{
        		switch ( LA(2) ) 
        		{
        		case 't':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'r':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'u':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'c':
        									{
        										switch ( LA(6) ) 
        										{
        										case 't':
        											{
        												switch ( LA(7) ) 
        												{
        												case '$':
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt13=79;
        													}
        												    break;

        												default:
        												    alt13=25;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;
        		case 'e':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'l':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'c':
        									{
        										switch ( LA(6) ) 
        										{
        										case 't':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'i':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'o':
        															{
        																switch ( LA(9) ) 
        																{
        																case 'n':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case '$':
        																		case '0':
        																		case '1':
        																		case '2':
        																		case '3':
        																		case '4':
        																		case '5':
        																		case '6':
        																		case '7':
        																		case '8':
        																		case '9':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt13=79;
        																			}
        																		    break;

        																		default:
        																		    alt13=40;}

        																	}
        																    break;

        																default:
        																    alt13=79;}

        															}
        														    break;

        														default:
        														    alt13=79;}

        													}
        												    break;

        												default:
        												    alt13=79;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case '$':
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt13=79;
        							}
        						    break;

        						default:
        						    alt13=42;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'm':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'a':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'p':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'p':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'e':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'd':
        											{
        												switch ( LA(7) ) 
        												{
        												case '$':
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt13=79;
        													}
        												    break;

        												default:
        												    alt13=27;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'r':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'e':
        			{
        				switch ( LA(3) ) 
        				{
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'u':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'r':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'n':
        											{
        												switch ( LA(7) ) 
        												{
        												case '$':
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt13=79;
        													}
        												    break;

        												default:
        												    alt13=30;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'a':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'i':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'm':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'a':
        									{
        										switch ( LA(6) ) 
        										{
        										case 't':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'e':
        													{
        														switch ( LA(8) ) 
        														{
        														case '$':
        														case '0':
        														case '1':
        														case '2':
        														case '3':
        														case '4':
        														case '5':
        														case '6':
        														case '7':
        														case '8':
        														case '9':
        														case 'A':
        														case 'B':
        														case 'C':
        														case 'D':
        														case 'E':
        														case 'F':
        														case 'G':
        														case 'H':
        														case 'I':
        														case 'J':
        														case 'K':
        														case 'L':
        														case 'M':
        														case 'N':
        														case 'O':
        														case 'P':
        														case 'Q':
        														case 'R':
        														case 'S':
        														case 'T':
        														case 'U':
        														case 'V':
        														case 'W':
        														case 'X':
        														case 'Y':
        														case 'Z':
        														case '_':
        														case 'a':
        														case 'b':
        														case 'c':
        														case 'd':
        														case 'e':
        														case 'f':
        														case 'g':
        														case 'h':
        														case 'i':
        														case 'j':
        														case 'k':
        														case 'l':
        														case 'm':
        														case 'n':
        														case 'o':
        														case 'p':
        														case 'q':
        														case 'r':
        														case 's':
        														case 't':
        														case 'u':
        														case 'v':
        														case 'w':
        														case 'x':
        														case 'y':
        														case 'z':
        															{
        																alt13=79;
        															}
        														    break;

        														default:
        														    alt13=31;}

        													}
        												    break;

        												default:
        												    alt13=79;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;
        		case 't':
        			{
        				switch ( LA(3) ) 
        				{
        				case '$':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt13=79;
        					}
        				    break;

        				default:
        				    alt13=32;}

        			}
        		    break;
        		case 'b':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'u':
        							{
        								switch ( LA(5) ) 
        								{
        								case 't':
        									{
        										switch ( LA(6) ) 
        										{
        										case '$':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt13=79;
        											}
        										    break;

        										default:
        										    alt13=38;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'p':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'a':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'r':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'n':
        									{
        										switch ( LA(6) ) 
        										{
        										case 't':
        											{
        												switch ( LA(7) ) 
        												{
        												case '$':
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt13=79;
        													}
        												    break;

        												default:
        												    alt13=37;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;
        		case 'i':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'v':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'o':
        							{
        								switch ( LA(5) ) 
        								{
        								case 't':
        									{
        										switch ( LA(6) ) 
        										{
        										case '$':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt13=79;
        											}
        										    break;

        										default:
        										    alt13=39;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case 'u':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'd':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'o':
        							{
        								switch ( LA(5) ) 
        								{
        								case '$':
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt13=79;
        									}
        								    break;

        								default:
        								    alt13=41;}

        							}
        						    break;
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'f':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'i':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'n':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'e':
        															{
        																switch ( LA(9) ) 
        																{
        																case 'd':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case '$':
        																		case '0':
        																		case '1':
        																		case '2':
        																		case '3':
        																		case '4':
        																		case '5':
        																		case '6':
        																		case '7':
        																		case '8':
        																		case '9':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt13=79;
        																			}
        																		    break;

        																		default:
        																		    alt13=56;}

        																	}
        																    break;

        																default:
        																    alt13=79;}

        															}
        														    break;

        														default:
        														    alt13=79;}

        													}
        												    break;

        												default:
        												    alt13=79;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;
        				case 's':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'u':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'p':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'p':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'l':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'i':
        															{
        																switch ( LA(9) ) 
        																{
        																case 'e':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case 'd':
        																			{
        																				switch ( LA(11) ) 
        																				{
        																				case '$':
        																				case '0':
        																				case '1':
        																				case '2':
        																				case '3':
        																				case '4':
        																				case '5':
        																				case '6':
        																				case '7':
        																				case '8':
        																				case '9':
        																				case 'A':
        																				case 'B':
        																				case 'C':
        																				case 'D':
        																				case 'E':
        																				case 'F':
        																				case 'G':
        																				case 'H':
        																				case 'I':
        																				case 'J':
        																				case 'K':
        																				case 'L':
        																				case 'M':
        																				case 'N':
        																				case 'O':
        																				case 'P':
        																				case 'Q':
        																				case 'R':
        																				case 'S':
        																				case 'T':
        																				case 'U':
        																				case 'V':
        																				case 'W':
        																				case 'X':
        																				case 'Y':
        																				case 'Z':
        																				case '_':
        																				case 'a':
        																				case 'b':
        																				case 'c':
        																				case 'd':
        																				case 'e':
        																				case 'f':
        																				case 'g':
        																				case 'h':
        																				case 'i':
        																				case 'j':
        																				case 'k':
        																				case 'l':
        																				case 'm':
        																				case 'n':
        																				case 'o':
        																				case 'p':
        																				case 'q':
        																				case 'r':
        																				case 's':
        																				case 't':
        																				case 'u':
        																				case 'v':
        																				case 'w':
        																				case 'x':
        																				case 'y':
        																				case 'z':
        																					{
        																						alt13=79;
        																					}
        																				    break;

        																				default:
        																				    alt13=57;}

        																			}
        																		    break;

        																		default:
        																		    alt13=79;}

        																	}
        																    break;

        																default:
        																    alt13=79;}

        															}
        														    break;

        														default:
        														    alt13=79;}

        													}
        												    break;

        												default:
        												    alt13=79;}

        											}
        										    break;

        										default:
        										    alt13=79;}

        									}
        								    break;

        								default:
        								    alt13=79;}

        							}
        						    break;

        						default:
        						    alt13=79;}

        					}
        				    break;

        				default:
        				    alt13=79;}

        			}
        		    break;

        		default:
        		    alt13=79;}

        	}
            break;
        case '+':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt13=69;
        			}
        		    break;

        		default:
        		    alt13=43;}

        	}
            break;
        case '-':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt13=70;
        			}
        		    break;
        		case '-':
        			{
        				alt13=85;
        			}
        		    break;

        		default:
        		    alt13=44;}

        	}
            break;
        case '*':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt13=66;
        			}
        		    break;

        		default:
        		    alt13=45;}

        	}
            break;
        case '/':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt13=67;
        			}
        		    break;
        		case '*':
        		case '/':
        			{
        				alt13=84;
        			}
        		    break;

        		default:
        		    alt13=46;}

        	}
            break;
        case '%':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt13=68;
        			}
        		    break;

        		default:
        		    alt13=47;}

        	}
            break;
        case '[':
        	{
        		alt13=48;
        	}
            break;
        case ']':
        	{
        		alt13=49;
        	}
            break;
        case '#':
        	{
        		alt13=50;
        	}
            break;
        case '|':
        	{
        		alt13=58;
        	}
            break;
        case '&':
        	{
        		switch ( LA(2) ) 
        		{
        		case '&':
        			{
        				alt13=59;
        			}
        		    break;

        		default:
        		    alt13=86;}

        	}
            break;
        case '!':
        	{
        		alt13=61;
        	}
            break;
        case '<':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt13=64;
        			}
        		    break;

        		default:
        		    alt13=62;}

        	}
            break;
        case '>':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt13=65;
        			}
        		    break;

        		default:
        		    alt13=63;}

        	}
            break;
        case '\'':
        	{
        		alt13=72;
        	}
            break;
        case '{':
        	{
        		alt13=73;
        	}
            break;
        case '}':
        	{
        		alt13=74;
        	}
            break;
        case '.':
        	{
        		switch ( LA(2) ) 
        		{
        		case '.':
        			{
        				alt13=75;
        			}
        		    break;

        		default:
        		    alt13=78;}

        	}
            break;
        case '$':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '_':
        case 'h':
        case 'j':
        case 'k':
        case 'n':
        case 'q':
        case 'v':
        case 'x':
        case 'y':
        case 'z':
        	{
        		alt13=79;
        	}
            break;
        case '0':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'X':
        		case 'x':
        			{
        				alt13=81;
        			}
        		    break;

        		default:
        		    alt13=80;}

        	}
            break;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt13=80;
        	}
            break;
        case '\t':
        case '\f':
        case ' ':
        	{
        		alt13=82;
        	}
            break;
        case '\n':
        case '\r':
        case ';':
        	{
        		alt13=83;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 13;
            EXCEPTION->state        = 0;


            goto ruleTokensEx;
        }

        switch (alt13) 
        {
    	case 1:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:10: STRING_LITERIAL
    	    {
    	        /* 1:10: STRING_LITERIAL */
    	        mSTRING_LITERIAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:26: SS_COMMA
    	    {
    	        /* 1:26: SS_COMMA */
    	        mSS_COMMA(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:35: KW_LOCAL
    	    {
    	        /* 1:35: KW_LOCAL */
    	        mKW_LOCAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:44: KW_GLOBAL
    	    {
    	        /* 1:44: KW_GLOBAL */
    	        mKW_GLOBAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:54: SS_EQUAL
    	    {
    	        /* 1:54: SS_EQUAL */
    	        mSS_EQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:63: KW_IF
    	    {
    	        /* 1:63: KW_IF */
    	        mKW_IF(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:69: KW_THEN
    	    {
    	        /* 1:69: KW_THEN */
    	        mKW_THEN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:77: KW_DO
    	    {
    	        /* 1:77: KW_DO */
    	        mKW_DO(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:83: KW_ELSE
    	    {
    	        /* 1:83: KW_ELSE */
    	        mKW_ELSE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:91: KW_WHILE
    	    {
    	        /* 1:91: KW_WHILE */
    	        mKW_WHILE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:100: KW_FOR
    	    {
    	        /* 1:100: KW_FOR */
    	        mKW_FOR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 12:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:107: KW_IN
    	    {
    	        /* 1:107: KW_IN */
    	        mKW_IN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 13:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:113: KW_COLLECT
    	    {
    	        /* 1:113: KW_COLLECT */
    	        mKW_COLLECT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 14:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:124: KW_TO
    	    {
    	        /* 1:124: KW_TO */
    	        mKW_TO(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:130: KW_BY
    	    {
    	        /* 1:130: KW_BY */
    	        mKW_BY(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:136: KW_WHERE
    	    {
    	        /* 1:136: KW_WHERE */
    	        mKW_WHERE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 17:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:145: KW_EXIT
    	    {
    	        /* 1:145: KW_EXIT */
    	        mKW_EXIT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 18:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:153: KW_WITH
    	    {
    	        /* 1:153: KW_WITH */
    	        mKW_WITH(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 19:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:161: KW_CASE
    	    {
    	        /* 1:161: KW_CASE */
    	        mKW_CASE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 20:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:169: KW_OF
    	    {
    	        /* 1:169: KW_OF */
    	        mKW_OF(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 21:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:175: SS_OPAREN
    	    {
    	        /* 1:175: SS_OPAREN */
    	        mSS_OPAREN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 22:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:185: SS_CPAREN
    	    {
    	        /* 1:185: SS_CPAREN */
    	        mSS_CPAREN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 23:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:195: SS_COLON
    	    {
    	        /* 1:195: SS_COLON */
    	        mSS_COLON(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 24:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:204: KW_DEFAULT
    	    {
    	        /* 1:204: KW_DEFAULT */
    	        mKW_DEFAULT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 25:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:215: KW_STRUCT
    	    {
    	        /* 1:215: KW_STRUCT */
    	        mKW_STRUCT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 26:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:225: KW_TRY
    	    {
    	        /* 1:225: KW_TRY */
    	        mKW_TRY(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 27:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:232: KW_MAPPED
    	    {
    	        /* 1:232: KW_MAPPED */
    	        mKW_MAPPED(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 28:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:242: KW_FUNCTION
    	    {
    	        /* 1:242: KW_FUNCTION */
    	        mKW_FUNCTION(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 29:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:254: KW_FN
    	    {
    	        /* 1:254: KW_FN */
    	        mKW_FN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 30:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:260: KW_RETURN
    	    {
    	        /* 1:260: KW_RETURN */
    	        mKW_RETURN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 31:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:270: KW_ANIMATE
    	    {
    	        /* 1:270: KW_ANIMATE */
    	        mKW_ANIMATE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 32:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:281: KW_AT
    	    {
    	        /* 1:281: KW_AT */
    	        mKW_AT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 33:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:287: KW_LEVEL
    	    {
    	        /* 1:287: KW_LEVEL */
    	        mKW_LEVEL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 34:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:296: KW_TIME
    	    {
    	        /* 1:296: KW_TIME */
    	        mKW_TIME(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 35:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:304: KW_COORDSYS
    	    {
    	        /* 1:304: KW_COORDSYS */
    	        mKW_COORDSYS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 36:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:316: KW_WORLD
    	    {
    	        /* 1:316: KW_WORLD */
    	        mKW_WORLD(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 37:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:325: KW_PARENT
    	    {
    	        /* 1:325: KW_PARENT */
    	        mKW_PARENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 38:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:335: KW_ABOUT
    	    {
    	        /* 1:335: KW_ABOUT */
    	        mKW_ABOUT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 39:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:344: KW_PIVOT
    	    {
    	        /* 1:344: KW_PIVOT */
    	        mKW_PIVOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 40:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:353: KW_SELECTION
    	    {
    	        /* 1:353: KW_SELECTION */
    	        mKW_SELECTION(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 41:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:366: KW_UNDO
    	    {
    	        /* 1:366: KW_UNDO */
    	        mKW_UNDO(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 42:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:374: KW_SET
    	    {
    	        /* 1:374: KW_SET */
    	        mKW_SET(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 43:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:381: SS_PLUS
    	    {
    	        /* 1:381: SS_PLUS */
    	        mSS_PLUS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 44:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:389: SS_MINUS
    	    {
    	        /* 1:389: SS_MINUS */
    	        mSS_MINUS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 45:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:398: SS_STAR
    	    {
    	        /* 1:398: SS_STAR */
    	        mSS_STAR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 46:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:406: SS_FSLASH
    	    {
    	        /* 1:406: SS_FSLASH */
    	        mSS_FSLASH(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 47:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:416: SS_PERCENT
    	    {
    	        /* 1:416: SS_PERCENT */
    	        mSS_PERCENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 48:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:427: SS_OBRACKET
    	    {
    	        /* 1:427: SS_OBRACKET */
    	        mSS_OBRACKET(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 49:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:439: SS_CBRACKET
    	    {
    	        /* 1:439: SS_CBRACKET */
    	        mSS_CBRACKET(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 50:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:451: SS_HASH
    	    {
    	        /* 1:451: SS_HASH */
    	        mSS_HASH(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 51:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:459: KW_TRUE
    	    {
    	        /* 1:459: KW_TRUE */
    	        mKW_TRUE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 52:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:467: KW_FALSE
    	    {
    	        /* 1:467: KW_FALSE */
    	        mKW_FALSE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 53:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:476: KW_ON
    	    {
    	        /* 1:476: KW_ON */
    	        mKW_ON(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 54:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:482: KW_OFF
    	    {
    	        /* 1:482: KW_OFF */
    	        mKW_OFF(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 55:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:489: KW_OK
    	    {
    	        /* 1:489: KW_OK */
    	        mKW_OK(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 56:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:495: KW_UNDEFINED
    	    {
    	        /* 1:495: KW_UNDEFINED */
    	        mKW_UNDEFINED(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 57:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:508: KW_UNSUPPLIED
    	    {
    	        /* 1:508: KW_UNSUPPLIED */
    	        mKW_UNSUPPLIED(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 58:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:522: SS_D_BAR
    	    {
    	        /* 1:522: SS_D_BAR */
    	        mSS_D_BAR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 59:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:531: SS_D_AMP
    	    {
    	        /* 1:531: SS_D_AMP */
    	        mSS_D_AMP(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 60:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:540: SS_D_EQUAL
    	    {
    	        /* 1:540: SS_D_EQUAL */
    	        mSS_D_EQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 61:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:551: SS_EXC_EQUAL
    	    {
    	        /* 1:551: SS_EXC_EQUAL */
    	        mSS_EXC_EQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 62:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:564: SS_LT
    	    {
    	        /* 1:564: SS_LT */
    	        mSS_LT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 63:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:570: SS_GT
    	    {
    	        /* 1:570: SS_GT */
    	        mSS_GT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 64:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:576: SS_LT_EQUAL
    	    {
    	        /* 1:576: SS_LT_EQUAL */
    	        mSS_LT_EQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 65:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:588: SS_GT_EQUAL
    	    {
    	        /* 1:588: SS_GT_EQUAL */
    	        mSS_GT_EQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 66:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:600: SS_STAR_EQUAL
    	    {
    	        /* 1:600: SS_STAR_EQUAL */
    	        mSS_STAR_EQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 67:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:614: SS_FSLASH_EQUAL
    	    {
    	        /* 1:614: SS_FSLASH_EQUAL */
    	        mSS_FSLASH_EQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 68:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:630: SS_PERCENT_EQUAL
    	    {
    	        /* 1:630: SS_PERCENT_EQUAL */
    	        mSS_PERCENT_EQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 69:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:647: SS_PLUS_EQUAL
    	    {
    	        /* 1:647: SS_PLUS_EQUAL */
    	        mSS_PLUS_EQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 70:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:661: SS_MINUS_EQUAL
    	    {
    	        /* 1:661: SS_MINUS_EQUAL */
    	        mSS_MINUS_EQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 71:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:676: SS_DQUOTE
    	    {
    	        /* 1:676: SS_DQUOTE */
    	        mSS_DQUOTE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 72:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:686: ESQ_FSLASH_SQUOTE
    	    {
    	        /* 1:686: ESQ_FSLASH_SQUOTE */
    	        mESQ_FSLASH_SQUOTE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 73:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:704: SS_OCBRACKET
    	    {
    	        /* 1:704: SS_OCBRACKET */
    	        mSS_OCBRACKET(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 74:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:717: SS_CCBRACKET
    	    {
    	        /* 1:717: SS_CCBRACKET */
    	        mSS_CCBRACKET(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 75:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:730: SS_D_DOT
    	    {
    	        /* 1:730: SS_D_DOT */
    	        mSS_D_DOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 76:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:739: KW_CONTINUE
    	    {
    	        /* 1:739: KW_CONTINUE */
    	        mKW_CONTINUE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 77:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:751: KW_CATCH
    	    {
    	        /* 1:751: KW_CATCH */
    	        mKW_CATCH(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 78:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:760: SS_DOT
    	    {
    	        /* 1:760: SS_DOT */
    	        mSS_DOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 79:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:767: IDENTIFIER
    	    {
    	        /* 1:767: IDENTIFIER */
    	        mIDENTIFIER(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 80:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:778: DIGIT
    	    {
    	        /* 1:778: DIGIT */
    	        mDIGIT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 81:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:784: HEX_LITERAL
    	    {
    	        /* 1:784: HEX_LITERAL */
    	        mHEX_LITERAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 82:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:796: WS
    	    {
    	        /* 1:796: WS */
    	        mWS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 83:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:799: EOL
    	    {
    	        /* 1:799: EOL */
    	        mEOL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 84:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:803: COMMENT
    	    {
    	        /* 1:803: COMMENT */
    	        mCOMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 85:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:811: LINE_COMMENT
    	    {
    	        /* 1:811: LINE_COMMENT */
    	        mLINE_COMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 86:
    	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:1:824: REF_OP
    	    {
    	        /* 1:824: REF_OP */
    	        mREF_OP(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
