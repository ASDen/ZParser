/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g
 *     -                            On : 2010-03-04 16:18:30
 *     -                for the parser : yatgParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "yatgParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pyatgParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pyatgParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pyatgParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pyatgParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   yatgParserTokenNames[162+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "VDECL",
        (pANTLR3_UINT8) "VDEF",
        (pANTLR3_UINT8) "VVAL",
        (pANTLR3_UINT8) "ESEQ",
        (pANTLR3_UINT8) "EIF",
        (pANTLR3_UINT8) "EIF_COND",
        (pANTLR3_UINT8) "EIF_THEN",
        (pANTLR3_UINT8) "EIF_ELSE",
        (pANTLR3_UINT8) "EIF_END",
        (pANTLR3_UINT8) "EWHILE",
        (pANTLR3_UINT8) "EWHILE_CON",
        (pANTLR3_UINT8) "EWHILE_EXP",
        (pANTLR3_UINT8) "EWHILE_END",
        (pANTLR3_UINT8) "EDO",
        (pANTLR3_UINT8) "EDO_CON",
        (pANTLR3_UINT8) "EDO_EXP",
        (pANTLR3_UINT8) "EDO_END",
        (pANTLR3_UINT8) "EFOR",
        (pANTLR3_UINT8) "EFOR_SRC",
        (pANTLR3_UINT8) "EFOR_EXP",
        (pANTLR3_UINT8) "EFOR_END",
        (pANTLR3_UINT8) "ESRC_START",
        (pANTLR3_UINT8) "ESRC_TO",
        (pANTLR3_UINT8) "ESRC_BY",
        (pANTLR3_UINT8) "ESRC_WHERE",
        (pANTLR3_UINT8) "P_BOX2",
        (pANTLR3_UINT8) "P_P2",
        (pANTLR3_UINT8) "P_P3",
        (pANTLR3_UINT8) "ARR_A",
        (pANTLR3_UINT8) "ARR_BIT",
        (pANTLR3_UINT8) "ARR_BIT_RANGE",
        (pANTLR3_UINT8) "ARR_IND",
        (pANTLR3_UINT8) "LP_EXIT",
        (pANTLR3_UINT8) "LP_EXIT_WITH",
        (pANTLR3_UINT8) "LP_CONT",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "CASE_Exp",
        (pANTLR3_UINT8) "CASE_Item",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "STRUCT",
        (pANTLR3_UINT8) "MEMBER",
        (pANTLR3_UINT8) "ETRY",
        (pANTLR3_UINT8) "ETRY_EXP",
        (pANTLR3_UINT8) "ECATCH_EXP",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "FUN_DEF",
        (pANTLR3_UINT8) "FUN_NAME",
        (pANTLR3_UINT8) "BODY",
        (pANTLR3_UINT8) "FUN",
        (pANTLR3_UINT8) "MAPPED",
        (pANTLR3_UINT8) "FUN_DEF_END",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "CONTEXT",
        (pANTLR3_UINT8) "COORDSYS",
        (pANTLR3_UINT8) "SELECTION",
        (pANTLR3_UINT8) "PIVOT",
        (pANTLR3_UINT8) "ABOUT",
        (pANTLR3_UINT8) "LOCAL",
        (pANTLR3_UINT8) "WORLD",
        (pANTLR3_UINT8) "PARENT",
        (pANTLR3_UINT8) "LEVEL",
        (pANTLR3_UINT8) "ANIMATE",
        (pANTLR3_UINT8) "TIME",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "UNDO",
        (pANTLR3_UINT8) "EIN",
        (pANTLR3_UINT8) "AT",
        (pANTLR3_UINT8) "OPERAND",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "ARG_EXPR_L",
        (pANTLR3_UINT8) "ID_MORE",
        (pANTLR3_UINT8) "SET",
        (pANTLR3_UINT8) "PRIM_EXP",
        (pANTLR3_UINT8) "SS_COMMA",
        (pANTLR3_UINT8) "KW_LOCAL",
        (pANTLR3_UINT8) "KW_GLOBAL",
        (pANTLR3_UINT8) "IDENTIFIER",
        (pANTLR3_UINT8) "SS_EQUAL",
        (pANTLR3_UINT8) "KW_IF",
        (pANTLR3_UINT8) "KW_THEN",
        (pANTLR3_UINT8) "KW_DO",
        (pANTLR3_UINT8) "KW_ELSE",
        (pANTLR3_UINT8) "KW_WHILE",
        (pANTLR3_UINT8) "KW_FOR",
        (pANTLR3_UINT8) "KW_IN",
        (pANTLR3_UINT8) "KW_COLLECT",
        (pANTLR3_UINT8) "KW_TO",
        (pANTLR3_UINT8) "KW_BY",
        (pANTLR3_UINT8) "KW_WHERE",
        (pANTLR3_UINT8) "KW_EXIT",
        (pANTLR3_UINT8) "KW_WITH",
        (pANTLR3_UINT8) "KW_CONTINUE",
        (pANTLR3_UINT8) "KW_CASE",
        (pANTLR3_UINT8) "KW_OF",
        (pANTLR3_UINT8) "SS_OPAREN",
        (pANTLR3_UINT8) "SS_CPAREN",
        (pANTLR3_UINT8) "SS_COLON",
        (pANTLR3_UINT8) "KW_DEFAULT",
        (pANTLR3_UINT8) "KW_STRUCT",
        (pANTLR3_UINT8) "KW_TRY",
        (pANTLR3_UINT8) "KW_CATCH",
        (pANTLR3_UINT8) "KW_MAPPED",
        (pANTLR3_UINT8) "KW_FUNCTION",
        (pANTLR3_UINT8) "KW_FN",
        (pANTLR3_UINT8) "KW_RETURN",
        (pANTLR3_UINT8) "KW_ANIMATE",
        (pANTLR3_UINT8) "KW_AT",
        (pANTLR3_UINT8) "KW_LEVEL",
        (pANTLR3_UINT8) "KW_TIME",
        (pANTLR3_UINT8) "KW_COORDSYS",
        (pANTLR3_UINT8) "KW_WORLD",
        (pANTLR3_UINT8) "KW_PARENT",
        (pANTLR3_UINT8) "KW_ABOUT",
        (pANTLR3_UINT8) "KW_PIVOT",
        (pANTLR3_UINT8) "KW_SELECTION",
        (pANTLR3_UINT8) "KW_UNDO",
        (pANTLR3_UINT8) "KW_SET",
        (pANTLR3_UINT8) "SS_PLUS",
        (pANTLR3_UINT8) "SS_MINUS",
        (pANTLR3_UINT8) "SS_STAR",
        (pANTLR3_UINT8) "SS_FSLASH",
        (pANTLR3_UINT8) "SS_PERCENT",
        (pANTLR3_UINT8) "SS_DOT",
        (pANTLR3_UINT8) "SS_OBRACKET",
        (pANTLR3_UINT8) "SS_CBRACKET",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "HEX_LITERAL",
        (pANTLR3_UINT8) "STRING_LITERIAL",
        (pANTLR3_UINT8) "SS_HASH",
        (pANTLR3_UINT8) "KW_TRUE",
        (pANTLR3_UINT8) "KW_FALSE",
        (pANTLR3_UINT8) "KW_ON",
        (pANTLR3_UINT8) "KW_OFF",
        (pANTLR3_UINT8) "KW_OK",
        (pANTLR3_UINT8) "KW_UNDEFINED",
        (pANTLR3_UINT8) "KW_UNSUPPLIED",
        (pANTLR3_UINT8) "SS_STAR_EQUAL",
        (pANTLR3_UINT8) "SS_FSLASH_EQUAL",
        (pANTLR3_UINT8) "SS_PERCENT_EQUAL",
        (pANTLR3_UINT8) "SS_PLUS_EQUAL",
        (pANTLR3_UINT8) "SS_MINUS_EQUAL",
        (pANTLR3_UINT8) "SS_D_BAR",
        (pANTLR3_UINT8) "SS_D_AMP",
        (pANTLR3_UINT8) "SS_D_EQUAL",
        (pANTLR3_UINT8) "SS_EXC_EQUAL",
        (pANTLR3_UINT8) "SS_LT",
        (pANTLR3_UINT8) "SS_GT",
        (pANTLR3_UINT8) "SS_LT_EQUAL",
        (pANTLR3_UINT8) "SS_GT_EQUAL",
        (pANTLR3_UINT8) "SS_OCBRACKET",
        (pANTLR3_UINT8) "SS_CCBRACKET",
        (pANTLR3_UINT8) "SS_D_DOT",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "SS_DQUOTE",
        (pANTLR3_UINT8) "ESQ_FSLASH_SQUOTE",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "EOL",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "LINE_COMMENT",
        (pANTLR3_UINT8) "REF_OP"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static yatgParser_program_return	program    (pyatgParser ctx);
static yatgParser_expr_return	expr    (pyatgParser ctx);
static yatgParser_variable_decls_return	variable_decls    (pyatgParser ctx);
static yatgParser_type_decl_return	type_decl    (pyatgParser ctx);
static yatgParser_decl_return	decl    (pyatgParser ctx);
static yatgParser_if_expr_return	if_expr    (pyatgParser ctx);
static yatgParser_while_loop_return	while_loop    (pyatgParser ctx);
static yatgParser_do_loop_return	do_loop    (pyatgParser ctx);
static yatgParser_for_loop_return	for_loop    (pyatgParser ctx);
static yatgParser_source_return	source    (pyatgParser ctx);
static yatgParser_loop_exit_return	loop_exit    (pyatgParser ctx);
static yatgParser_loop_continue_return	loop_continue    (pyatgParser ctx);
static yatgParser_case_expr_return	case_expr    (pyatgParser ctx);
static yatgParser_case_item_return	case_item    (pyatgParser ctx);
static yatgParser_struct_def_return	struct_def    (pyatgParser ctx);
static yatgParser_member_return	member    (pyatgParser ctx);
static yatgParser_try_expr_return	try_expr    (pyatgParser ctx);
static yatgParser_function_def_return	function_def    (pyatgParser ctx);
static yatgParser_fun_return	fun    (pyatgParser ctx);
static yatgParser_function_return_return	function_return    (pyatgParser ctx);
static yatgParser_context_expr_return	context_expr    (pyatgParser ctx);
static yatgParser_context_return	context    (pyatgParser ctx);
static yatgParser_set_context_return	set_context    (pyatgParser ctx);
static yatgParser_math_expression_return	math_expression    (pyatgParser ctx);
static yatgParser_additive_expression_return	additive_expression    (pyatgParser ctx);
static yatgParser_multiplicative_expression_return	multiplicative_expression    (pyatgParser ctx);
static yatgParser_argT_return	argT    (pyatgParser ctx);
static yatgParser_argument_decl_list_return	argument_decl_list    (pyatgParser ctx);
static yatgParser_argument_expression_list_return	argument_expression_list    (pyatgParser ctx);
static yatgParser_unary_expression_return	unary_expression    (pyatgParser ctx);
static yatgParser_operand_return	operand    (pyatgParser ctx);
static yatgParser_operand_op_return	operand_op    (pyatgParser ctx);
static yatgParser_constant_return	constant    (pyatgParser ctx);
static yatgParser_constant_expression_return	constant_expression    (pyatgParser ctx);
static yatgParser_assignment_expression_return	assignment_expression    (pyatgParser ctx);
static yatgParser_lvalue_return	lvalue    (pyatgParser ctx);
static yatgParser_assignment_operator_return	assignment_operator    (pyatgParser ctx);
static yatgParser_logical_expression_return	logical_expression    (pyatgParser ctx);
static yatgParser_logical_or_expression_return	logical_or_expression    (pyatgParser ctx);
static yatgParser_logical_and_expression_return	logical_and_expression    (pyatgParser ctx);
static yatgParser_equality_expression_return	equality_expression    (pyatgParser ctx);
static yatgParser_relational_expression_return	relational_expression    (pyatgParser ctx);
static yatgParser_expr_seq_return	expr_seq    (pyatgParser ctx);
static yatgParser_expr_g_return	expr_g    (pyatgParser ctx);
static yatgParser_box2_return	box2    (pyatgParser ctx);
static yatgParser_point3_return	point3    (pyatgParser ctx);
static yatgParser_point2_return	point2    (pyatgParser ctx);
static yatgParser_array_return	array    (pyatgParser ctx);
static yatgParser_bitarray_return	bitarray    (pyatgParser ctx);
static yatgParser_arrrange_return	arrrange    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred2_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred16_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred18_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred20_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred26_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred53_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred56_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred60_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred69_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred71_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred72_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred73_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred82_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred88_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred89_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred91_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred95_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred97_yatg    (pyatgParser ctx);
static ANTLR3_BOOLEAN	synpred100_yatg    (pyatgParser ctx);
static void	yatgParserFree(pyatgParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new yatgParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pyatgParser
yatgParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return yatgParserNewSSD(instream, NULL);
}

/** \brief Create a new yatgParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pyatgParser
yatgParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pyatgParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pyatgParser) ANTLR3_CALLOC(1, sizeof(yatgParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in yatgParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our yatgParser interface
     */
    ctx->program	= program;
    ctx->expr	= expr;
    ctx->variable_decls	= variable_decls;
    ctx->type_decl	= type_decl;
    ctx->decl	= decl;
    ctx->if_expr	= if_expr;
    ctx->while_loop	= while_loop;
    ctx->do_loop	= do_loop;
    ctx->for_loop	= for_loop;
    ctx->source	= source;
    ctx->loop_exit	= loop_exit;
    ctx->loop_continue	= loop_continue;
    ctx->case_expr	= case_expr;
    ctx->case_item	= case_item;
    ctx->struct_def	= struct_def;
    ctx->member	= member;
    ctx->try_expr	= try_expr;
    ctx->function_def	= function_def;
    ctx->fun	= fun;
    ctx->function_return	= function_return;
    ctx->context_expr	= context_expr;
    ctx->context	= context;
    ctx->set_context	= set_context;
    ctx->math_expression	= math_expression;
    ctx->additive_expression	= additive_expression;
    ctx->multiplicative_expression	= multiplicative_expression;
    ctx->argT	= argT;
    ctx->argument_decl_list	= argument_decl_list;
    ctx->argument_expression_list	= argument_expression_list;
    ctx->unary_expression	= unary_expression;
    ctx->operand	= operand;
    ctx->operand_op	= operand_op;
    ctx->constant	= constant;
    ctx->constant_expression	= constant_expression;
    ctx->assignment_expression	= assignment_expression;
    ctx->lvalue	= lvalue;
    ctx->assignment_operator	= assignment_operator;
    ctx->logical_expression	= logical_expression;
    ctx->logical_or_expression	= logical_or_expression;
    ctx->logical_and_expression	= logical_and_expression;
    ctx->equality_expression	= equality_expression;
    ctx->relational_expression	= relational_expression;
    ctx->expr_seq	= expr_seq;
    ctx->expr_g	= expr_g;
    ctx->box2	= box2;
    ctx->point3	= point3;
    ctx->point2	= point2;
    ctx->array	= array;
    ctx->bitarray	= bitarray;
    ctx->arrrange	= arrrange;
    ctx->synpred2_yatg	= synpred2_yatg;
    ctx->synpred16_yatg	= synpred16_yatg;
    ctx->synpred18_yatg	= synpred18_yatg;
    ctx->synpred20_yatg	= synpred20_yatg;
    ctx->synpred26_yatg	= synpred26_yatg;
    ctx->synpred53_yatg	= synpred53_yatg;
    ctx->synpred56_yatg	= synpred56_yatg;
    ctx->synpred60_yatg	= synpred60_yatg;
    ctx->synpred69_yatg	= synpred69_yatg;
    ctx->synpred71_yatg	= synpred71_yatg;
    ctx->synpred72_yatg	= synpred72_yatg;
    ctx->synpred73_yatg	= synpred73_yatg;
    ctx->synpred82_yatg	= synpred82_yatg;
    ctx->synpred88_yatg	= synpred88_yatg;
    ctx->synpred89_yatg	= synpred89_yatg;
    ctx->synpred91_yatg	= synpred91_yatg;
    ctx->synpred95_yatg	= synpred95_yatg;
    ctx->synpred97_yatg	= synpred97_yatg;
    ctx->synpred100_yatg	= synpred100_yatg;
    ctx->free			= yatgParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    /* Create a LIST for recording rule memos.
     */
     RULEMEMO    = antlr3IntTrieNew(15);	/* 16 bit depth is enough for 32768 rules! */
	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = yatgParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 yatgParserFree(pyatgParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	if	(RULEMEMO != NULL)
	{
		RULEMEMO->free(RULEMEMO);
		RULEMEMO = NULL;
	}	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return yatgParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_program409  */
static	ANTLR3_BITWORD FOLLOW_expr_in_program409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_program409	= { FOLLOW_expr_in_program409_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_expr424  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_expr424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_expr424	= { FOLLOW_assignment_expression_in_expr424_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_decls_in_expr429  */
static	ANTLR3_BITWORD FOLLOW_variable_decls_in_expr429_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_decls_in_expr429	= { FOLLOW_variable_decls_in_expr429_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_if_expr_in_expr438  */
static	ANTLR3_BITWORD FOLLOW_if_expr_in_expr438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_if_expr_in_expr438	= { FOLLOW_if_expr_in_expr438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_while_loop_in_expr447  */
static	ANTLR3_BITWORD FOLLOW_while_loop_in_expr447_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_while_loop_in_expr447	= { FOLLOW_while_loop_in_expr447_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_do_loop_in_expr456  */
static	ANTLR3_BITWORD FOLLOW_do_loop_in_expr456_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_do_loop_in_expr456	= { FOLLOW_do_loop_in_expr456_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_for_loop_in_expr465  */
static	ANTLR3_BITWORD FOLLOW_for_loop_in_expr465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_for_loop_in_expr465	= { FOLLOW_for_loop_in_expr465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_loop_exit_in_expr474  */
static	ANTLR3_BITWORD FOLLOW_loop_exit_in_expr474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_loop_exit_in_expr474	= { FOLLOW_loop_exit_in_expr474_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_loop_continue_in_expr483  */
static	ANTLR3_BITWORD FOLLOW_loop_continue_in_expr483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_loop_continue_in_expr483	= { FOLLOW_loop_continue_in_expr483_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_case_expr_in_expr492  */
static	ANTLR3_BITWORD FOLLOW_case_expr_in_expr492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_case_expr_in_expr492	= { FOLLOW_case_expr_in_expr492_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_struct_def_in_expr501  */
static	ANTLR3_BITWORD FOLLOW_struct_def_in_expr501_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_struct_def_in_expr501	= { FOLLOW_struct_def_in_expr501_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_try_expr_in_expr510  */
static	ANTLR3_BITWORD FOLLOW_try_expr_in_expr510_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_try_expr_in_expr510	= { FOLLOW_try_expr_in_expr510_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_def_in_expr519  */
static	ANTLR3_BITWORD FOLLOW_function_def_in_expr519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_def_in_expr519	= { FOLLOW_function_def_in_expr519_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_return_in_expr528  */
static	ANTLR3_BITWORD FOLLOW_function_return_in_expr528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_return_in_expr528	= { FOLLOW_function_return_in_expr528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_context_expr_in_expr537  */
static	ANTLR3_BITWORD FOLLOW_context_expr_in_expr537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_context_expr_in_expr537	= { FOLLOW_context_expr_in_expr537_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_expr546  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_expr546_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_expr546	= { FOLLOW_expr_seq_in_expr546_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_decl_in_variable_decls567  */
static	ANTLR3_BITWORD FOLLOW_type_decl_in_variable_decls567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_type_decl_in_variable_decls567	= { FOLLOW_type_decl_in_variable_decls567_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_decl_in_variable_decls570  */
static	ANTLR3_BITWORD FOLLOW_decl_in_variable_decls570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_decl_in_variable_decls570	= { FOLLOW_decl_in_variable_decls570_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_variable_decls573  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_variable_decls573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_variable_decls573	= { FOLLOW_SS_COMMA_in_variable_decls573_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_decl_in_variable_decls575  */
static	ANTLR3_BITWORD FOLLOW_decl_in_variable_decls575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_decl_in_variable_decls575	= { FOLLOW_decl_in_variable_decls575_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type_decl0  */
static	ANTLR3_BITWORD FOLLOW_set_in_type_decl0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type_decl0	= { FOLLOW_set_in_type_decl0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_decl622  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_decl622_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_decl622	= { FOLLOW_IDENTIFIER_in_decl622_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_EQUAL_in_decl626  */
static	ANTLR3_BITWORD FOLLOW_SS_EQUAL_in_decl626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_EQUAL_in_decl626	= { FOLLOW_SS_EQUAL_in_decl626_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_decl628  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_decl628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_decl628	= { FOLLOW_expr_g_in_decl628_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_IF_in_if_expr661  */
static	ANTLR3_BITWORD FOLLOW_KW_IF_in_if_expr661_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_IF_in_if_expr661	= { FOLLOW_KW_IF_in_if_expr661_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_if_expr665  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_if_expr665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000180000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_if_expr665	= { FOLLOW_expr_g_in_if_expr665_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_THEN_in_if_expr670  */
static	ANTLR3_BITWORD FOLLOW_KW_THEN_in_if_expr670_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_THEN_in_if_expr670	= { FOLLOW_KW_THEN_in_if_expr670_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_DO_in_if_expr674  */
static	ANTLR3_BITWORD FOLLOW_KW_DO_in_if_expr674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_DO_in_if_expr674	= { FOLLOW_KW_DO_in_if_expr674_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_if_expr681  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_if_expr681_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_if_expr681	= { FOLLOW_expr_g_in_if_expr681_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_ELSE_in_if_expr685  */
static	ANTLR3_BITWORD FOLLOW_KW_ELSE_in_if_expr685_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_ELSE_in_if_expr685	= { FOLLOW_KW_ELSE_in_if_expr685_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_if_expr689  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_if_expr689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_if_expr689	= { FOLLOW_expr_g_in_if_expr689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WHILE_in_while_loop741  */
static	ANTLR3_BITWORD FOLLOW_KW_WHILE_in_while_loop741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WHILE_in_while_loop741	= { FOLLOW_KW_WHILE_in_while_loop741_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_while_loop745  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_while_loop745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_while_loop745	= { FOLLOW_expr_g_in_while_loop745_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_DO_in_while_loop747  */
static	ANTLR3_BITWORD FOLLOW_KW_DO_in_while_loop747_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_DO_in_while_loop747	= { FOLLOW_KW_DO_in_while_loop747_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_while_loop751  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_while_loop751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_while_loop751	= { FOLLOW_expr_g_in_while_loop751_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_DO_in_do_loop788  */
static	ANTLR3_BITWORD FOLLOW_KW_DO_in_do_loop788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_DO_in_do_loop788	= { FOLLOW_KW_DO_in_do_loop788_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_do_loop792  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_do_loop792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_do_loop792	= { FOLLOW_expr_g_in_do_loop792_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WHILE_in_do_loop794  */
static	ANTLR3_BITWORD FOLLOW_KW_WHILE_in_do_loop794_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WHILE_in_do_loop794	= { FOLLOW_KW_WHILE_in_do_loop794_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_do_loop798  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_do_loop798_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_do_loop798	= { FOLLOW_expr_g_in_do_loop798_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_FOR_in_for_loop835  */
static	ANTLR3_BITWORD FOLLOW_KW_FOR_in_for_loop835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_FOR_in_for_loop835	= { FOLLOW_KW_FOR_in_for_loop835_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_for_loop838  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_for_loop838_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000001020000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_for_loop838	= { FOLLOW_IDENTIFIER_in_for_loop838_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_IN_in_for_loop843  */
static	ANTLR3_BITWORD FOLLOW_KW_IN_in_for_loop843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_IN_in_for_loop843	= { FOLLOW_KW_IN_in_for_loop843_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_EQUAL_in_for_loop847  */
static	ANTLR3_BITWORD FOLLOW_SS_EQUAL_in_for_loop847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_EQUAL_in_for_loop847	= { FOLLOW_SS_EQUAL_in_for_loop847_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_source_in_for_loop851  */
static	ANTLR3_BITWORD FOLLOW_source_in_for_loop851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000002100000) };
static  ANTLR3_BITSET_LIST FOLLOW_source_in_for_loop851	= { FOLLOW_source_in_for_loop851_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_DO_in_for_loop854  */
static	ANTLR3_BITWORD FOLLOW_KW_DO_in_for_loop854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_DO_in_for_loop854	= { FOLLOW_KW_DO_in_for_loop854_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_COLLECT_in_for_loop858  */
static	ANTLR3_BITWORD FOLLOW_KW_COLLECT_in_for_loop858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_COLLECT_in_for_loop858	= { FOLLOW_KW_COLLECT_in_for_loop858_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_for_loop861  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_for_loop861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_for_loop861	= { FOLLOW_expr_g_in_for_loop861_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_source902  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_source902_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000014000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_source902	= { FOLLOW_expr_g_in_source902_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_TO_in_source905  */
static	ANTLR3_BITWORD FOLLOW_KW_TO_in_source905_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_TO_in_source905	= { FOLLOW_KW_TO_in_source905_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_source909  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_source909_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000018000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_source909	= { FOLLOW_expr_g_in_source909_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_BY_in_source913  */
static	ANTLR3_BITWORD FOLLOW_KW_BY_in_source913_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_BY_in_source913	= { FOLLOW_KW_BY_in_source913_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_source917  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_source917_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_source917	= { FOLLOW_expr_g_in_source917_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WHERE_in_source926  */
static	ANTLR3_BITWORD FOLLOW_KW_WHERE_in_source926_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WHERE_in_source926	= { FOLLOW_KW_WHERE_in_source926_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_source930  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_source930_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_source930	= { FOLLOW_expr_g_in_source930_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_EXIT_in_loop_exit980  */
static	ANTLR3_BITWORD FOLLOW_KW_EXIT_in_loop_exit980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_EXIT_in_loop_exit980	= { FOLLOW_KW_EXIT_in_loop_exit980_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WITH_in_loop_exit991  */
static	ANTLR3_BITWORD FOLLOW_KW_WITH_in_loop_exit991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WITH_in_loop_exit991	= { FOLLOW_KW_WITH_in_loop_exit991_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_loop_exit993  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_loop_exit993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_loop_exit993	= { FOLLOW_expr_g_in_loop_exit993_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_CONTINUE_in_loop_continue1022  */
static	ANTLR3_BITWORD FOLLOW_KW_CONTINUE_in_loop_continue1022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_CONTINUE_in_loop_continue1022	= { FOLLOW_KW_CONTINUE_in_loop_continue1022_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_CASE_in_case_expr1043  */
static	ANTLR3_BITWORD FOLLOW_KW_CASE_in_case_expr1043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC7E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_CASE_in_case_expr1043	= { FOLLOW_KW_CASE_in_case_expr1043_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_case_expr1047  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_case_expr1047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_case_expr1047	= { FOLLOW_expr_g_in_case_expr1047_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_OF_in_case_expr1052  */
static	ANTLR3_BITWORD FOLLOW_KW_OF_in_case_expr1052_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_OF_in_case_expr1052	= { FOLLOW_KW_OF_in_case_expr1052_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OPAREN_in_case_expr1054  */
static	ANTLR3_BITWORD FOLLOW_SS_OPAREN_in_case_expr1054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400002C00010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OPAREN_in_case_expr1054	= { FOLLOW_SS_OPAREN_in_case_expr1054_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_case_item_in_case_expr1058  */
static	ANTLR3_BITWORD FOLLOW_case_item_in_case_expr1058_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400002C00010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_case_item_in_case_expr1058	= { FOLLOW_case_item_in_case_expr1058_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CPAREN_in_case_expr1063  */
static	ANTLR3_BITWORD FOLLOW_SS_CPAREN_in_case_expr1063_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CPAREN_in_case_expr1063	= { FOLLOW_SS_CPAREN_in_case_expr1063_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_in_case_item1096  */
static	ANTLR3_BITWORD FOLLOW_constant_in_case_item1096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_in_case_item1096	= { FOLLOW_constant_in_case_item1096_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COLON_in_case_item1098  */
static	ANTLR3_BITWORD FOLLOW_SS_COLON_in_case_item1098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COLON_in_case_item1098	= { FOLLOW_SS_COLON_in_case_item1098_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_case_item1100  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_case_item1100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_case_item1100	= { FOLLOW_expr_g_in_case_item1100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_DEFAULT_in_case_item1115  */
static	ANTLR3_BITWORD FOLLOW_KW_DEFAULT_in_case_item1115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_DEFAULT_in_case_item1115	= { FOLLOW_KW_DEFAULT_in_case_item1115_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COLON_in_case_item1117  */
static	ANTLR3_BITWORD FOLLOW_SS_COLON_in_case_item1117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COLON_in_case_item1117	= { FOLLOW_SS_COLON_in_case_item1117_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_case_item1119  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_case_item1119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_case_item1119	= { FOLLOW_expr_g_in_case_item1119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_STRUCT_in_struct_def1142  */
static	ANTLR3_BITWORD FOLLOW_KW_STRUCT_in_struct_def1142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_STRUCT_in_struct_def1142	= { FOLLOW_KW_STRUCT_in_struct_def1142_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OPAREN_in_struct_def1144  */
static	ANTLR3_BITWORD FOLLOW_SS_OPAREN_in_struct_def1144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000E0000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OPAREN_in_struct_def1144	= { FOLLOW_SS_OPAREN_in_struct_def1144_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_member_in_struct_def1146  */
static	ANTLR3_BITWORD FOLLOW_member_in_struct_def1146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800002000) };
static  ANTLR3_BITSET_LIST FOLLOW_member_in_struct_def1146	= { FOLLOW_member_in_struct_def1146_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_struct_def1150  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_struct_def1150_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000E0000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_struct_def1150	= { FOLLOW_SS_COMMA_in_struct_def1150_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_member_in_struct_def1152  */
static	ANTLR3_BITWORD FOLLOW_member_in_struct_def1152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800002000) };
static  ANTLR3_BITSET_LIST FOLLOW_member_in_struct_def1152	= { FOLLOW_member_in_struct_def1152_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CPAREN_in_struct_def1157  */
static	ANTLR3_BITWORD FOLLOW_SS_CPAREN_in_struct_def1157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CPAREN_in_struct_def1157	= { FOLLOW_SS_CPAREN_in_struct_def1157_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_member1178  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_member1178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_member1178	= { FOLLOW_IDENTIFIER_in_member1178_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_EQUAL_in_member1182  */
static	ANTLR3_BITWORD FOLLOW_SS_EQUAL_in_member1182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_EQUAL_in_member1182	= { FOLLOW_SS_EQUAL_in_member1182_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_member1184  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_member1184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_member1184	= { FOLLOW_expr_g_in_member1184_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_def_in_member1203  */
static	ANTLR3_BITWORD FOLLOW_function_def_in_member1203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_def_in_member1203	= { FOLLOW_function_def_in_member1203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_TRY_in_try_expr1221  */
static	ANTLR3_BITWORD FOLLOW_KW_TRY_in_try_expr1221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_TRY_in_try_expr1221	= { FOLLOW_KW_TRY_in_try_expr1221_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_try_expr1225  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_try_expr1225_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_try_expr1225	= { FOLLOW_expr_g_in_try_expr1225_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_CATCH_in_try_expr1227  */
static	ANTLR3_BITWORD FOLLOW_KW_CATCH_in_try_expr1227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_CATCH_in_try_expr1227	= { FOLLOW_KW_CATCH_in_try_expr1227_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_try_expr1232  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_try_expr1232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_try_expr1232	= { FOLLOW_expr_g_in_try_expr1232_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_MAPPED_in_function_def1264  */
static	ANTLR3_BITWORD FOLLOW_KW_MAPPED_in_function_def1264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000E0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_MAPPED_in_function_def1264	= { FOLLOW_KW_MAPPED_in_function_def1264_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_fun_in_function_def1269  */
static	ANTLR3_BITWORD FOLLOW_fun_in_function_def1269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_fun_in_function_def1269	= { FOLLOW_fun_in_function_def1269_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_function_def1271  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_function_def1271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000030000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_function_def1271	= { FOLLOW_IDENTIFIER_in_function_def1271_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_argument_decl_list_in_function_def1275  */
static	ANTLR3_BITWORD FOLLOW_argument_decl_list_in_function_def1275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000030000) };
static  ANTLR3_BITSET_LIST FOLLOW_argument_decl_list_in_function_def1275	= { FOLLOW_argument_decl_list_in_function_def1275_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_EQUAL_in_function_def1281  */
static	ANTLR3_BITWORD FOLLOW_SS_EQUAL_in_function_def1281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_EQUAL_in_function_def1281	= { FOLLOW_SS_EQUAL_in_function_def1281_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_function_def1283  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_function_def1283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_function_def1283	= { FOLLOW_expr_g_in_function_def1283_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_fun0  */
static	ANTLR3_BITWORD FOLLOW_set_in_fun0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_fun0	= { FOLLOW_set_in_fun0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_RETURN_in_function_return1348  */
static	ANTLR3_BITWORD FOLLOW_KW_RETURN_in_function_return1348_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_RETURN_in_function_return1348	= { FOLLOW_KW_RETURN_in_function_return1348_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_function_return1350  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_function_return1350_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_function_return1350	= { FOLLOW_expr_g_in_function_return1350_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_context_in_context_expr1370  */
static	ANTLR3_BITWORD FOLLOW_context_in_context_expr1370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5E000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_context_in_context_expr1370	= { FOLLOW_context_in_context_expr1370_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_context_expr1374  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_context_expr1374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0092600041000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_context_expr1374	= { FOLLOW_SS_COMMA_in_context_expr1374_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_context_in_context_expr1376  */
static	ANTLR3_BITWORD FOLLOW_context_in_context_expr1376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5E000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_context_in_context_expr1376	= { FOLLOW_context_in_context_expr1376_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_context_expr1381  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_context_expr1381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_context_expr1381	= { FOLLOW_expr_g_in_context_expr1381_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WITH_in_context1405  */
static	ANTLR3_BITWORD FOLLOW_KW_WITH_in_context1405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WITH_in_context1405	= { FOLLOW_KW_WITH_in_context1405_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_ANIMATE_in_context1409  */
static	ANTLR3_BITWORD FOLLOW_KW_ANIMATE_in_context1409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_ANIMATE_in_context1409	= { FOLLOW_KW_ANIMATE_in_context1409_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_expression_in_context1411  */
static	ANTLR3_BITWORD FOLLOW_logical_expression_in_context1411_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_expression_in_context1411	= { FOLLOW_logical_expression_in_context1411_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_AT_in_context1426  */
static	ANTLR3_BITWORD FOLLOW_KW_AT_in_context1426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_AT_in_context1426	= { FOLLOW_KW_AT_in_context1426_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_LEVEL_in_context1428  */
static	ANTLR3_BITWORD FOLLOW_KW_LEVEL_in_context1428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_LEVEL_in_context1428	= { FOLLOW_KW_LEVEL_in_context1428_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context1430  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context1430_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context1430	= { FOLLOW_operand_in_context1430_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_AT_in_context1446  */
static	ANTLR3_BITWORD FOLLOW_KW_AT_in_context1446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_AT_in_context1446	= { FOLLOW_KW_AT_in_context1446_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_TIME_in_context1448  */
static	ANTLR3_BITWORD FOLLOW_KW_TIME_in_context1448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_TIME_in_context1448	= { FOLLOW_KW_TIME_in_context1448_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context1450  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context1450_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context1450	= { FOLLOW_operand_in_context1450_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_IN_in_context1466  */
static	ANTLR3_BITWORD FOLLOW_KW_IN_in_context1466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_IN_in_context1466	= { FOLLOW_KW_IN_in_context1466_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context1468  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context1468_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context1468	= { FOLLOW_operand_in_context1468_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_IN_in_context1483  */
static	ANTLR3_BITWORD FOLLOW_KW_IN_in_context1483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_IN_in_context1483	= { FOLLOW_KW_IN_in_context1483_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_COORDSYS_in_context1487  */
static	ANTLR3_BITWORD FOLLOW_KW_COORDSYS_in_context1487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x840C000400014000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_COORDSYS_in_context1487	= { FOLLOW_KW_COORDSYS_in_context1487_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_LOCAL_in_context1497  */
static	ANTLR3_BITWORD FOLLOW_KW_LOCAL_in_context1497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_LOCAL_in_context1497	= { FOLLOW_KW_LOCAL_in_context1497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WORLD_in_context1515  */
static	ANTLR3_BITWORD FOLLOW_KW_WORLD_in_context1515_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WORLD_in_context1515	= { FOLLOW_KW_WORLD_in_context1515_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_PARENT_in_context1532  */
static	ANTLR3_BITWORD FOLLOW_KW_PARENT_in_context1532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_PARENT_in_context1532	= { FOLLOW_KW_PARENT_in_context1532_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context1549  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context1549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context1549	= { FOLLOW_operand_in_context1549_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_ABOUT_in_context1570  */
static	ANTLR3_BITWORD FOLLOW_KW_ABOUT_in_context1570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8462000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_ABOUT_in_context1570	= { FOLLOW_KW_ABOUT_in_context1570_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_PIVOT_in_context1577  */
static	ANTLR3_BITWORD FOLLOW_KW_PIVOT_in_context1577_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_PIVOT_in_context1577	= { FOLLOW_KW_PIVOT_in_context1577_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_SELECTION_in_context1593  */
static	ANTLR3_BITWORD FOLLOW_KW_SELECTION_in_context1593_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_SELECTION_in_context1593	= { FOLLOW_KW_SELECTION_in_context1593_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_COORDSYS_in_context1609  */
static	ANTLR3_BITWORD FOLLOW_KW_COORDSYS_in_context1609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_COORDSYS_in_context1609	= { FOLLOW_KW_COORDSYS_in_context1609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context1625  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context1625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context1625	= { FOLLOW_operand_in_context1625_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WITH_in_context1646  */
static	ANTLR3_BITWORD FOLLOW_KW_WITH_in_context1646_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WITH_in_context1646	= { FOLLOW_KW_WITH_in_context1646_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_UNDO_in_context1651  */
static	ANTLR3_BITWORD FOLLOW_KW_UNDO_in_context1651_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_UNDO_in_context1651	= { FOLLOW_KW_UNDO_in_context1651_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_expression_in_context1653  */
static	ANTLR3_BITWORD FOLLOW_logical_expression_in_context1653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_expression_in_context1653	= { FOLLOW_logical_expression_in_context1653_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_SET_in_set_context1676  */
static	ANTLR3_BITWORD FOLLOW_KW_SET_in_set_context1676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0092600041000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_SET_in_set_context1676	= { FOLLOW_KW_SET_in_set_context1676_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_context_in_set_context1678  */
static	ANTLR3_BITWORD FOLLOW_context_in_set_context1678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_context_in_set_context1678	= { FOLLOW_context_in_set_context1678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additive_expression_in_math_expression1701  */
static	ANTLR3_BITWORD FOLLOW_additive_expression_in_math_expression1701_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additive_expression_in_math_expression1701	= { FOLLOW_additive_expression_in_math_expression1701_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicative_expression_in_additive_expression1713  */
static	ANTLR3_BITWORD FOLLOW_multiplicative_expression_in_additive_expression1713_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0600000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicative_expression_in_additive_expression1713	= { FOLLOW_multiplicative_expression_in_additive_expression1713_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_additive_expression1717  */
static	ANTLR3_BITWORD FOLLOW_set_in_additive_expression1717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_additive_expression1717	= { FOLLOW_set_in_additive_expression1717_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicative_expression_in_additive_expression1724  */
static	ANTLR3_BITWORD FOLLOW_multiplicative_expression_in_additive_expression1724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0600000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicative_expression_in_additive_expression1724	= { FOLLOW_multiplicative_expression_in_additive_expression1724_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_multiplicative_expression1739  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_multiplicative_expression1739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x3800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_multiplicative_expression1739	= { FOLLOW_unary_expression_in_multiplicative_expression1739_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_multiplicative_expression1743  */
static	ANTLR3_BITWORD FOLLOW_set_in_multiplicative_expression1743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_multiplicative_expression1743	= { FOLLOW_set_in_multiplicative_expression1743_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_multiplicative_expression1752  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_multiplicative_expression1752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x3800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_multiplicative_expression1752	= { FOLLOW_unary_expression_in_multiplicative_expression1752_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_argT1764  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_argT1764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_argT1764	= { FOLLOW_IDENTIFIER_in_argT1764_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COLON_in_argT1767  */
static	ANTLR3_BITWORD FOLLOW_SS_COLON_in_argT1767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COLON_in_argT1767	= { FOLLOW_SS_COLON_in_argT1767_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_argT1769  */
static	ANTLR3_BITWORD FOLLOW_operand_in_argT1769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_argT1769	= { FOLLOW_operand_in_argT1769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_argT_in_argument_decl_list1797  */
static	ANTLR3_BITWORD FOLLOW_argT_in_argument_decl_list1797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_argT_in_argument_decl_list1797	= { FOLLOW_argT_in_argument_decl_list1797_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_argument_decl_list1801  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_argument_decl_list1801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_argument_decl_list1801	= { FOLLOW_SS_COMMA_in_argument_decl_list1801_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_argT_in_argument_decl_list1803  */
static	ANTLR3_BITWORD FOLLOW_argT_in_argument_decl_list1803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_argT_in_argument_decl_list1803	= { FOLLOW_argT_in_argument_decl_list1803_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_argument_expression_list1824  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_argument_expression_list1824_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_argument_expression_list1824	= { FOLLOW_expr_g_in_argument_expression_list1824_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_argument_expression_list1828  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_argument_expression_list1828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_argument_expression_list1828	= { FOLLOW_SS_COMMA_in_argument_expression_list1828_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_argument_expression_list1830  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_argument_expression_list1830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_argument_expression_list1830	= { FOLLOW_expr_g_in_argument_expression_list1830_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_unary_expression1850  */
static	ANTLR3_BITWORD FOLLOW_operand_in_unary_expression1850_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_unary_expression1850	= { FOLLOW_operand_in_unary_expression1850_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_operand1860  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_operand1860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xC000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_operand1860	= { FOLLOW_IDENTIFIER_in_operand1860_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_op_in_operand1863  */
static	ANTLR3_BITWORD FOLLOW_operand_op_in_operand1863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xC000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_op_in_operand1863	= { FOLLOW_operand_op_in_operand1863_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_in_operand1892  */
static	ANTLR3_BITWORD FOLLOW_constant_in_operand1892_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_in_operand1892	= { FOLLOW_constant_in_operand1892_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_DOT_in_operand_op1912  */
static	ANTLR3_BITWORD FOLLOW_SS_DOT_in_operand_op1912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_DOT_in_operand_op1912	= { FOLLOW_SS_DOT_in_operand_op1912_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_operand_op1914  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_operand_op1914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_operand_op1914	= { FOLLOW_IDENTIFIER_in_operand_op1914_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OBRACKET_in_operand_op1933  */
static	ANTLR3_BITWORD FOLLOW_SS_OBRACKET_in_operand_op1933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OBRACKET_in_operand_op1933	= { FOLLOW_SS_OBRACKET_in_operand_op1933_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_operand_op1935  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_operand_op1935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_operand_op1935	= { FOLLOW_expr_g_in_operand_op1935_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CBRACKET_in_operand_op1937  */
static	ANTLR3_BITWORD FOLLOW_SS_CBRACKET_in_operand_op1937_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CBRACKET_in_operand_op1937	= { FOLLOW_SS_CBRACKET_in_operand_op1937_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OPAREN_in_operand_op1956  */
static	ANTLR3_BITWORD FOLLOW_SS_OPAREN_in_operand_op1956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927ECDE1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OPAREN_in_operand_op1956	= { FOLLOW_SS_OPAREN_in_operand_op1956_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_argument_expression_list_in_operand_op1958  */
static	ANTLR3_BITWORD FOLLOW_argument_expression_list_in_operand_op1958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_argument_expression_list_in_operand_op1958	= { FOLLOW_argument_expression_list_in_operand_op1958_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CPAREN_in_operand_op1961  */
static	ANTLR3_BITWORD FOLLOW_SS_CPAREN_in_operand_op1961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CPAREN_in_operand_op1961	= { FOLLOW_SS_CPAREN_in_operand_op1961_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIGIT_in_constant1999  */
static	ANTLR3_BITWORD FOLLOW_DIGIT_in_constant1999_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_DIGIT_in_constant1999	= { FOLLOW_DIGIT_in_constant1999_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_HEX_LITERAL_in_constant2008  */
static	ANTLR3_BITWORD FOLLOW_HEX_LITERAL_in_constant2008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_HEX_LITERAL_in_constant2008	= { FOLLOW_HEX_LITERAL_in_constant2008_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_LITERIAL_in_constant2017  */
static	ANTLR3_BITWORD FOLLOW_STRING_LITERIAL_in_constant2017_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_LITERIAL_in_constant2017	= { FOLLOW_STRING_LITERIAL_in_constant2017_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_HASH_in_constant2026  */
static	ANTLR3_BITWORD FOLLOW_SS_HASH_in_constant2026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_HASH_in_constant2026	= { FOLLOW_SS_HASH_in_constant2026_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_constant2028  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_constant2028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_constant2028	= { FOLLOW_IDENTIFIER_in_constant2028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_in_constant2036  */
static	ANTLR3_BITWORD FOLLOW_array_in_constant2036_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_array_in_constant2036	= { FOLLOW_array_in_constant2036_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitarray_in_constant2045  */
static	ANTLR3_BITWORD FOLLOW_bitarray_in_constant2045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitarray_in_constant2045	= { FOLLOW_bitarray_in_constant2045_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_box2_in_constant2054  */
static	ANTLR3_BITWORD FOLLOW_box2_in_constant2054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_box2_in_constant2054	= { FOLLOW_box2_in_constant2054_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_point3_in_constant2062  */
static	ANTLR3_BITWORD FOLLOW_point3_in_constant2062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_point3_in_constant2062	= { FOLLOW_point3_in_constant2062_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_point2_in_constant2070  */
static	ANTLR3_BITWORD FOLLOW_point2_in_constant2070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_point2_in_constant2070	= { FOLLOW_point2_in_constant2070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_TRUE_in_constant2079  */
static	ANTLR3_BITWORD FOLLOW_KW_TRUE_in_constant2079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_TRUE_in_constant2079	= { FOLLOW_KW_TRUE_in_constant2079_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_FALSE_in_constant2088  */
static	ANTLR3_BITWORD FOLLOW_KW_FALSE_in_constant2088_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_FALSE_in_constant2088	= { FOLLOW_KW_FALSE_in_constant2088_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_ON_in_constant2097  */
static	ANTLR3_BITWORD FOLLOW_KW_ON_in_constant2097_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_ON_in_constant2097	= { FOLLOW_KW_ON_in_constant2097_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_OFF_in_constant2106  */
static	ANTLR3_BITWORD FOLLOW_KW_OFF_in_constant2106_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_OFF_in_constant2106	= { FOLLOW_KW_OFF_in_constant2106_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_OK_in_constant2115  */
static	ANTLR3_BITWORD FOLLOW_KW_OK_in_constant2115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_OK_in_constant2115	= { FOLLOW_KW_OK_in_constant2115_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_UNDEFINED_in_constant2124  */
static	ANTLR3_BITWORD FOLLOW_KW_UNDEFINED_in_constant2124_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_UNDEFINED_in_constant2124	= { FOLLOW_KW_UNDEFINED_in_constant2124_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_UNSUPPLIED_in_constant2133  */
static	ANTLR3_BITWORD FOLLOW_KW_UNSUPPLIED_in_constant2133_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_UNSUPPLIED_in_constant2133	= { FOLLOW_KW_UNSUPPLIED_in_constant2133_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_MINUS_in_constant2142  */
static	ANTLR3_BITWORD FOLLOW_SS_MINUS_in_constant2142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_MINUS_in_constant2142	= { FOLLOW_SS_MINUS_in_constant2142_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_constant2144  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_constant2144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_constant2144	= { FOLLOW_expr_g_in_constant2144_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_constant2152  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_constant2152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_constant2152	= { FOLLOW_expr_seq_in_constant2152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_expression_in_constant_expression2168  */
static	ANTLR3_BITWORD FOLLOW_logical_expression_in_constant_expression2168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_expression_in_constant_expression2168	= { FOLLOW_logical_expression_in_constant_expression2168_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_lvalue_in_assignment_expression2179  */
static	ANTLR3_BITWORD FOLLOW_lvalue_in_assignment_expression2179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000020000), ANTLR3_UINT64_LIT(0x000000000001F000) };
static  ANTLR3_BITSET_LIST FOLLOW_lvalue_in_assignment_expression2179	= { FOLLOW_lvalue_in_assignment_expression2179_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_operator_in_assignment_expression2181  */
static	ANTLR3_BITWORD FOLLOW_assignment_operator_in_assignment_expression2181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_operator_in_assignment_expression2181	= { FOLLOW_assignment_operator_in_assignment_expression2181_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_assignment_expression2183  */
static	ANTLR3_BITWORD FOLLOW_expr_in_assignment_expression2183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_assignment_expression2183	= { FOLLOW_expr_in_assignment_expression2183_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_expression_in_assignment_expression2199  */
static	ANTLR3_BITWORD FOLLOW_constant_expression_in_assignment_expression2199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_expression_in_assignment_expression2199	= { FOLLOW_constant_expression_in_assignment_expression2199_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_lvalue2211  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_lvalue2211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_lvalue2211	= { FOLLOW_unary_expression_in_lvalue2211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_assignment_operator0  */
static	ANTLR3_BITWORD FOLLOW_set_in_assignment_operator0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_assignment_operator0	= { FOLLOW_set_in_assignment_operator0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_or_expression_in_logical_expression2258  */
static	ANTLR3_BITWORD FOLLOW_logical_or_expression_in_logical_expression2258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_or_expression_in_logical_expression2258	= { FOLLOW_logical_or_expression_in_logical_expression2258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_and_expression_in_logical_or_expression2269  */
static	ANTLR3_BITWORD FOLLOW_logical_and_expression_in_logical_or_expression2269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_and_expression_in_logical_or_expression2269	= { FOLLOW_logical_and_expression_in_logical_or_expression2269_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_D_BAR_in_logical_or_expression2272  */
static	ANTLR3_BITWORD FOLLOW_SS_D_BAR_in_logical_or_expression2272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_D_BAR_in_logical_or_expression2272	= { FOLLOW_SS_D_BAR_in_logical_or_expression2272_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_and_expression_in_logical_or_expression2275  */
static	ANTLR3_BITWORD FOLLOW_logical_and_expression_in_logical_or_expression2275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_and_expression_in_logical_or_expression2275	= { FOLLOW_logical_and_expression_in_logical_or_expression2275_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equality_expression_in_logical_and_expression2288  */
static	ANTLR3_BITWORD FOLLOW_equality_expression_in_logical_and_expression2288_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_equality_expression_in_logical_and_expression2288	= { FOLLOW_equality_expression_in_logical_and_expression2288_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_D_AMP_in_logical_and_expression2291  */
static	ANTLR3_BITWORD FOLLOW_SS_D_AMP_in_logical_and_expression2291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_D_AMP_in_logical_and_expression2291	= { FOLLOW_SS_D_AMP_in_logical_and_expression2291_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equality_expression_in_logical_and_expression2294  */
static	ANTLR3_BITWORD FOLLOW_equality_expression_in_logical_and_expression2294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_equality_expression_in_logical_and_expression2294	= { FOLLOW_equality_expression_in_logical_and_expression2294_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relational_expression_in_equality_expression2307  */
static	ANTLR3_BITWORD FOLLOW_relational_expression_in_equality_expression2307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000180000) };
static  ANTLR3_BITSET_LIST FOLLOW_relational_expression_in_equality_expression2307	= { FOLLOW_relational_expression_in_equality_expression2307_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_equality_expression2310  */
static	ANTLR3_BITWORD FOLLOW_set_in_equality_expression2310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_equality_expression2310	= { FOLLOW_set_in_equality_expression2310_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relational_expression_in_equality_expression2317  */
static	ANTLR3_BITWORD FOLLOW_relational_expression_in_equality_expression2317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000180000) };
static  ANTLR3_BITSET_LIST FOLLOW_relational_expression_in_equality_expression2317	= { FOLLOW_relational_expression_in_equality_expression2317_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_math_expression_in_relational_expression2330  */
static	ANTLR3_BITWORD FOLLOW_math_expression_in_relational_expression2330_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000001E00000) };
static  ANTLR3_BITSET_LIST FOLLOW_math_expression_in_relational_expression2330	= { FOLLOW_math_expression_in_relational_expression2330_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_relational_expression2333  */
static	ANTLR3_BITWORD FOLLOW_set_in_relational_expression2333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_relational_expression2333	= { FOLLOW_set_in_relational_expression2333_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_math_expression_in_relational_expression2344  */
static	ANTLR3_BITWORD FOLLOW_math_expression_in_relational_expression2344_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000001E00000) };
static  ANTLR3_BITSET_LIST FOLLOW_math_expression_in_relational_expression2344	= { FOLLOW_math_expression_in_relational_expression2344_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OPAREN_in_expr_seq2361  */
static	ANTLR3_BITWORD FOLLOW_SS_OPAREN_in_expr_seq2361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927ECDE1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OPAREN_in_expr_seq2361	= { FOLLOW_SS_OPAREN_in_expr_seq2361_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr_seq2364  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr_seq2364_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927ECDE1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr_seq2364	= { FOLLOW_expr_in_expr_seq2364_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CPAREN_in_expr_seq2369  */
static	ANTLR3_BITWORD FOLLOW_SS_CPAREN_in_expr_seq2369_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CPAREN_in_expr_seq2369	= { FOLLOW_SS_CPAREN_in_expr_seq2369_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_expr_g2390  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_expr_g2390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_expr_g2390	= { FOLLOW_expr_seq_in_expr_g2390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr_g2396  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr_g2396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr_g2396	= { FOLLOW_expr_in_expr_g2396_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OBRACKET_in_box22419  */
static	ANTLR3_BITWORD FOLLOW_SS_OBRACKET_in_box22419_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OBRACKET_in_box22419	= { FOLLOW_SS_OBRACKET_in_box22419_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_box22423  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_box22423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_box22423	= { FOLLOW_expr_g_in_box22423_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_box22425  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_box22425_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_box22425	= { FOLLOW_SS_COMMA_in_box22425_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_box22429  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_box22429_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_box22429	= { FOLLOW_expr_g_in_box22429_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_box22431  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_box22431_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_box22431	= { FOLLOW_SS_COMMA_in_box22431_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_box22435  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_box22435_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_box22435	= { FOLLOW_expr_g_in_box22435_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_box22437  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_box22437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_box22437	= { FOLLOW_SS_COMMA_in_box22437_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_box22441  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_box22441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_box22441	= { FOLLOW_expr_g_in_box22441_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CBRACKET_in_box22443  */
static	ANTLR3_BITWORD FOLLOW_SS_CBRACKET_in_box22443_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CBRACKET_in_box22443	= { FOLLOW_SS_CBRACKET_in_box22443_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OBRACKET_in_point32473  */
static	ANTLR3_BITWORD FOLLOW_SS_OBRACKET_in_point32473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OBRACKET_in_point32473	= { FOLLOW_SS_OBRACKET_in_point32473_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point32477  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point32477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point32477	= { FOLLOW_expr_g_in_point32477_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_point32479  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_point32479_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_point32479	= { FOLLOW_SS_COMMA_in_point32479_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point32483  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point32483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point32483	= { FOLLOW_expr_g_in_point32483_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_point32485  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_point32485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_point32485	= { FOLLOW_SS_COMMA_in_point32485_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point32489  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point32489_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point32489	= { FOLLOW_expr_g_in_point32489_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CBRACKET_in_point32491  */
static	ANTLR3_BITWORD FOLLOW_SS_CBRACKET_in_point32491_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CBRACKET_in_point32491	= { FOLLOW_SS_CBRACKET_in_point32491_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OBRACKET_in_point22519  */
static	ANTLR3_BITWORD FOLLOW_SS_OBRACKET_in_point22519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OBRACKET_in_point22519	= { FOLLOW_SS_OBRACKET_in_point22519_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point22523  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point22523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point22523	= { FOLLOW_expr_g_in_point22523_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_point22525  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_point22525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_point22525	= { FOLLOW_SS_COMMA_in_point22525_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point22529  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point22529_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point22529	= { FOLLOW_expr_g_in_point22529_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CBRACKET_in_point22531  */
static	ANTLR3_BITWORD FOLLOW_SS_CBRACKET_in_point22531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CBRACKET_in_point22531	= { FOLLOW_SS_CBRACKET_in_point22531_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OBRACKET_in_array2556  */
static	ANTLR3_BITWORD FOLLOW_SS_OBRACKET_in_array2556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OBRACKET_in_array2556	= { FOLLOW_SS_OBRACKET_in_array2556_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CBRACKET_in_array2558  */
static	ANTLR3_BITWORD FOLLOW_SS_CBRACKET_in_array2558_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CBRACKET_in_array2558	= { FOLLOW_SS_CBRACKET_in_array2558_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OBRACKET_in_array2570  */
static	ANTLR3_BITWORD FOLLOW_SS_OBRACKET_in_array2570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OBRACKET_in_array2570	= { FOLLOW_SS_OBRACKET_in_array2570_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_array2574  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_array2574_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_array2574	= { FOLLOW_expr_g_in_array2574_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_array2578  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_array2578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_array2578	= { FOLLOW_SS_COMMA_in_array2578_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_array2582  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_array2582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_array2582	= { FOLLOW_expr_g_in_array2582_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CBRACKET_in_array2587  */
static	ANTLR3_BITWORD FOLLOW_SS_CBRACKET_in_array2587_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CBRACKET_in_array2587	= { FOLLOW_SS_CBRACKET_in_array2587_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_HASH_in_bitarray2610  */
static	ANTLR3_BITWORD FOLLOW_SS_HASH_in_bitarray2610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_HASH_in_bitarray2610	= { FOLLOW_SS_HASH_in_bitarray2610_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OCBRACKET_in_bitarray2612  */
static	ANTLR3_BITWORD FOLLOW_SS_OCBRACKET_in_bitarray2612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OCBRACKET_in_bitarray2612	= { FOLLOW_SS_OCBRACKET_in_bitarray2612_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CCBRACKET_in_bitarray2614  */
static	ANTLR3_BITWORD FOLLOW_SS_CCBRACKET_in_bitarray2614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CCBRACKET_in_bitarray2614	= { FOLLOW_SS_CCBRACKET_in_bitarray2614_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_HASH_in_bitarray2625  */
static	ANTLR3_BITWORD FOLLOW_SS_HASH_in_bitarray2625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_HASH_in_bitarray2625	= { FOLLOW_SS_HASH_in_bitarray2625_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OCBRACKET_in_bitarray2627  */
static	ANTLR3_BITWORD FOLLOW_SS_OCBRACKET_in_bitarray2627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OCBRACKET_in_bitarray2627	= { FOLLOW_SS_OCBRACKET_in_bitarray2627_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrrange_in_bitarray2631  */
static	ANTLR3_BITWORD FOLLOW_arrrange_in_bitarray2631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arrrange_in_bitarray2631	= { FOLLOW_arrrange_in_bitarray2631_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_bitarray2635  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_bitarray2635_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_bitarray2635	= { FOLLOW_SS_COMMA_in_bitarray2635_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrrange_in_bitarray2639  */
static	ANTLR3_BITWORD FOLLOW_arrrange_in_bitarray2639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arrrange_in_bitarray2639	= { FOLLOW_arrrange_in_bitarray2639_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CCBRACKET_in_bitarray2644  */
static	ANTLR3_BITWORD FOLLOW_SS_CCBRACKET_in_bitarray2644_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CCBRACKET_in_bitarray2644	= { FOLLOW_SS_CCBRACKET_in_bitarray2644_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_arrrange2668  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_arrrange2668_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_arrrange2668	= { FOLLOW_expr_g_in_arrrange2668_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_D_DOT_in_arrrange2672  */
static	ANTLR3_BITWORD FOLLOW_SS_D_DOT_in_arrrange2672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_D_DOT_in_arrrange2672	= { FOLLOW_SS_D_DOT_in_arrrange2672_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_arrrange2676  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_arrrange2676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_arrrange2676	= { FOLLOW_expr_g_in_arrrange2676_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_synpred2_yatg424  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_synpred2_yatg424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_synpred2_yatg424	= { FOLLOW_assignment_expression_in_synpred2_yatg424_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_COMMA_in_synpred16_yatg573  */
static	ANTLR3_BITWORD FOLLOW_SS_COMMA_in_synpred16_yatg573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_COMMA_in_synpred16_yatg573	= { FOLLOW_SS_COMMA_in_synpred16_yatg573_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_decl_in_synpred16_yatg575  */
static	ANTLR3_BITWORD FOLLOW_decl_in_synpred16_yatg575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_decl_in_synpred16_yatg575	= { FOLLOW_decl_in_synpred16_yatg575_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_EQUAL_in_synpred18_yatg626  */
static	ANTLR3_BITWORD FOLLOW_SS_EQUAL_in_synpred18_yatg626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_EQUAL_in_synpred18_yatg626	= { FOLLOW_SS_EQUAL_in_synpred18_yatg626_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_synpred18_yatg628  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_synpred18_yatg628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_synpred18_yatg628	= { FOLLOW_expr_g_in_synpred18_yatg628_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_ELSE_in_synpred20_yatg685  */
static	ANTLR3_BITWORD FOLLOW_KW_ELSE_in_synpred20_yatg685_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_ELSE_in_synpred20_yatg685	= { FOLLOW_KW_ELSE_in_synpred20_yatg685_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_synpred20_yatg689  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_synpred20_yatg689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_synpred20_yatg689	= { FOLLOW_expr_g_in_synpred20_yatg689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_WITH_in_synpred26_yatg986  */
static	ANTLR3_BITWORD FOLLOW_KW_WITH_in_synpred26_yatg986_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_WITH_in_synpred26_yatg986	= { FOLLOW_KW_WITH_in_synpred26_yatg986_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred53_yatg1717  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred53_yatg1717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred53_yatg1717	= { FOLLOW_set_in_synpred53_yatg1717_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicative_expression_in_synpred53_yatg1724  */
static	ANTLR3_BITWORD FOLLOW_multiplicative_expression_in_synpred53_yatg1724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicative_expression_in_synpred53_yatg1724	= { FOLLOW_multiplicative_expression_in_synpred53_yatg1724_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred56_yatg1743  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred56_yatg1743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred56_yatg1743	= { FOLLOW_set_in_synpred56_yatg1743_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_synpred56_yatg1752  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_synpred56_yatg1752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_synpred56_yatg1752	= { FOLLOW_unary_expression_in_synpred56_yatg1752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_op_in_synpred60_yatg1863  */
static	ANTLR3_BITWORD FOLLOW_operand_op_in_synpred60_yatg1863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_op_in_synpred60_yatg1863	= { FOLLOW_operand_op_in_synpred60_yatg1863_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_in_synpred69_yatg2036  */
static	ANTLR3_BITWORD FOLLOW_array_in_synpred69_yatg2036_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_array_in_synpred69_yatg2036	= { FOLLOW_array_in_synpred69_yatg2036_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_box2_in_synpred71_yatg2054  */
static	ANTLR3_BITWORD FOLLOW_box2_in_synpred71_yatg2054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_box2_in_synpred71_yatg2054	= { FOLLOW_box2_in_synpred71_yatg2054_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_point3_in_synpred72_yatg2062  */
static	ANTLR3_BITWORD FOLLOW_point3_in_synpred72_yatg2062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_point3_in_synpred72_yatg2062	= { FOLLOW_point3_in_synpred72_yatg2062_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_point2_in_synpred73_yatg2070  */
static	ANTLR3_BITWORD FOLLOW_point2_in_synpred73_yatg2070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_point2_in_synpred73_yatg2070	= { FOLLOW_point2_in_synpred73_yatg2070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_lvalue_in_synpred82_yatg2179  */
static	ANTLR3_BITWORD FOLLOW_lvalue_in_synpred82_yatg2179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000020000), ANTLR3_UINT64_LIT(0x000000000001F000) };
static  ANTLR3_BITSET_LIST FOLLOW_lvalue_in_synpred82_yatg2179	= { FOLLOW_lvalue_in_synpred82_yatg2179_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_operator_in_synpred82_yatg2181  */
static	ANTLR3_BITWORD FOLLOW_assignment_operator_in_synpred82_yatg2181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x84927EC5E1D5C000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_operator_in_synpred82_yatg2181	= { FOLLOW_assignment_operator_in_synpred82_yatg2181_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_synpred82_yatg2183  */
static	ANTLR3_BITWORD FOLLOW_expr_in_synpred82_yatg2183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_synpred82_yatg2183	= { FOLLOW_expr_in_synpred82_yatg2183_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_D_BAR_in_synpred88_yatg2272  */
static	ANTLR3_BITWORD FOLLOW_SS_D_BAR_in_synpred88_yatg2272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_D_BAR_in_synpred88_yatg2272	= { FOLLOW_SS_D_BAR_in_synpred88_yatg2272_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_and_expression_in_synpred88_yatg2275  */
static	ANTLR3_BITWORD FOLLOW_logical_and_expression_in_synpred88_yatg2275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_and_expression_in_synpred88_yatg2275	= { FOLLOW_logical_and_expression_in_synpred88_yatg2275_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_D_AMP_in_synpred89_yatg2291  */
static	ANTLR3_BITWORD FOLLOW_SS_D_AMP_in_synpred89_yatg2291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_D_AMP_in_synpred89_yatg2291	= { FOLLOW_SS_D_AMP_in_synpred89_yatg2291_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equality_expression_in_synpred89_yatg2294  */
static	ANTLR3_BITWORD FOLLOW_equality_expression_in_synpred89_yatg2294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equality_expression_in_synpred89_yatg2294	= { FOLLOW_equality_expression_in_synpred89_yatg2294_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred91_yatg2310  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred91_yatg2310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred91_yatg2310	= { FOLLOW_set_in_synpred91_yatg2310_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relational_expression_in_synpred91_yatg2317  */
static	ANTLR3_BITWORD FOLLOW_relational_expression_in_synpred91_yatg2317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relational_expression_in_synpred91_yatg2317	= { FOLLOW_relational_expression_in_synpred91_yatg2317_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred95_yatg2333  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred95_yatg2333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8400000400010000), ANTLR3_UINT64_LIT(0x0000000000000FFE) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred95_yatg2333	= { FOLLOW_set_in_synpred95_yatg2333_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_math_expression_in_synpred95_yatg2344  */
static	ANTLR3_BITWORD FOLLOW_math_expression_in_synpred95_yatg2344_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_math_expression_in_synpred95_yatg2344	= { FOLLOW_math_expression_in_synpred95_yatg2344_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_synpred97_yatg2390  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_synpred97_yatg2390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_synpred97_yatg2390	= { FOLLOW_expr_seq_in_synpred97_yatg2390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_HASH_in_synpred100_yatg2610  */
static	ANTLR3_BITWORD FOLLOW_SS_HASH_in_synpred100_yatg2610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_HASH_in_synpred100_yatg2610	= { FOLLOW_SS_HASH_in_synpred100_yatg2610_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_OCBRACKET_in_synpred100_yatg2612  */
static	ANTLR3_BITWORD FOLLOW_SS_OCBRACKET_in_synpred100_yatg2612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_OCBRACKET_in_synpred100_yatg2612	= { FOLLOW_SS_OCBRACKET_in_synpred100_yatg2612_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_CCBRACKET_in_synpred100_yatg2614  */
static	ANTLR3_BITWORD FOLLOW_SS_CCBRACKET_in_synpred100_yatg2614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_CCBRACKET_in_synpred100_yatg2614	= { FOLLOW_SS_CCBRACKET_in_synpred100_yatg2614_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:111:1: program : ( expr )+ ;
 */
static yatgParser_program_return
program(pyatgParser ctx)
{   
    yatgParser_program_return retval;
    ANTLR3_UINT32 program_StartIndex;
    pANTLR3_BASE_TREE root_0;

    yatgParser_expr_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 yatgParser_expr_return


    /* Initialize rule variables
     */
    program_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(1)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    expr1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:112:2: ( ( expr )+ )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:112:4: ( expr )+
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:112:4: ( expr )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( LA(1) ) 
            	{
            	case KW_LOCAL:
            	case KW_GLOBAL:
            	case IDENTIFIER:
            	case KW_IF:
            	case KW_DO:
            	case KW_WHILE:
            	case KW_FOR:
            	case KW_IN:
            	case KW_EXIT:
            	case KW_WITH:
            	case KW_CONTINUE:
            	case KW_CASE:
            	case SS_OPAREN:
            	case KW_STRUCT:
            	case KW_TRY:
            	case KW_MAPPED:
            	case KW_FUNCTION:
            	case KW_FN:
            	case KW_RETURN:
            	case KW_ANIMATE:
            	case KW_AT:
            	case KW_COORDSYS:
            	case KW_ABOUT:
            	case KW_UNDO:
            	case SS_MINUS:
            	case SS_OBRACKET:
            	case DIGIT:
            	case HEX_LITERAL:
            	case STRING_LITERIAL:
            	case SS_HASH:
            	case KW_TRUE:
            	case KW_FALSE:
            	case KW_ON:
            	case KW_OFF:
            	case KW_OK:
            	case KW_UNDEFINED:
            	case KW_UNSUPPLIED:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1) 
            	{
            	    case 1:
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:112:6: expr
            	        {
            	            FOLLOWPUSH(FOLLOW_expr_in_program409);
            	            expr1=expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleprogramEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr1.tree);

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE;
            		    return retval;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleprogramEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(1, program_StartIndex); }

    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start expr
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:115:1: expr : ( assignment_expression | variable_decls | if_expr | while_loop | do_loop | for_loop | loop_exit | loop_continue | case_expr | struct_def | try_expr | function_def | function_return | context_expr | expr_seq );
 */
static yatgParser_expr_return
expr(pyatgParser ctx)
{   
    yatgParser_expr_return retval;
    ANTLR3_UINT32 expr_StartIndex;
    pANTLR3_BASE_TREE root_0;

    yatgParser_assignment_expression_return assignment_expression2;
    #undef	RETURN_TYPE_assignment_expression2
    #define	RETURN_TYPE_assignment_expression2 yatgParser_assignment_expression_return

    yatgParser_variable_decls_return variable_decls3;
    #undef	RETURN_TYPE_variable_decls3
    #define	RETURN_TYPE_variable_decls3 yatgParser_variable_decls_return

    yatgParser_if_expr_return if_expr4;
    #undef	RETURN_TYPE_if_expr4
    #define	RETURN_TYPE_if_expr4 yatgParser_if_expr_return

    yatgParser_while_loop_return while_loop5;
    #undef	RETURN_TYPE_while_loop5
    #define	RETURN_TYPE_while_loop5 yatgParser_while_loop_return

    yatgParser_do_loop_return do_loop6;
    #undef	RETURN_TYPE_do_loop6
    #define	RETURN_TYPE_do_loop6 yatgParser_do_loop_return

    yatgParser_for_loop_return for_loop7;
    #undef	RETURN_TYPE_for_loop7
    #define	RETURN_TYPE_for_loop7 yatgParser_for_loop_return

    yatgParser_loop_exit_return loop_exit8;
    #undef	RETURN_TYPE_loop_exit8
    #define	RETURN_TYPE_loop_exit8 yatgParser_loop_exit_return

    yatgParser_loop_continue_return loop_continue9;
    #undef	RETURN_TYPE_loop_continue9
    #define	RETURN_TYPE_loop_continue9 yatgParser_loop_continue_return

    yatgParser_case_expr_return case_expr10;
    #undef	RETURN_TYPE_case_expr10
    #define	RETURN_TYPE_case_expr10 yatgParser_case_expr_return

    yatgParser_struct_def_return struct_def11;
    #undef	RETURN_TYPE_struct_def11
    #define	RETURN_TYPE_struct_def11 yatgParser_struct_def_return

    yatgParser_try_expr_return try_expr12;
    #undef	RETURN_TYPE_try_expr12
    #define	RETURN_TYPE_try_expr12 yatgParser_try_expr_return

    yatgParser_function_def_return function_def13;
    #undef	RETURN_TYPE_function_def13
    #define	RETURN_TYPE_function_def13 yatgParser_function_def_return

    yatgParser_function_return_return function_return14;
    #undef	RETURN_TYPE_function_return14
    #define	RETURN_TYPE_function_return14 yatgParser_function_return_return

    yatgParser_context_expr_return context_expr15;
    #undef	RETURN_TYPE_context_expr15
    #define	RETURN_TYPE_context_expr15 yatgParser_context_expr_return

    yatgParser_expr_seq_return expr_seq16;
    #undef	RETURN_TYPE_expr_seq16
    #define	RETURN_TYPE_expr_seq16 yatgParser_expr_seq_return


    /* Initialize rule variables
     */
    expr_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(2)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    assignment_expression2.tree = NULL;

    variable_decls3.tree = NULL;

    if_expr4.tree = NULL;

    while_loop5.tree = NULL;

    do_loop6.tree = NULL;

    for_loop7.tree = NULL;

    loop_exit8.tree = NULL;

    loop_continue9.tree = NULL;

    case_expr10.tree = NULL;

    struct_def11.tree = NULL;

    try_expr12.tree = NULL;

    function_def13.tree = NULL;

    function_return14.tree = NULL;

    context_expr15.tree = NULL;

    expr_seq16.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:116:2: ( assignment_expression | variable_decls | if_expr | while_loop | do_loop | for_loop | loop_exit | loop_continue | case_expr | struct_def | try_expr | function_def | function_return | context_expr | expr_seq )
            
            ANTLR3_UINT32 alt2;

            alt2=15;

            switch ( LA(1) ) 
            {
            case IDENTIFIER:
            case SS_MINUS:
            case SS_OBRACKET:
            case DIGIT:
            case HEX_LITERAL:
            case STRING_LITERIAL:
            case SS_HASH:
            case KW_TRUE:
            case KW_FALSE:
            case KW_ON:
            case KW_OFF:
            case KW_OK:
            case KW_UNDEFINED:
            case KW_UNSUPPLIED:
            	{
            		alt2=1;
            	}
                break;
            case SS_OPAREN:
            	{
            		switch ( LA(2) ) 
            		{
            		case IDENTIFIER:
            			{

            				{
            				    int LA2_36 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 36;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case DIGIT:
            			{

            				{
            				    int LA2_37 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 37;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case HEX_LITERAL:
            			{

            				{
            				    int LA2_38 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 38;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case STRING_LITERIAL:
            			{

            				{
            				    int LA2_39 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 39;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case SS_HASH:
            			{

            				{
            				    int LA2_40 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 40;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case SS_OBRACKET:
            			{

            				{
            				    int LA2_41 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 41;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_TRUE:
            			{

            				{
            				    int LA2_42 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 42;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FALSE:
            			{

            				{
            				    int LA2_43 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 43;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ON:
            			{

            				{
            				    int LA2_44 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 44;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_OFF:
            			{

            				{
            				    int LA2_45 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 45;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_OK:
            			{

            				{
            				    int LA2_46 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 46;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNDEFINED:
            			{

            				{
            				    int LA2_47 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 47;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNSUPPLIED:
            			{

            				{
            				    int LA2_48 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 48;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case SS_MINUS:
            			{

            				{
            				    int LA2_49 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 49;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case SS_OPAREN:
            			{

            				{
            				    int LA2_50 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 50;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_LOCAL:
            		case KW_GLOBAL:
            			{

            				{
            				    int LA2_51 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 51;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_IF:
            			{

            				{
            				    int LA2_52 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 52;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_WHILE:
            			{

            				{
            				    int LA2_53 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 53;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_DO:
            			{

            				{
            				    int LA2_54 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 54;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FOR:
            			{

            				{
            				    int LA2_55 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 55;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_EXIT:
            			{

            				{
            				    int LA2_56 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 56;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_CONTINUE:
            			{

            				{
            				    int LA2_57 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 57;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_CASE:
            			{

            				{
            				    int LA2_58 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 58;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_STRUCT:
            			{

            				{
            				    int LA2_59 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 59;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_TRY:
            			{

            				{
            				    int LA2_60 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 60;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_MAPPED:
            			{

            				{
            				    int LA2_61 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 61;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FUNCTION:
            		case KW_FN:
            			{

            				{
            				    int LA2_62 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 62;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_RETURN:
            			{

            				{
            				    int LA2_63 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 63;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_WITH:
            			{

            				{
            				    int LA2_64 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 64;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ANIMATE:
            			{

            				{
            				    int LA2_65 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 65;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_AT:
            			{

            				{
            				    int LA2_66 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 66;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_IN:
            			{

            				{
            				    int LA2_67 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 67;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_COORDSYS:
            			{

            				{
            				    int LA2_68 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 68;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ABOUT:
            			{

            				{
            				    int LA2_69 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 69;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNDO:
            			{

            				{
            				    int LA2_70 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 70;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;
            		case SS_CPAREN:
            			{

            				{
            				    int LA2_71 = LA(3);
            				    if ( (synpred2_yatg(ctx)) ) 
            				    {
            				        alt2=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt2=15;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 2;
            				        EXCEPTION->state        = 71;


            				        goto ruleexprEx;
            				    }
            				}
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 2;
            		    EXCEPTION->state        = 15;


            		    goto ruleexprEx;
            		}

            	}
                break;
            case KW_LOCAL:
            case KW_GLOBAL:
            	{
            		alt2=2;
            	}
                break;
            case KW_IF:
            	{
            		alt2=3;
            	}
                break;
            case KW_WHILE:
            	{
            		alt2=4;
            	}
                break;
            case KW_DO:
            	{
            		alt2=5;
            	}
                break;
            case KW_FOR:
            	{
            		alt2=6;
            	}
                break;
            case KW_EXIT:
            	{
            		alt2=7;
            	}
                break;
            case KW_CONTINUE:
            	{
            		alt2=8;
            	}
                break;
            case KW_CASE:
            	{
            		alt2=9;
            	}
                break;
            case KW_STRUCT:
            	{
            		alt2=10;
            	}
                break;
            case KW_TRY:
            	{
            		alt2=11;
            	}
                break;
            case KW_MAPPED:
            case KW_FUNCTION:
            case KW_FN:
            	{
            		alt2=12;
            	}
                break;
            case KW_RETURN:
            	{
            		alt2=13;
            	}
                break;
            case KW_IN:
            case KW_WITH:
            case KW_ANIMATE:
            case KW_AT:
            case KW_COORDSYS:
            case KW_ABOUT:
            case KW_UNDO:
            	{
            		alt2=14;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto ruleexprEx;
            }

            switch (alt2) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:116:4: assignment_expression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_assignment_expression_in_expr424);
        	        assignment_expression2=assignment_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, assignment_expression2.tree);

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:117:4: variable_decls
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variable_decls_in_expr429);
        	        variable_decls3=variable_decls(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variable_decls3.tree);

        	    }
        	    break;
        	case 3:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:118:8: if_expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_if_expr_in_expr438);
        	        if_expr4=if_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, if_expr4.tree);

        	    }
        	    break;
        	case 4:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:119:8: while_loop
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_while_loop_in_expr447);
        	        while_loop5=while_loop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, while_loop5.tree);

        	    }
        	    break;
        	case 5:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:120:8: do_loop
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_do_loop_in_expr456);
        	        do_loop6=do_loop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, do_loop6.tree);

        	    }
        	    break;
        	case 6:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:121:8: for_loop
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_for_loop_in_expr465);
        	        for_loop7=for_loop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, for_loop7.tree);

        	    }
        	    break;
        	case 7:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:122:8: loop_exit
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_loop_exit_in_expr474);
        	        loop_exit8=loop_exit(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, loop_exit8.tree);

        	    }
        	    break;
        	case 8:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:123:8: loop_continue
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_loop_continue_in_expr483);
        	        loop_continue9=loop_continue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, loop_continue9.tree);

        	    }
        	    break;
        	case 9:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:124:8: case_expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_case_expr_in_expr492);
        	        case_expr10=case_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, case_expr10.tree);

        	    }
        	    break;
        	case 10:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:125:8: struct_def
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_struct_def_in_expr501);
        	        struct_def11=struct_def(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, struct_def11.tree);

        	    }
        	    break;
        	case 11:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:126:8: try_expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_try_expr_in_expr510);
        	        try_expr12=try_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, try_expr12.tree);

        	    }
        	    break;
        	case 12:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:127:8: function_def
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_function_def_in_expr519);
        	        function_def13=function_def(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, function_def13.tree);

        	    }
        	    break;
        	case 13:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:128:8: function_return
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_function_return_in_expr528);
        	        function_return14=function_return(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, function_return14.tree);

        	    }
        	    break;
        	case 14:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:129:8: context_expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_context_expr_in_expr537);
        	        context_expr15=context_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, context_expr15.tree);

        	    }
        	    break;
        	case 15:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:130:8: expr_seq
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expr_seq_in_expr546);
        	        expr_seq16=expr_seq(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr_seq16.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(2, expr_StartIndex); }

    return retval;
}
/* $ANTLR end expr */

/** 
 * $ANTLR start variable_decls
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:133:1: variable_decls : type_decl decl ( SS_COMMA decl )* -> ^( VDECL type_decl ( decl )+ ) ;
 */
static yatgParser_variable_decls_return
variable_decls(pyatgParser ctx)
{   
    yatgParser_variable_decls_return retval;
    ANTLR3_UINT32 variable_decls_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_COMMA19;
    yatgParser_type_decl_return type_decl17;
    #undef	RETURN_TYPE_type_decl17
    #define	RETURN_TYPE_type_decl17 yatgParser_type_decl_return

    yatgParser_decl_return decl18;
    #undef	RETURN_TYPE_decl18
    #define	RETURN_TYPE_decl18 yatgParser_decl_return

    yatgParser_decl_return decl20;
    #undef	RETURN_TYPE_decl20
    #define	RETURN_TYPE_decl20 yatgParser_decl_return

    pANTLR3_BASE_TREE SS_COMMA19_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_COMMA;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_type_decl;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_decl;
    /* Initialize rule variables
     */
    variable_decls_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(3)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_COMMA19       = NULL;
    type_decl17.tree = NULL;

    decl18.tree = NULL;

    decl20.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_COMMA19_tree   = NULL;

    stream_SS_COMMA   = NULL;
    #define CREATE_stream_SS_COMMA  if (stream_SS_COMMA == NULL) {stream_SS_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_COMMA"); } 
    stream_type_decl   = NULL;
    #define CREATE_stream_type_decl  if (stream_type_decl == NULL) {stream_type_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule type_decl"); }
    stream_decl   = NULL;
    #define CREATE_stream_decl  if (stream_decl == NULL) {stream_decl = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule decl"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:134:2: ( type_decl decl ( SS_COMMA decl )* -> ^( VDECL type_decl ( decl )+ ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:134:4: type_decl decl ( SS_COMMA decl )*
        {
            FOLLOWPUSH(FOLLOW_type_decl_in_variable_decls567);
            type_decl17=type_decl(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariable_declsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_type_decl; stream_type_decl->add(stream_type_decl, type_decl17.tree, NULL); }
            FOLLOWPUSH(FOLLOW_decl_in_variable_decls570);
            decl18=decl(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariable_declsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_decl; stream_decl->add(stream_decl, decl18.tree, NULL); }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:134:20: ( SS_COMMA decl )*

            for (;;)
            {
                int alt3=2;
                switch ( LA(1) ) 
                {
                case SS_COMMA:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA3_38 = LA(2);
                		    if ( (synpred16_yatg(ctx)) ) 
                		    {
                		        alt3=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt3) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:134:21: SS_COMMA decl
            	    {
            	        SS_COMMA19 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_variable_decls573); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariable_declsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA19, NULL); }

            	        FOLLOWPUSH(FOLLOW_decl_in_variable_decls575);
            	        decl20=decl(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariable_declsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_decl; stream_decl->add(stream_decl, decl20.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : type_decl, decl
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 136:2: -> ^( VDECL type_decl ( decl )+ )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:136:6: ^( VDECL type_decl ( decl )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VDECL, (pANTLR3_UINT8)"VDECL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type_decl == NULL ? NULL : stream_type_decl->nextTree(stream_type_decl));
            	        if ((stream_decl == NULL || !stream_decl->hasNext(stream_decl))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_decl->hasNext(stream_decl))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_decl == NULL ? NULL : stream_decl->nextTree(stream_decl));

            	        	}
            	        	stream_decl->reset(stream_decl);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariable_declsEx; /* Prevent compiler warnings */
    rulevariable_declsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_COMMA != NULL) stream_SS_COMMA->free(stream_SS_COMMA);
        if (stream_type_decl != NULL) stream_type_decl->free(stream_type_decl);
        if (stream_decl != NULL) stream_decl->free(stream_decl);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(3, variable_decls_StartIndex); }

    return retval;
}
/* $ANTLR end variable_decls */

/** 
 * $ANTLR start type_decl
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:139:1: type_decl : ( KW_LOCAL | KW_GLOBAL );
 */
static yatgParser_type_decl_return
type_decl(pyatgParser ctx)
{   
    yatgParser_type_decl_return retval;
    ANTLR3_UINT32 type_decl_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set21;

    pANTLR3_BASE_TREE set21_tree;

    /* Initialize rule variables
     */
    type_decl_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(4)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    set21       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set21_tree   = NULL;


    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:140:2: ( KW_LOCAL | KW_GLOBAL )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set21=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= KW_LOCAL) && (LA(1) <= KW_GLOBAL)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set21)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_type_decl0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_type_decl0);    goto ruletype_declEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletype_declEx; /* Prevent compiler warnings */
    ruletype_declEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(4, type_decl_StartIndex); }

    return retval;
}
/* $ANTLR end type_decl */

/** 
 * $ANTLR start decl
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:142:1: decl : IDENTIFIER ( SS_EQUAL expr_g )? -> ^( VDEF IDENTIFIER ( ^( VVAL expr_g ) )? ) ;
 */
static yatgParser_decl_return
decl(pyatgParser ctx)
{   
    yatgParser_decl_return retval;
    ANTLR3_UINT32 decl_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENTIFIER22;
    pANTLR3_COMMON_TOKEN    SS_EQUAL23;
    yatgParser_expr_g_return expr_g24;
    #undef	RETURN_TYPE_expr_g24
    #define	RETURN_TYPE_expr_g24 yatgParser_expr_g_return

    pANTLR3_BASE_TREE IDENTIFIER22_tree;
    pANTLR3_BASE_TREE SS_EQUAL23_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_EQUAL;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    decl_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(5)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    IDENTIFIER22       = NULL;
    SS_EQUAL23       = NULL;
    expr_g24.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENTIFIER22_tree   = NULL;
    SS_EQUAL23_tree   = NULL;

    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_SS_EQUAL   = NULL;
    #define CREATE_stream_SS_EQUAL  if (stream_SS_EQUAL == NULL) {stream_SS_EQUAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_EQUAL"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:143:2: ( IDENTIFIER ( SS_EQUAL expr_g )? -> ^( VDEF IDENTIFIER ( ^( VVAL expr_g ) )? ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:143:4: IDENTIFIER ( SS_EQUAL expr_g )?
        {
            IDENTIFIER22 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_decl622); 
            if  (HASEXCEPTION())
            {
                goto ruledeclEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER22, NULL); }


            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:143:15: ( SS_EQUAL expr_g )?
            {
                int alt4=2;
                switch ( LA(1) ) 
                {
                    case SS_EQUAL:
                    	{
                    		switch ( LA(2) ) 
                    		{
                    		    case IDENTIFIER:
                    		    	{
                    		    		{
                    		    		    int LA4_60 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case DIGIT:
                    		    	{
                    		    		{
                    		    		    int LA4_61 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case HEX_LITERAL:
                    		    	{
                    		    		{
                    		    		    int LA4_62 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case STRING_LITERIAL:
                    		    	{
                    		    		{
                    		    		    int LA4_63 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case SS_HASH:
                    		    	{
                    		    		{
                    		    		    int LA4_64 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case SS_OBRACKET:
                    		    	{
                    		    		{
                    		    		    int LA4_65 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_TRUE:
                    		    	{
                    		    		{
                    		    		    int LA4_66 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_FALSE:
                    		    	{
                    		    		{
                    		    		    int LA4_67 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_ON:
                    		    	{
                    		    		{
                    		    		    int LA4_68 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_OFF:
                    		    	{
                    		    		{
                    		    		    int LA4_69 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_OK:
                    		    	{
                    		    		{
                    		    		    int LA4_70 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_UNDEFINED:
                    		    	{
                    		    		{
                    		    		    int LA4_71 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_UNSUPPLIED:
                    		    	{
                    		    		{
                    		    		    int LA4_72 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case SS_MINUS:
                    		    	{
                    		    		{
                    		    		    int LA4_73 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case SS_OPAREN:
                    		    	{
                    		    		{
                    		    		    int LA4_74 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_LOCAL:
                    		    case KW_GLOBAL:
                    		    	{
                    		    		{
                    		    		    int LA4_75 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_IF:
                    		    	{
                    		    		{
                    		    		    int LA4_76 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_WHILE:
                    		    	{
                    		    		{
                    		    		    int LA4_77 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_DO:
                    		    	{
                    		    		{
                    		    		    int LA4_78 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_FOR:
                    		    	{
                    		    		{
                    		    		    int LA4_79 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_EXIT:
                    		    	{
                    		    		{
                    		    		    int LA4_80 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_CONTINUE:
                    		    	{
                    		    		{
                    		    		    int LA4_81 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_CASE:
                    		    	{
                    		    		{
                    		    		    int LA4_82 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_STRUCT:
                    		    	{
                    		    		{
                    		    		    int LA4_83 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_TRY:
                    		    	{
                    		    		{
                    		    		    int LA4_84 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_MAPPED:
                    		    	{
                    		    		{
                    		    		    int LA4_85 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_FUNCTION:
                    		    case KW_FN:
                    		    	{
                    		    		{
                    		    		    int LA4_86 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_RETURN:
                    		    	{
                    		    		{
                    		    		    int LA4_87 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_WITH:
                    		    	{
                    		    		{
                    		    		    int LA4_88 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_ANIMATE:
                    		    	{
                    		    		{
                    		    		    int LA4_89 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_AT:
                    		    	{
                    		    		{
                    		    		    int LA4_90 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_IN:
                    		    	{
                    		    		{
                    		    		    int LA4_91 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_COORDSYS:
                    		    	{
                    		    		{
                    		    		    int LA4_92 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_ABOUT:
                    		    	{
                    		    		{
                    		    		    int LA4_93 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		    case KW_UNDO:
                    		    	{
                    		    		{
                    		    		    int LA4_94 = LA(3);
                    		    		    if ( (synpred18_yatg(ctx)) ) 
                    		    		    {
                    		    		        alt4=1;
                    		    		    }
                    		    		}
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt4) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:143:17: SS_EQUAL expr_g
            	    {
            	        SS_EQUAL23 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_EQUAL, &FOLLOW_SS_EQUAL_in_decl626); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledeclEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_EQUAL; stream_SS_EQUAL->add(stream_SS_EQUAL, SS_EQUAL23, NULL); }

            	        FOLLOWPUSH(FOLLOW_expr_g_in_decl628);
            	        expr_g24=expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledeclEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g24.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expr_g, IDENTIFIER
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 145:2: -> ^( VDEF IDENTIFIER ( ^( VVAL expr_g ) )? )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:145:5: ^( VDEF IDENTIFIER ( ^( VVAL expr_g ) )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VDEF, (pANTLR3_UINT8)"VDEF"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER));
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:145:24: ( ^( VVAL expr_g ) )?
            	        {
            	        	if ( (stream_expr_g != NULL && stream_expr_g->hasNext(stream_expr_g))  )
            	        	{
            	        		// C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:145:24: ^( VVAL expr_g )
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VVAL, (pANTLR3_UINT8)"VVAL"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_expr_g == NULL ? NULL : stream_expr_g->nextTree(stream_expr_g));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_expr_g != NULL) stream_expr_g->reset(stream_expr_g);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledeclEx; /* Prevent compiler warnings */
    ruledeclEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_SS_EQUAL != NULL) stream_SS_EQUAL->free(stream_SS_EQUAL);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(5, decl_StartIndex); }

    return retval;
}
/* $ANTLR end decl */

/** 
 * $ANTLR start if_expr
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:148:1: if_expr : KW_IF cond= expr_g ( KW_THEN | KW_DO ) then= expr_g ( KW_ELSE relse= expr_g )? -> ^( EIF ^( EIF_COND $cond) ^( EIF_THEN $then) ^( EIF_ELSE ( $relse)? ) EIF_END ) ;
 */
static yatgParser_if_expr_return
if_expr(pyatgParser ctx)
{   
    yatgParser_if_expr_return retval;
    ANTLR3_UINT32 if_expr_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_IF25;
    pANTLR3_COMMON_TOKEN    KW_THEN26;
    pANTLR3_COMMON_TOKEN    KW_DO27;
    pANTLR3_COMMON_TOKEN    KW_ELSE28;
    yatgParser_expr_g_return cond;
    #undef	RETURN_TYPE_cond
    #define	RETURN_TYPE_cond yatgParser_expr_g_return

    yatgParser_expr_g_return then;
    #undef	RETURN_TYPE_then
    #define	RETURN_TYPE_then yatgParser_expr_g_return

    yatgParser_expr_g_return relse;
    #undef	RETURN_TYPE_relse
    #define	RETURN_TYPE_relse yatgParser_expr_g_return

    pANTLR3_BASE_TREE KW_IF25_tree;
    pANTLR3_BASE_TREE KW_THEN26_tree;
    pANTLR3_BASE_TREE KW_DO27_tree;
    pANTLR3_BASE_TREE KW_ELSE28_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_THEN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_DO;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_IF;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_ELSE;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    if_expr_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(6)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_IF25       = NULL;
    KW_THEN26       = NULL;
    KW_DO27       = NULL;
    KW_ELSE28       = NULL;
    cond.tree = NULL;

    then.tree = NULL;

    relse.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_IF25_tree   = NULL;
    KW_THEN26_tree   = NULL;
    KW_DO27_tree   = NULL;
    KW_ELSE28_tree   = NULL;

    stream_KW_THEN   = NULL;
    #define CREATE_stream_KW_THEN  if (stream_KW_THEN == NULL) {stream_KW_THEN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_THEN"); } 
    stream_KW_DO   = NULL;
    #define CREATE_stream_KW_DO  if (stream_KW_DO == NULL) {stream_KW_DO = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_DO"); } 
    stream_KW_IF   = NULL;
    #define CREATE_stream_KW_IF  if (stream_KW_IF == NULL) {stream_KW_IF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_IF"); } 
    stream_KW_ELSE   = NULL;
    #define CREATE_stream_KW_ELSE  if (stream_KW_ELSE == NULL) {stream_KW_ELSE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_ELSE"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:149:2: ( KW_IF cond= expr_g ( KW_THEN | KW_DO ) then= expr_g ( KW_ELSE relse= expr_g )? -> ^( EIF ^( EIF_COND $cond) ^( EIF_THEN $then) ^( EIF_ELSE ( $relse)? ) EIF_END ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:149:3: KW_IF cond= expr_g ( KW_THEN | KW_DO ) then= expr_g ( KW_ELSE relse= expr_g )?
        {
            KW_IF25 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_IF, &FOLLOW_KW_IF_in_if_expr661); 
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_IF; stream_KW_IF->add(stream_KW_IF, KW_IF25, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_if_expr665);
            cond=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, cond.tree, NULL); }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:149:22: ( KW_THEN | KW_DO )
            {
                int alt5=2;
                switch ( LA(1) ) 
                {
                case KW_THEN:
                	{
                		alt5=1;
                	}
                    break;
                case KW_DO:
                	{
                		alt5=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return retval;
                    }
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 5;
                    EXCEPTION->state        = 0;


                    goto ruleif_exprEx;
                }

                switch (alt5) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:149:24: KW_THEN
            	    {
            	        KW_THEN26 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_THEN, &FOLLOW_KW_THEN_in_if_expr670); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleif_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_THEN; stream_KW_THEN->add(stream_KW_THEN, KW_THEN26, NULL); }


            	    }
            	    break;
            	case 2:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:149:34: KW_DO
            	    {
            	        KW_DO27 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_DO, &FOLLOW_KW_DO_in_if_expr674); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleif_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_DO; stream_KW_DO->add(stream_KW_DO, KW_DO27, NULL); }


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_if_expr681);
            then=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, then.tree, NULL); }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:149:56: ( KW_ELSE relse= expr_g )?
            {
                int alt6=2;
                switch ( LA(1) ) 
                {
                    case KW_ELSE:
                    	{
                    		{
                    		    int LA6_1 = LA(2);
                    		    if ( (synpred20_yatg(ctx)) ) 
                    		    {
                    		        alt6=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt6) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:149:57: KW_ELSE relse= expr_g
            	    {
            	        KW_ELSE28 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_ELSE, &FOLLOW_KW_ELSE_in_if_expr685); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleif_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_ELSE; stream_KW_ELSE->add(stream_KW_ELSE, KW_ELSE28, NULL); }

            	        FOLLOWPUSH(FOLLOW_expr_g_in_if_expr689);
            	        relse=expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleif_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, relse.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : relse, then, cond
             * token labels      : 
             * rule labels       : relse, retval, then, cond
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relse;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_then;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;

            	stream_relse=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token relse", relse.tree != NULL ? relse.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_then=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token then", then.tree != NULL ? then.tree : NULL);
            	stream_cond=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token cond", cond.tree != NULL ? cond.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 151:2: -> ^( EIF ^( EIF_COND $cond) ^( EIF_THEN $then) ^( EIF_ELSE ( $relse)? ) EIF_END )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:151:5: ^( EIF ^( EIF_COND $cond) ^( EIF_THEN $then) ^( EIF_ELSE ( $relse)? ) EIF_END )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EIF, (pANTLR3_UINT8)"EIF"), root_1));

            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:151:11: ^( EIF_COND $cond)
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EIF_COND, (pANTLR3_UINT8)"EIF_COND"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_cond == NULL ? NULL : stream_cond->nextTree(stream_cond));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:151:29: ^( EIF_THEN $then)
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EIF_THEN, (pANTLR3_UINT8)"EIF_THEN"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_then == NULL ? NULL : stream_then->nextTree(stream_then));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:151:47: ^( EIF_ELSE ( $relse)? )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EIF_ELSE, (pANTLR3_UINT8)"EIF_ELSE"), root_2));

            	            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:151:58: ( $relse)?
            	            {
            	            	if ( (stream_relse != NULL && stream_relse->hasNext(stream_relse))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_relse == NULL ? NULL : stream_relse->nextTree(stream_relse));

            	            	}
            	            	if ( stream_relse != NULL) stream_relse->reset(stream_relse);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EIF_END, (pANTLR3_UINT8)"EIF_END"));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_relse != NULL) stream_relse->free(stream_relse);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_then != NULL) stream_then->free(stream_then);
            	if (stream_cond != NULL) stream_cond->free(stream_cond);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleif_exprEx; /* Prevent compiler warnings */
    ruleif_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_THEN != NULL) stream_KW_THEN->free(stream_KW_THEN);
        if (stream_KW_DO != NULL) stream_KW_DO->free(stream_KW_DO);
        if (stream_KW_IF != NULL) stream_KW_IF->free(stream_KW_IF);
        if (stream_KW_ELSE != NULL) stream_KW_ELSE->free(stream_KW_ELSE);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(6, if_expr_StartIndex); }

    return retval;
}
/* $ANTLR end if_expr */

/** 
 * $ANTLR start while_loop
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:155:1: while_loop : KW_WHILE cond= expr_g KW_DO exp= expr_g -> ^( EWHILE ^( EWHILE_CON $cond) ^( EWHILE_EXP $exp) EWHILE_END ) ;
 */
static yatgParser_while_loop_return
while_loop(pyatgParser ctx)
{   
    yatgParser_while_loop_return retval;
    ANTLR3_UINT32 while_loop_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_WHILE29;
    pANTLR3_COMMON_TOKEN    KW_DO30;
    yatgParser_expr_g_return cond;
    #undef	RETURN_TYPE_cond
    #define	RETURN_TYPE_cond yatgParser_expr_g_return

    yatgParser_expr_g_return exp;
    #undef	RETURN_TYPE_exp
    #define	RETURN_TYPE_exp yatgParser_expr_g_return

    pANTLR3_BASE_TREE KW_WHILE29_tree;
    pANTLR3_BASE_TREE KW_DO30_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_DO;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_WHILE;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    while_loop_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(7)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_WHILE29       = NULL;
    KW_DO30       = NULL;
    cond.tree = NULL;

    exp.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_WHILE29_tree   = NULL;
    KW_DO30_tree   = NULL;

    stream_KW_DO   = NULL;
    #define CREATE_stream_KW_DO  if (stream_KW_DO == NULL) {stream_KW_DO = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_DO"); } 
    stream_KW_WHILE   = NULL;
    #define CREATE_stream_KW_WHILE  if (stream_KW_WHILE == NULL) {stream_KW_WHILE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_WHILE"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:156:2: ( KW_WHILE cond= expr_g KW_DO exp= expr_g -> ^( EWHILE ^( EWHILE_CON $cond) ^( EWHILE_EXP $exp) EWHILE_END ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:156:4: KW_WHILE cond= expr_g KW_DO exp= expr_g
        {
            KW_WHILE29 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_WHILE, &FOLLOW_KW_WHILE_in_while_loop741); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_WHILE; stream_KW_WHILE->add(stream_KW_WHILE, KW_WHILE29, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_while_loop745);
            cond=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, cond.tree, NULL); }
            KW_DO30 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_DO, &FOLLOW_KW_DO_in_while_loop747); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_DO; stream_KW_DO->add(stream_KW_DO, KW_DO30, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_while_loop751);
            exp=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, exp.tree, NULL); }

             
            /* AST REWRITE
             * elements          : exp, cond
             * token labels      : 
             * rule labels       : exp, retval, cond
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exp;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;

            	stream_exp=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token exp", exp.tree != NULL ? exp.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_cond=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token cond", cond.tree != NULL ? cond.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 157:2: -> ^( EWHILE ^( EWHILE_CON $cond) ^( EWHILE_EXP $exp) EWHILE_END )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:157:5: ^( EWHILE ^( EWHILE_CON $cond) ^( EWHILE_EXP $exp) EWHILE_END )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EWHILE, (pANTLR3_UINT8)"EWHILE"), root_1));

            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:157:15: ^( EWHILE_CON $cond)
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EWHILE_CON, (pANTLR3_UINT8)"EWHILE_CON"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_cond == NULL ? NULL : stream_cond->nextTree(stream_cond));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:157:35: ^( EWHILE_EXP $exp)
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EWHILE_EXP, (pANTLR3_UINT8)"EWHILE_EXP"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_exp == NULL ? NULL : stream_exp->nextTree(stream_exp));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EWHILE_END, (pANTLR3_UINT8)"EWHILE_END"));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_exp != NULL) stream_exp->free(stream_exp);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_cond != NULL) stream_cond->free(stream_cond);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhile_loopEx; /* Prevent compiler warnings */
    rulewhile_loopEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_DO != NULL) stream_KW_DO->free(stream_KW_DO);
        if (stream_KW_WHILE != NULL) stream_KW_WHILE->free(stream_KW_WHILE);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(7, while_loop_StartIndex); }

    return retval;
}
/* $ANTLR end while_loop */

/** 
 * $ANTLR start do_loop
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:160:1: do_loop : KW_DO exp= expr_g KW_WHILE cond= expr_g -> ^( EDO ^( EDO_CON $cond) ^( EDO_EXP $exp) EDO_END ) ;
 */
static yatgParser_do_loop_return
do_loop(pyatgParser ctx)
{   
    yatgParser_do_loop_return retval;
    ANTLR3_UINT32 do_loop_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_DO31;
    pANTLR3_COMMON_TOKEN    KW_WHILE32;
    yatgParser_expr_g_return exp;
    #undef	RETURN_TYPE_exp
    #define	RETURN_TYPE_exp yatgParser_expr_g_return

    yatgParser_expr_g_return cond;
    #undef	RETURN_TYPE_cond
    #define	RETURN_TYPE_cond yatgParser_expr_g_return

    pANTLR3_BASE_TREE KW_DO31_tree;
    pANTLR3_BASE_TREE KW_WHILE32_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_DO;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_WHILE;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    do_loop_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(8)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_DO31       = NULL;
    KW_WHILE32       = NULL;
    exp.tree = NULL;

    cond.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_DO31_tree   = NULL;
    KW_WHILE32_tree   = NULL;

    stream_KW_DO   = NULL;
    #define CREATE_stream_KW_DO  if (stream_KW_DO == NULL) {stream_KW_DO = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_DO"); } 
    stream_KW_WHILE   = NULL;
    #define CREATE_stream_KW_WHILE  if (stream_KW_WHILE == NULL) {stream_KW_WHILE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_WHILE"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:161:2: ( KW_DO exp= expr_g KW_WHILE cond= expr_g -> ^( EDO ^( EDO_CON $cond) ^( EDO_EXP $exp) EDO_END ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:161:4: KW_DO exp= expr_g KW_WHILE cond= expr_g
        {
            KW_DO31 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_DO, &FOLLOW_KW_DO_in_do_loop788); 
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_DO; stream_KW_DO->add(stream_KW_DO, KW_DO31, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_do_loop792);
            exp=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, exp.tree, NULL); }
            KW_WHILE32 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_WHILE, &FOLLOW_KW_WHILE_in_do_loop794); 
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_WHILE; stream_KW_WHILE->add(stream_KW_WHILE, KW_WHILE32, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_do_loop798);
            cond=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, cond.tree, NULL); }

             
            /* AST REWRITE
             * elements          : exp, cond
             * token labels      : 
             * rule labels       : exp, retval, cond
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exp;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;

            	stream_exp=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token exp", exp.tree != NULL ? exp.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_cond=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token cond", cond.tree != NULL ? cond.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 162:2: -> ^( EDO ^( EDO_CON $cond) ^( EDO_EXP $exp) EDO_END )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:162:5: ^( EDO ^( EDO_CON $cond) ^( EDO_EXP $exp) EDO_END )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EDO, (pANTLR3_UINT8)"EDO"), root_1));

            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:162:13: ^( EDO_CON $cond)
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EDO_CON, (pANTLR3_UINT8)"EDO_CON"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_cond == NULL ? NULL : stream_cond->nextTree(stream_cond));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:162:30: ^( EDO_EXP $exp)
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EDO_EXP, (pANTLR3_UINT8)"EDO_EXP"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_exp == NULL ? NULL : stream_exp->nextTree(stream_exp));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EDO_END, (pANTLR3_UINT8)"EDO_END"));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_exp != NULL) stream_exp->free(stream_exp);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_cond != NULL) stream_cond->free(stream_cond);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledo_loopEx; /* Prevent compiler warnings */
    ruledo_loopEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_DO != NULL) stream_KW_DO->free(stream_KW_DO);
        if (stream_KW_WHILE != NULL) stream_KW_WHILE->free(stream_KW_WHILE);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(8, do_loop_StartIndex); }

    return retval;
}
/* $ANTLR end do_loop */

/** 
 * $ANTLR start for_loop
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:165:1: for_loop : KW_FOR IDENTIFIER ( KW_IN | SS_EQUAL ) source ( KW_DO | KW_COLLECT ) expr_g -> ^( EFOR IDENTIFIER ^( EFOR_SRC source ) ^( EFOR_EXP expr_g ) EFOR_END ) ;
 */
static yatgParser_for_loop_return
for_loop(pyatgParser ctx)
{   
    yatgParser_for_loop_return retval;
    ANTLR3_UINT32 for_loop_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_FOR33;
    pANTLR3_COMMON_TOKEN    IDENTIFIER34;
    pANTLR3_COMMON_TOKEN    KW_IN35;
    pANTLR3_COMMON_TOKEN    SS_EQUAL36;
    pANTLR3_COMMON_TOKEN    KW_DO38;
    pANTLR3_COMMON_TOKEN    KW_COLLECT39;
    yatgParser_source_return source37;
    #undef	RETURN_TYPE_source37
    #define	RETURN_TYPE_source37 yatgParser_source_return

    yatgParser_expr_g_return expr_g40;
    #undef	RETURN_TYPE_expr_g40
    #define	RETURN_TYPE_expr_g40 yatgParser_expr_g_return

    pANTLR3_BASE_TREE KW_FOR33_tree;
    pANTLR3_BASE_TREE IDENTIFIER34_tree;
    pANTLR3_BASE_TREE KW_IN35_tree;
    pANTLR3_BASE_TREE SS_EQUAL36_tree;
    pANTLR3_BASE_TREE KW_DO38_tree;
    pANTLR3_BASE_TREE KW_COLLECT39_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_IN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_DO;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_FOR;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_COLLECT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_EQUAL;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_source;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    for_loop_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(9)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_FOR33       = NULL;
    IDENTIFIER34       = NULL;
    KW_IN35       = NULL;
    SS_EQUAL36       = NULL;
    KW_DO38       = NULL;
    KW_COLLECT39       = NULL;
    source37.tree = NULL;

    expr_g40.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_FOR33_tree   = NULL;
    IDENTIFIER34_tree   = NULL;
    KW_IN35_tree   = NULL;
    SS_EQUAL36_tree   = NULL;
    KW_DO38_tree   = NULL;
    KW_COLLECT39_tree   = NULL;

    stream_KW_IN   = NULL;
    #define CREATE_stream_KW_IN  if (stream_KW_IN == NULL) {stream_KW_IN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_IN"); } 
    stream_KW_DO   = NULL;
    #define CREATE_stream_KW_DO  if (stream_KW_DO == NULL) {stream_KW_DO = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_DO"); } 
    stream_KW_FOR   = NULL;
    #define CREATE_stream_KW_FOR  if (stream_KW_FOR == NULL) {stream_KW_FOR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_FOR"); } 
    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_KW_COLLECT   = NULL;
    #define CREATE_stream_KW_COLLECT  if (stream_KW_COLLECT == NULL) {stream_KW_COLLECT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_COLLECT"); } 
    stream_SS_EQUAL   = NULL;
    #define CREATE_stream_SS_EQUAL  if (stream_SS_EQUAL == NULL) {stream_SS_EQUAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_EQUAL"); } 
    stream_source   = NULL;
    #define CREATE_stream_source  if (stream_source == NULL) {stream_source = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule source"); }
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:166:2: ( KW_FOR IDENTIFIER ( KW_IN | SS_EQUAL ) source ( KW_DO | KW_COLLECT ) expr_g -> ^( EFOR IDENTIFIER ^( EFOR_SRC source ) ^( EFOR_EXP expr_g ) EFOR_END ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:166:4: KW_FOR IDENTIFIER ( KW_IN | SS_EQUAL ) source ( KW_DO | KW_COLLECT ) expr_g
        {
            KW_FOR33 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_FOR, &FOLLOW_KW_FOR_in_for_loop835); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_FOR; stream_KW_FOR->add(stream_KW_FOR, KW_FOR33, NULL); }

            IDENTIFIER34 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_for_loop838); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER34, NULL); }


            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:166:24: ( KW_IN | SS_EQUAL )
            {
                int alt7=2;
                switch ( LA(1) ) 
                {
                case KW_IN:
                	{
                		alt7=1;
                	}
                    break;
                case SS_EQUAL:
                	{
                		alt7=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return retval;
                    }
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 7;
                    EXCEPTION->state        = 0;


                    goto rulefor_loopEx;
                }

                switch (alt7) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:166:26: KW_IN
            	    {
            	        KW_IN35 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_IN, &FOLLOW_KW_IN_in_for_loop843); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefor_loopEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_IN; stream_KW_IN->add(stream_KW_IN, KW_IN35, NULL); }


            	    }
            	    break;
            	case 2:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:166:34: SS_EQUAL
            	    {
            	        SS_EQUAL36 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_EQUAL, &FOLLOW_SS_EQUAL_in_for_loop847); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefor_loopEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_EQUAL; stream_SS_EQUAL->add(stream_SS_EQUAL, SS_EQUAL36, NULL); }


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_source_in_for_loop851);
            source37=source(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_source; stream_source->add(stream_source, source37.tree, NULL); }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:166:52: ( KW_DO | KW_COLLECT )
            {
                int alt8=2;
                switch ( LA(1) ) 
                {
                case KW_DO:
                	{
                		alt8=1;
                	}
                    break;
                case KW_COLLECT:
                	{
                		alt8=2;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return retval;
                    }
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 8;
                    EXCEPTION->state        = 0;


                    goto rulefor_loopEx;
                }

                switch (alt8) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:166:53: KW_DO
            	    {
            	        KW_DO38 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_DO, &FOLLOW_KW_DO_in_for_loop854); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefor_loopEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_DO; stream_KW_DO->add(stream_KW_DO, KW_DO38, NULL); }


            	    }
            	    break;
            	case 2:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:166:61: KW_COLLECT
            	    {
            	        KW_COLLECT39 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_COLLECT, &FOLLOW_KW_COLLECT_in_for_loop858); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefor_loopEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_COLLECT; stream_KW_COLLECT->add(stream_KW_COLLECT, KW_COLLECT39, NULL); }


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_for_loop861);
            expr_g40=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g40.tree, NULL); }

             
            /* AST REWRITE
             * elements          : source, IDENTIFIER, expr_g
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 167:2: -> ^( EFOR IDENTIFIER ^( EFOR_SRC source ) ^( EFOR_EXP expr_g ) EFOR_END )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:167:5: ^( EFOR IDENTIFIER ^( EFOR_SRC source ) ^( EFOR_EXP expr_g ) EFOR_END )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EFOR, (pANTLR3_UINT8)"EFOR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER));
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:167:24: ^( EFOR_SRC source )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EFOR_SRC, (pANTLR3_UINT8)"EFOR_SRC"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_source == NULL ? NULL : stream_source->nextTree(stream_source));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:167:44: ^( EFOR_EXP expr_g )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EFOR_EXP, (pANTLR3_UINT8)"EFOR_EXP"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_expr_g == NULL ? NULL : stream_expr_g->nextTree(stream_expr_g));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EFOR_END, (pANTLR3_UINT8)"EFOR_END"));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefor_loopEx; /* Prevent compiler warnings */
    rulefor_loopEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_IN != NULL) stream_KW_IN->free(stream_KW_IN);
        if (stream_KW_DO != NULL) stream_KW_DO->free(stream_KW_DO);
        if (stream_KW_FOR != NULL) stream_KW_FOR->free(stream_KW_FOR);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_KW_COLLECT != NULL) stream_KW_COLLECT->free(stream_KW_COLLECT);
        if (stream_SS_EQUAL != NULL) stream_SS_EQUAL->free(stream_SS_EQUAL);
        if (stream_source != NULL) stream_source->free(stream_source);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(9, for_loop_StartIndex); }

    return retval;
}
/* $ANTLR end for_loop */

/** 
 * $ANTLR start source
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:170:1: source : sstart= expr_g ( KW_TO sto= expr_g ( KW_BY sby= expr_g )? )? ( KW_WHERE swhere= expr_g )? -> ^( ESRC_START $sstart) ( ^( ESRC_TO $sto) )? ( ^( ESRC_BY $sby) )? ( ^( ESRC_WHERE $swhere) )? ;
 */
static yatgParser_source_return
source(pyatgParser ctx)
{   
    yatgParser_source_return retval;
    ANTLR3_UINT32 source_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_TO41;
    pANTLR3_COMMON_TOKEN    KW_BY42;
    pANTLR3_COMMON_TOKEN    KW_WHERE43;
    yatgParser_expr_g_return sstart;
    #undef	RETURN_TYPE_sstart
    #define	RETURN_TYPE_sstart yatgParser_expr_g_return

    yatgParser_expr_g_return sto;
    #undef	RETURN_TYPE_sto
    #define	RETURN_TYPE_sto yatgParser_expr_g_return

    yatgParser_expr_g_return sby;
    #undef	RETURN_TYPE_sby
    #define	RETURN_TYPE_sby yatgParser_expr_g_return

    yatgParser_expr_g_return swhere;
    #undef	RETURN_TYPE_swhere
    #define	RETURN_TYPE_swhere yatgParser_expr_g_return

    pANTLR3_BASE_TREE KW_TO41_tree;
    pANTLR3_BASE_TREE KW_BY42_tree;
    pANTLR3_BASE_TREE KW_WHERE43_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_WHERE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_TO;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_BY;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    source_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(10)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_TO41       = NULL;
    KW_BY42       = NULL;
    KW_WHERE43       = NULL;
    sstart.tree = NULL;

    sto.tree = NULL;

    sby.tree = NULL;

    swhere.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_TO41_tree   = NULL;
    KW_BY42_tree   = NULL;
    KW_WHERE43_tree   = NULL;

    stream_KW_WHERE   = NULL;
    #define CREATE_stream_KW_WHERE  if (stream_KW_WHERE == NULL) {stream_KW_WHERE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_WHERE"); } 
    stream_KW_TO   = NULL;
    #define CREATE_stream_KW_TO  if (stream_KW_TO == NULL) {stream_KW_TO = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_TO"); } 
    stream_KW_BY   = NULL;
    #define CREATE_stream_KW_BY  if (stream_KW_BY == NULL) {stream_KW_BY = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_BY"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:171:2: (sstart= expr_g ( KW_TO sto= expr_g ( KW_BY sby= expr_g )? )? ( KW_WHERE swhere= expr_g )? -> ^( ESRC_START $sstart) ( ^( ESRC_TO $sto) )? ( ^( ESRC_BY $sby) )? ( ^( ESRC_WHERE $swhere) )? )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:171:4: sstart= expr_g ( KW_TO sto= expr_g ( KW_BY sby= expr_g )? )? ( KW_WHERE swhere= expr_g )?
        {
            FOLLOWPUSH(FOLLOW_expr_g_in_source902);
            sstart=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, sstart.tree, NULL); }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:171:18: ( KW_TO sto= expr_g ( KW_BY sby= expr_g )? )?
            {
                int alt10=2;
                switch ( LA(1) ) 
                {
                    case KW_TO:
                    	{
                    		alt10=1;
                    	}
                        break;
                }

                switch (alt10) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:171:19: KW_TO sto= expr_g ( KW_BY sby= expr_g )?
            	    {
            	        KW_TO41 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_TO, &FOLLOW_KW_TO_in_source905); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_TO; stream_KW_TO->add(stream_KW_TO, KW_TO41, NULL); }

            	        FOLLOWPUSH(FOLLOW_expr_g_in_source909);
            	        sto=expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, sto.tree, NULL); }

            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:171:36: ( KW_BY sby= expr_g )?
            	        {
            	            int alt9=2;
            	            switch ( LA(1) ) 
            	            {
            	                case KW_BY:
            	                	{
            	                		alt9=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt9) 
            	            {
            	        	case 1:
            	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:171:38: KW_BY sby= expr_g
            	        	    {
            	        	        KW_BY42 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_BY, &FOLLOW_KW_BY_in_source913); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesourceEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_BY; stream_KW_BY->add(stream_KW_BY, KW_BY42, NULL); }

            	        	        FOLLOWPUSH(FOLLOW_expr_g_in_source917);
            	        	        sby=expr_g(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesourceEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, sby.tree, NULL); }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:171:60: ( KW_WHERE swhere= expr_g )?
            {
                int alt11=2;
                switch ( LA(1) ) 
                {
                    case KW_WHERE:
                    	{
                    		alt11=1;
                    	}
                        break;
                }

                switch (alt11) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:171:62: KW_WHERE swhere= expr_g
            	    {
            	        KW_WHERE43 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_WHERE, &FOLLOW_KW_WHERE_in_source926); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_WHERE; stream_KW_WHERE->add(stream_KW_WHERE, KW_WHERE43, NULL); }

            	        FOLLOWPUSH(FOLLOW_expr_g_in_source930);
            	        swhere=expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, swhere.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : sstart, swhere, sby, sto
             * token labels      : 
             * rule labels       : swhere, retval, sby, sto, sstart
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_swhere;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sby;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sto;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sstart;

            	stream_swhere=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token swhere", swhere.tree != NULL ? swhere.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_sby=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token sby", sby.tree != NULL ? sby.tree : NULL);
            	stream_sto=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token sto", sto.tree != NULL ? sto.tree : NULL);
            	stream_sstart=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token sstart", sstart.tree != NULL ? sstart.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 172:2: -> ^( ESRC_START $sstart) ( ^( ESRC_TO $sto) )? ( ^( ESRC_BY $sby) )? ( ^( ESRC_WHERE $swhere) )?
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:172:5: ^( ESRC_START $sstart)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ESRC_START, (pANTLR3_UINT8)"ESRC_START"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_sstart == NULL ? NULL : stream_sstart->nextTree(stream_sstart));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:172:27: ( ^( ESRC_TO $sto) )?
            	    {
            	    	if ( (stream_sto != NULL && stream_sto->hasNext(stream_sto))  )
            	    	{
            	    		// C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:172:27: ^( ESRC_TO $sto)
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ESRC_TO, (pANTLR3_UINT8)"ESRC_TO"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_sto == NULL ? NULL : stream_sto->nextTree(stream_sto));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if ( stream_sto != NULL) stream_sto->reset(stream_sto);

            	    }
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:172:44: ( ^( ESRC_BY $sby) )?
            	    {
            	    	if ( (stream_sby != NULL && stream_sby->hasNext(stream_sby))  )
            	    	{
            	    		// C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:172:44: ^( ESRC_BY $sby)
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ESRC_BY, (pANTLR3_UINT8)"ESRC_BY"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_sby == NULL ? NULL : stream_sby->nextTree(stream_sby));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if ( stream_sby != NULL) stream_sby->reset(stream_sby);

            	    }
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:172:61: ( ^( ESRC_WHERE $swhere) )?
            	    {
            	    	if ( (stream_swhere != NULL && stream_swhere->hasNext(stream_swhere))  )
            	    	{
            	    		// C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:172:61: ^( ESRC_WHERE $swhere)
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ESRC_WHERE, (pANTLR3_UINT8)"ESRC_WHERE"), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_swhere == NULL ? NULL : stream_swhere->nextTree(stream_swhere));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if ( stream_swhere != NULL) stream_swhere->reset(stream_swhere);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_swhere != NULL) stream_swhere->free(stream_swhere);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_sby != NULL) stream_sby->free(stream_sby);
            	if (stream_sto != NULL) stream_sto->free(stream_sto);
            	if (stream_sstart != NULL) stream_sstart->free(stream_sstart);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceEx; /* Prevent compiler warnings */
    rulesourceEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_WHERE != NULL) stream_KW_WHERE->free(stream_KW_WHERE);
        if (stream_KW_TO != NULL) stream_KW_TO->free(stream_KW_TO);
        if (stream_KW_BY != NULL) stream_KW_BY->free(stream_KW_BY);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(10, source_StartIndex); }

    return retval;
}
/* $ANTLR end source */

/** 
 * $ANTLR start loop_exit
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:175:1: loop_exit : KW_EXIT ( ( KW_WITH )=> KW_WITH expr_g )? -> ^( LP_EXIT ( ^( LP_EXIT_WITH expr_g ) )? ) ;
 */
static yatgParser_loop_exit_return
loop_exit(pyatgParser ctx)
{   
    yatgParser_loop_exit_return retval;
    ANTLR3_UINT32 loop_exit_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_EXIT44;
    pANTLR3_COMMON_TOKEN    KW_WITH45;
    yatgParser_expr_g_return expr_g46;
    #undef	RETURN_TYPE_expr_g46
    #define	RETURN_TYPE_expr_g46 yatgParser_expr_g_return

    pANTLR3_BASE_TREE KW_EXIT44_tree;
    pANTLR3_BASE_TREE KW_WITH45_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_WITH;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_EXIT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    loop_exit_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(11)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_EXIT44       = NULL;
    KW_WITH45       = NULL;
    expr_g46.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_EXIT44_tree   = NULL;
    KW_WITH45_tree   = NULL;

    stream_KW_WITH   = NULL;
    #define CREATE_stream_KW_WITH  if (stream_KW_WITH == NULL) {stream_KW_WITH = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_WITH"); } 
    stream_KW_EXIT   = NULL;
    #define CREATE_stream_KW_EXIT  if (stream_KW_EXIT == NULL) {stream_KW_EXIT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_EXIT"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:176:2: ( KW_EXIT ( ( KW_WITH )=> KW_WITH expr_g )? -> ^( LP_EXIT ( ^( LP_EXIT_WITH expr_g ) )? ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:176:4: KW_EXIT ( ( KW_WITH )=> KW_WITH expr_g )?
        {
            KW_EXIT44 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_EXIT, &FOLLOW_KW_EXIT_in_loop_exit980); 
            if  (HASEXCEPTION())
            {
                goto ruleloop_exitEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_EXIT; stream_KW_EXIT->add(stream_KW_EXIT, KW_EXIT44, NULL); }


            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:176:12: ( ( KW_WITH )=> KW_WITH expr_g )?
            {
                int alt12=2;
                switch ( LA(1) ) 
                {
                    case KW_WITH:
                    	{
                    		{
                    		    int LA12_1 = LA(2);
                    		    if ( (LA12_1 == KW_UNDO) ) 
                    		    {
                    		        {
                    		            int LA12_60 = LA(3);
                    		            if ( (synpred26_yatg(ctx)) ) 
                    		            {
                    		                alt12=1;
                    		            }
                    		        }
                    		    }
                    		    else if ( (LA12_1 == KW_ANIMATE) ) 
                    		    {
                    		        {
                    		            int LA12_61 = LA(3);
                    		            if ( (synpred26_yatg(ctx)) ) 
                    		            {
                    		                alt12=1;
                    		            }
                    		        }
                    		    }
                    		    else if ( (LA12_1 == SS_OPAREN) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == IDENTIFIER) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == DIGIT) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == HEX_LITERAL) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == STRING_LITERIAL) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == SS_HASH) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == SS_OBRACKET) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_TRUE) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_FALSE) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_ON) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_OFF) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_OK) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_UNDEFINED) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_UNSUPPLIED) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == SS_MINUS) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (((LA12_1 >= KW_LOCAL) && (LA12_1 <= KW_GLOBAL))) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_IF) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_WHILE) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_DO) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_FOR) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_EXIT) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_CONTINUE) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_CASE) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_STRUCT) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_TRY) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_MAPPED) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (((LA12_1 >= KW_FUNCTION) && (LA12_1 <= KW_FN))) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_RETURN) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_WITH) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_AT) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_IN) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_COORDSYS) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		    else if ( (LA12_1 == KW_ABOUT) && (synpred26_yatg(ctx))) 
                    		    {
                    		        alt12=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt12) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:176:14: ( KW_WITH )=> KW_WITH expr_g
            	    {
            	        KW_WITH45 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_WITH, &FOLLOW_KW_WITH_in_loop_exit991); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleloop_exitEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_WITH; stream_KW_WITH->add(stream_KW_WITH, KW_WITH45, NULL); }

            	        FOLLOWPUSH(FOLLOW_expr_g_in_loop_exit993);
            	        expr_g46=expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleloop_exitEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g46.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expr_g
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 177:2: -> ^( LP_EXIT ( ^( LP_EXIT_WITH expr_g ) )? )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:177:5: ^( LP_EXIT ( ^( LP_EXIT_WITH expr_g ) )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LP_EXIT, (pANTLR3_UINT8)"LP_EXIT"), root_1));

            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:177:15: ( ^( LP_EXIT_WITH expr_g ) )?
            	        {
            	        	if ( (stream_expr_g != NULL && stream_expr_g->hasNext(stream_expr_g))  )
            	        	{
            	        		// C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:177:15: ^( LP_EXIT_WITH expr_g )
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LP_EXIT_WITH, (pANTLR3_UINT8)"LP_EXIT_WITH"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_expr_g == NULL ? NULL : stream_expr_g->nextTree(stream_expr_g));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_expr_g != NULL) stream_expr_g->reset(stream_expr_g);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleloop_exitEx; /* Prevent compiler warnings */
    ruleloop_exitEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_WITH != NULL) stream_KW_WITH->free(stream_KW_WITH);
        if (stream_KW_EXIT != NULL) stream_KW_EXIT->free(stream_KW_EXIT);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(11, loop_exit_StartIndex); }

    return retval;
}
/* $ANTLR end loop_exit */

/** 
 * $ANTLR start loop_continue
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:180:1: loop_continue : KW_CONTINUE -> ^( LP_CONT ) ;
 */
static yatgParser_loop_continue_return
loop_continue(pyatgParser ctx)
{   
    yatgParser_loop_continue_return retval;
    ANTLR3_UINT32 loop_continue_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_CONTINUE47;

    pANTLR3_BASE_TREE KW_CONTINUE47_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_CONTINUE;

    /* Initialize rule variables
     */
    loop_continue_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(12)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_CONTINUE47       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    KW_CONTINUE47_tree   = NULL;

    stream_KW_CONTINUE   = NULL;
    #define CREATE_stream_KW_CONTINUE  if (stream_KW_CONTINUE == NULL) {stream_KW_CONTINUE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_CONTINUE"); } 

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:181:3: ( KW_CONTINUE -> ^( LP_CONT ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:181:5: KW_CONTINUE
        {
            KW_CONTINUE47 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_CONTINUE, &FOLLOW_KW_CONTINUE_in_loop_continue1022); 
            if  (HASEXCEPTION())
            {
                goto ruleloop_continueEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_CONTINUE; stream_KW_CONTINUE->add(stream_KW_CONTINUE, KW_CONTINUE47, NULL); }


             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 182:3: -> ^( LP_CONT )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:182:6: ^( LP_CONT )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LP_CONT, (pANTLR3_UINT8)"LP_CONT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleloop_continueEx; /* Prevent compiler warnings */
    ruleloop_continueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_CONTINUE != NULL) stream_KW_CONTINUE->free(stream_KW_CONTINUE);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(12, loop_continue_StartIndex); }

    return retval;
}
/* $ANTLR end loop_continue */

/** 
 * $ANTLR start case_expr
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:185:1: case_expr : KW_CASE ( expr_g )? KW_OF SS_OPAREN ( case_item )* SS_CPAREN -> ^( CASE ( ^( CASE_Exp expr_g ) )? ( ^( case_item ) )* ) ;
 */
static yatgParser_case_expr_return
case_expr(pyatgParser ctx)
{   
    yatgParser_case_expr_return retval;
    ANTLR3_UINT32 case_expr_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_CASE48;
    pANTLR3_COMMON_TOKEN    KW_OF50;
    pANTLR3_COMMON_TOKEN    SS_OPAREN51;
    pANTLR3_COMMON_TOKEN    SS_CPAREN53;
    yatgParser_expr_g_return expr_g49;
    #undef	RETURN_TYPE_expr_g49
    #define	RETURN_TYPE_expr_g49 yatgParser_expr_g_return

    yatgParser_case_item_return case_item52;
    #undef	RETURN_TYPE_case_item52
    #define	RETURN_TYPE_case_item52 yatgParser_case_item_return

    pANTLR3_BASE_TREE KW_CASE48_tree;
    pANTLR3_BASE_TREE KW_OF50_tree;
    pANTLR3_BASE_TREE SS_OPAREN51_tree;
    pANTLR3_BASE_TREE SS_CPAREN53_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_CPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_OF;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_CASE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_OPAREN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case_item;
    /* Initialize rule variables
     */
    case_expr_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(13)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_CASE48       = NULL;
    KW_OF50       = NULL;
    SS_OPAREN51       = NULL;
    SS_CPAREN53       = NULL;
    expr_g49.tree = NULL;

    case_item52.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_CASE48_tree   = NULL;
    KW_OF50_tree   = NULL;
    SS_OPAREN51_tree   = NULL;
    SS_CPAREN53_tree   = NULL;

    stream_SS_CPAREN   = NULL;
    #define CREATE_stream_SS_CPAREN  if (stream_SS_CPAREN == NULL) {stream_SS_CPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_CPAREN"); } 
    stream_KW_OF   = NULL;
    #define CREATE_stream_KW_OF  if (stream_KW_OF == NULL) {stream_KW_OF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_OF"); } 
    stream_KW_CASE   = NULL;
    #define CREATE_stream_KW_CASE  if (stream_KW_CASE == NULL) {stream_KW_CASE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_CASE"); } 
    stream_SS_OPAREN   = NULL;
    #define CREATE_stream_SS_OPAREN  if (stream_SS_OPAREN == NULL) {stream_SS_OPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_OPAREN"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }
    stream_case_item   = NULL;
    #define CREATE_stream_case_item  if (stream_case_item == NULL) {stream_case_item = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule case_item"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:186:3: ( KW_CASE ( expr_g )? KW_OF SS_OPAREN ( case_item )* SS_CPAREN -> ^( CASE ( ^( CASE_Exp expr_g ) )? ( ^( case_item ) )* ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:186:5: KW_CASE ( expr_g )? KW_OF SS_OPAREN ( case_item )* SS_CPAREN
        {
            KW_CASE48 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_CASE, &FOLLOW_KW_CASE_in_case_expr1043); 
            if  (HASEXCEPTION())
            {
                goto rulecase_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_CASE; stream_KW_CASE->add(stream_KW_CASE, KW_CASE48, NULL); }


            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:186:13: ( expr_g )?
            {
                int alt13=2;
                switch ( LA(1) ) 
                {
                    case KW_LOCAL:
                    case KW_GLOBAL:
                    case IDENTIFIER:
                    case KW_IF:
                    case KW_DO:
                    case KW_WHILE:
                    case KW_FOR:
                    case KW_IN:
                    case KW_EXIT:
                    case KW_WITH:
                    case KW_CONTINUE:
                    case KW_CASE:
                    case SS_OPAREN:
                    case KW_STRUCT:
                    case KW_TRY:
                    case KW_MAPPED:
                    case KW_FUNCTION:
                    case KW_FN:
                    case KW_RETURN:
                    case KW_ANIMATE:
                    case KW_AT:
                    case KW_COORDSYS:
                    case KW_ABOUT:
                    case KW_UNDO:
                    case SS_MINUS:
                    case SS_OBRACKET:
                    case DIGIT:
                    case HEX_LITERAL:
                    case STRING_LITERIAL:
                    case SS_HASH:
                    case KW_TRUE:
                    case KW_FALSE:
                    case KW_ON:
                    case KW_OFF:
                    case KW_OK:
                    case KW_UNDEFINED:
                    case KW_UNSUPPLIED:
                    	{
                    		alt13=1;
                    	}
                        break;
                }

                switch (alt13) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:186:15: expr_g
            	    {
            	        FOLLOWPUSH(FOLLOW_expr_g_in_case_expr1047);
            	        expr_g49=expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecase_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g49.tree, NULL); }

            	    }
            	    break;

                }
            }
            KW_OF50 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_OF, &FOLLOW_KW_OF_in_case_expr1052); 
            if  (HASEXCEPTION())
            {
                goto rulecase_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_OF; stream_KW_OF->add(stream_KW_OF, KW_OF50, NULL); }

            SS_OPAREN51 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_OPAREN, &FOLLOW_SS_OPAREN_in_case_expr1054); 
            if  (HASEXCEPTION())
            {
                goto rulecase_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_OPAREN; stream_SS_OPAREN->add(stream_SS_OPAREN, SS_OPAREN51, NULL); }


            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:186:41: ( case_item )*

            for (;;)
            {
                int alt14=2;
                switch ( LA(1) ) 
                {
                case SS_OPAREN:
                case KW_DEFAULT:
                case SS_MINUS:
                case SS_OBRACKET:
                case DIGIT:
                case HEX_LITERAL:
                case STRING_LITERIAL:
                case SS_HASH:
                case KW_TRUE:
                case KW_FALSE:
                case KW_ON:
                case KW_OFF:
                case KW_OK:
                case KW_UNDEFINED:
                case KW_UNSUPPLIED:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:186:43: case_item
            	    {
            	        FOLLOWPUSH(FOLLOW_case_item_in_case_expr1058);
            	        case_item52=case_item(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecase_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_case_item; stream_case_item->add(stream_case_item, case_item52.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */

            SS_CPAREN53 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_CPAREN, &FOLLOW_SS_CPAREN_in_case_expr1063); 
            if  (HASEXCEPTION())
            {
                goto rulecase_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_CPAREN; stream_SS_CPAREN->add(stream_SS_CPAREN, SS_CPAREN53, NULL); }


             
            /* AST REWRITE
             * elements          : case_item, expr_g
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 187:3: -> ^( CASE ( ^( CASE_Exp expr_g ) )? ( ^( case_item ) )* )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:187:5: ^( CASE ( ^( CASE_Exp expr_g ) )? ( ^( case_item ) )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:187:12: ( ^( CASE_Exp expr_g ) )?
            	        {
            	        	if ( (stream_expr_g != NULL && stream_expr_g->hasNext(stream_expr_g))  )
            	        	{
            	        		// C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:187:12: ^( CASE_Exp expr_g )
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE_Exp, (pANTLR3_UINT8)"CASE_Exp"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_expr_g == NULL ? NULL : stream_expr_g->nextTree(stream_expr_g));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_expr_g != NULL) stream_expr_g->reset(stream_expr_g);

            	        }
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:187:32: ( ^( case_item ) )*
            	        {
            	        	while ( (stream_case_item != NULL && stream_case_item->hasNext(stream_case_item))  )
            	        	{
            	        		// C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:187:32: ^( case_item )
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case_item == NULL ? NULL : stream_case_item->nextNode(stream_case_item), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if (stream_case_item != NULL) stream_case_item->reset(stream_case_item);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecase_exprEx; /* Prevent compiler warnings */
    rulecase_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_CPAREN != NULL) stream_SS_CPAREN->free(stream_SS_CPAREN);
        if (stream_KW_OF != NULL) stream_KW_OF->free(stream_KW_OF);
        if (stream_KW_CASE != NULL) stream_KW_CASE->free(stream_KW_CASE);
        if (stream_SS_OPAREN != NULL) stream_SS_OPAREN->free(stream_SS_OPAREN);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
        if (stream_case_item != NULL) stream_case_item->free(stream_case_item);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(13, case_expr_StartIndex); }

    return retval;
}
/* $ANTLR end case_expr */

/** 
 * $ANTLR start case_item
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:190:1: case_item : ( constant SS_COLON expr_g -> ^( CASE_Item constant expr_g ) | KW_DEFAULT SS_COLON expr_g -> ^( CASE_Item DEFAULT expr_g ) );
 */
static yatgParser_case_item_return
case_item(pyatgParser ctx)
{   
    yatgParser_case_item_return retval;
    ANTLR3_UINT32 case_item_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_COLON55;
    pANTLR3_COMMON_TOKEN    KW_DEFAULT57;
    pANTLR3_COMMON_TOKEN    SS_COLON58;
    yatgParser_constant_return constant54;
    #undef	RETURN_TYPE_constant54
    #define	RETURN_TYPE_constant54 yatgParser_constant_return

    yatgParser_expr_g_return expr_g56;
    #undef	RETURN_TYPE_expr_g56
    #define	RETURN_TYPE_expr_g56 yatgParser_expr_g_return

    yatgParser_expr_g_return expr_g59;
    #undef	RETURN_TYPE_expr_g59
    #define	RETURN_TYPE_expr_g59 yatgParser_expr_g_return

    pANTLR3_BASE_TREE SS_COLON55_tree;
    pANTLR3_BASE_TREE KW_DEFAULT57_tree;
    pANTLR3_BASE_TREE SS_COLON58_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_DEFAULT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_COLON;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_constant;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    case_item_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(14)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_COLON55       = NULL;
    KW_DEFAULT57       = NULL;
    SS_COLON58       = NULL;
    constant54.tree = NULL;

    expr_g56.tree = NULL;

    expr_g59.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_COLON55_tree   = NULL;
    KW_DEFAULT57_tree   = NULL;
    SS_COLON58_tree   = NULL;

    stream_KW_DEFAULT   = NULL;
    #define CREATE_stream_KW_DEFAULT  if (stream_KW_DEFAULT == NULL) {stream_KW_DEFAULT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_DEFAULT"); } 
    stream_SS_COLON   = NULL;
    #define CREATE_stream_SS_COLON  if (stream_SS_COLON == NULL) {stream_SS_COLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_COLON"); } 
    stream_constant   = NULL;
    #define CREATE_stream_constant  if (stream_constant == NULL) {stream_constant = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule constant"); }
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:191:2: ( constant SS_COLON expr_g -> ^( CASE_Item constant expr_g ) | KW_DEFAULT SS_COLON expr_g -> ^( CASE_Item DEFAULT expr_g ) )
            
            ANTLR3_UINT32 alt15;

            alt15=2;

            switch ( LA(1) ) 
            {
            case SS_OPAREN:
            case SS_MINUS:
            case SS_OBRACKET:
            case DIGIT:
            case HEX_LITERAL:
            case STRING_LITERIAL:
            case SS_HASH:
            case KW_TRUE:
            case KW_FALSE:
            case KW_ON:
            case KW_OFF:
            case KW_OK:
            case KW_UNDEFINED:
            case KW_UNSUPPLIED:
            	{
            		alt15=1;
            	}
                break;
            case KW_DEFAULT:
            	{
            		alt15=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 15;
                EXCEPTION->state        = 0;


                goto rulecase_itemEx;
            }

            switch (alt15) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:191:4: constant SS_COLON expr_g
        	    {
        	        FOLLOWPUSH(FOLLOW_constant_in_case_item1096);
        	        constant54=constant(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_constant; stream_constant->add(stream_constant, constant54.tree, NULL); }
        	        SS_COLON55 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COLON, &FOLLOW_SS_COLON_in_case_item1098); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_COLON; stream_SS_COLON->add(stream_SS_COLON, SS_COLON55, NULL); }

        	        FOLLOWPUSH(FOLLOW_expr_g_in_case_item1100);
        	        expr_g56=expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g56.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : constant, expr_g
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 191:29: -> ^( CASE_Item constant expr_g )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:191:31: ^( CASE_Item constant expr_g )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE_Item, (pANTLR3_UINT8)"CASE_Item"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_constant == NULL ? NULL : stream_constant->nextTree(stream_constant));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr_g == NULL ? NULL : stream_expr_g->nextTree(stream_expr_g));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:192:4: KW_DEFAULT SS_COLON expr_g
        	    {
        	        KW_DEFAULT57 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_DEFAULT, &FOLLOW_KW_DEFAULT_in_case_item1115); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_DEFAULT; stream_KW_DEFAULT->add(stream_KW_DEFAULT, KW_DEFAULT57, NULL); }

        	        SS_COLON58 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COLON, &FOLLOW_SS_COLON_in_case_item1117); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_COLON; stream_SS_COLON->add(stream_SS_COLON, SS_COLON58, NULL); }

        	        FOLLOWPUSH(FOLLOW_expr_g_in_case_item1119);
        	        expr_g59=expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g59.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : expr_g
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 192:31: -> ^( CASE_Item DEFAULT expr_g )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:192:33: ^( CASE_Item DEFAULT expr_g )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE_Item, (pANTLR3_UINT8)"CASE_Item"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DEFAULT, (pANTLR3_UINT8)"DEFAULT"));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr_g == NULL ? NULL : stream_expr_g->nextTree(stream_expr_g));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecase_itemEx; /* Prevent compiler warnings */
    rulecase_itemEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_DEFAULT != NULL) stream_KW_DEFAULT->free(stream_KW_DEFAULT);
        if (stream_SS_COLON != NULL) stream_SS_COLON->free(stream_SS_COLON);
        if (stream_constant != NULL) stream_constant->free(stream_constant);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(14, case_item_StartIndex); }

    return retval;
}
/* $ANTLR end case_item */

/** 
 * $ANTLR start struct_def
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:195:1: struct_def : KW_STRUCT SS_OPAREN member ( SS_COMMA member )* SS_CPAREN -> ^( STRUCT ( member )+ ) ;
 */
static yatgParser_struct_def_return
struct_def(pyatgParser ctx)
{   
    yatgParser_struct_def_return retval;
    ANTLR3_UINT32 struct_def_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_STRUCT60;
    pANTLR3_COMMON_TOKEN    SS_OPAREN61;
    pANTLR3_COMMON_TOKEN    SS_COMMA63;
    pANTLR3_COMMON_TOKEN    SS_CPAREN65;
    yatgParser_member_return member62;
    #undef	RETURN_TYPE_member62
    #define	RETURN_TYPE_member62 yatgParser_member_return

    yatgParser_member_return member64;
    #undef	RETURN_TYPE_member64
    #define	RETURN_TYPE_member64 yatgParser_member_return

    pANTLR3_BASE_TREE KW_STRUCT60_tree;
    pANTLR3_BASE_TREE SS_OPAREN61_tree;
    pANTLR3_BASE_TREE SS_COMMA63_tree;
    pANTLR3_BASE_TREE SS_CPAREN65_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_CPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_STRUCT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_OPAREN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_member;
    /* Initialize rule variables
     */
    struct_def_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(15)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_STRUCT60       = NULL;
    SS_OPAREN61       = NULL;
    SS_COMMA63       = NULL;
    SS_CPAREN65       = NULL;
    member62.tree = NULL;

    member64.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_STRUCT60_tree   = NULL;
    SS_OPAREN61_tree   = NULL;
    SS_COMMA63_tree   = NULL;
    SS_CPAREN65_tree   = NULL;

    stream_SS_CPAREN   = NULL;
    #define CREATE_stream_SS_CPAREN  if (stream_SS_CPAREN == NULL) {stream_SS_CPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_CPAREN"); } 
    stream_SS_COMMA   = NULL;
    #define CREATE_stream_SS_COMMA  if (stream_SS_COMMA == NULL) {stream_SS_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_COMMA"); } 
    stream_KW_STRUCT   = NULL;
    #define CREATE_stream_KW_STRUCT  if (stream_KW_STRUCT == NULL) {stream_KW_STRUCT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_STRUCT"); } 
    stream_SS_OPAREN   = NULL;
    #define CREATE_stream_SS_OPAREN  if (stream_SS_OPAREN == NULL) {stream_SS_OPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_OPAREN"); } 
    stream_member   = NULL;
    #define CREATE_stream_member  if (stream_member == NULL) {stream_member = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule member"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:196:2: ( KW_STRUCT SS_OPAREN member ( SS_COMMA member )* SS_CPAREN -> ^( STRUCT ( member )+ ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:196:4: KW_STRUCT SS_OPAREN member ( SS_COMMA member )* SS_CPAREN
        {
            KW_STRUCT60 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_STRUCT, &FOLLOW_KW_STRUCT_in_struct_def1142); 
            if  (HASEXCEPTION())
            {
                goto rulestruct_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_STRUCT; stream_KW_STRUCT->add(stream_KW_STRUCT, KW_STRUCT60, NULL); }

            SS_OPAREN61 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_OPAREN, &FOLLOW_SS_OPAREN_in_struct_def1144); 
            if  (HASEXCEPTION())
            {
                goto rulestruct_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_OPAREN; stream_SS_OPAREN->add(stream_SS_OPAREN, SS_OPAREN61, NULL); }

            FOLLOWPUSH(FOLLOW_member_in_struct_def1146);
            member62=member(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestruct_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_member; stream_member->add(stream_member, member62.tree, NULL); }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:196:31: ( SS_COMMA member )*

            for (;;)
            {
                int alt16=2;
                switch ( LA(1) ) 
                {
                case SS_COMMA:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:196:33: SS_COMMA member
            	    {
            	        SS_COMMA63 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_struct_def1150); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestruct_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA63, NULL); }

            	        FOLLOWPUSH(FOLLOW_member_in_struct_def1152);
            	        member64=member(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestruct_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_member; stream_member->add(stream_member, member64.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */

            SS_CPAREN65 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_CPAREN, &FOLLOW_SS_CPAREN_in_struct_def1157); 
            if  (HASEXCEPTION())
            {
                goto rulestruct_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_CPAREN; stream_SS_CPAREN->add(stream_SS_CPAREN, SS_CPAREN65, NULL); }


             
            /* AST REWRITE
             * elements          : member
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 197:2: -> ^( STRUCT ( member )+ )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:197:4: ^( STRUCT ( member )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, STRUCT, (pANTLR3_UINT8)"STRUCT"), root_1));

            	        if ((stream_member == NULL || !stream_member->hasNext(stream_member))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_member->hasNext(stream_member))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_member == NULL ? NULL : stream_member->nextTree(stream_member));

            	        	}
            	        	stream_member->reset(stream_member);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestruct_defEx; /* Prevent compiler warnings */
    rulestruct_defEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_CPAREN != NULL) stream_SS_CPAREN->free(stream_SS_CPAREN);
        if (stream_SS_COMMA != NULL) stream_SS_COMMA->free(stream_SS_COMMA);
        if (stream_KW_STRUCT != NULL) stream_KW_STRUCT->free(stream_KW_STRUCT);
        if (stream_SS_OPAREN != NULL) stream_SS_OPAREN->free(stream_SS_OPAREN);
        if (stream_member != NULL) stream_member->free(stream_member);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(15, struct_def_StartIndex); }

    return retval;
}
/* $ANTLR end struct_def */

/** 
 * $ANTLR start member
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:200:1: member : ( IDENTIFIER ( SS_EQUAL expr_g )? -> ^( MEMBER IDENTIFIER expr_g ) | function_def -> ^( function_def ) );
 */
static yatgParser_member_return
member(pyatgParser ctx)
{   
    yatgParser_member_return retval;
    ANTLR3_UINT32 member_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENTIFIER66;
    pANTLR3_COMMON_TOKEN    SS_EQUAL67;
    yatgParser_expr_g_return expr_g68;
    #undef	RETURN_TYPE_expr_g68
    #define	RETURN_TYPE_expr_g68 yatgParser_expr_g_return

    yatgParser_function_def_return function_def69;
    #undef	RETURN_TYPE_function_def69
    #define	RETURN_TYPE_function_def69 yatgParser_function_def_return

    pANTLR3_BASE_TREE IDENTIFIER66_tree;
    pANTLR3_BASE_TREE SS_EQUAL67_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_EQUAL;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_function_def;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    member_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(16)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    IDENTIFIER66       = NULL;
    SS_EQUAL67       = NULL;
    expr_g68.tree = NULL;

    function_def69.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENTIFIER66_tree   = NULL;
    SS_EQUAL67_tree   = NULL;

    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_SS_EQUAL   = NULL;
    #define CREATE_stream_SS_EQUAL  if (stream_SS_EQUAL == NULL) {stream_SS_EQUAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_EQUAL"); } 
    stream_function_def   = NULL;
    #define CREATE_stream_function_def  if (stream_function_def == NULL) {stream_function_def = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule function_def"); }
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:201:2: ( IDENTIFIER ( SS_EQUAL expr_g )? -> ^( MEMBER IDENTIFIER expr_g ) | function_def -> ^( function_def ) )
            
            ANTLR3_UINT32 alt18;

            alt18=2;

            switch ( LA(1) ) 
            {
            case IDENTIFIER:
            	{
            		alt18=1;
            	}
                break;
            case KW_MAPPED:
            case KW_FUNCTION:
            case KW_FN:
            	{
            		alt18=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 18;
                EXCEPTION->state        = 0;


                goto rulememberEx;
            }

            switch (alt18) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:201:4: IDENTIFIER ( SS_EQUAL expr_g )?
        	    {
        	        IDENTIFIER66 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_member1178); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER66, NULL); }


        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:201:15: ( SS_EQUAL expr_g )?
        	        {
        	            int alt17=2;
        	            switch ( LA(1) ) 
        	            {
        	                case SS_EQUAL:
        	                	{
        	                		alt17=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt17) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:201:17: SS_EQUAL expr_g
        	        	    {
        	        	        SS_EQUAL67 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_EQUAL, &FOLLOW_SS_EQUAL_in_member1182); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_EQUAL; stream_SS_EQUAL->add(stream_SS_EQUAL, SS_EQUAL67, NULL); }

        	        	        FOLLOWPUSH(FOLLOW_expr_g_in_member1184);
        	        	        expr_g68=expr_g(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g68.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : IDENTIFIER, expr_g
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 201:36: -> ^( MEMBER IDENTIFIER expr_g )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:201:38: ^( MEMBER IDENTIFIER expr_g )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MEMBER, (pANTLR3_UINT8)"MEMBER"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr_g == NULL ? NULL : stream_expr_g->nextTree(stream_expr_g));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:202:4: function_def
        	    {
        	        FOLLOWPUSH(FOLLOW_function_def_in_member1203);
        	        function_def69=function_def(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_function_def; stream_function_def->add(stream_function_def, function_def69.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : function_def
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 202:17: -> ^( function_def )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:202:19: ^( function_def )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_function_def == NULL ? NULL : stream_function_def->nextNode(stream_function_def), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberEx; /* Prevent compiler warnings */
    rulememberEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_SS_EQUAL != NULL) stream_SS_EQUAL->free(stream_SS_EQUAL);
        if (stream_function_def != NULL) stream_function_def->free(stream_function_def);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(16, member_StartIndex); }

    return retval;
}
/* $ANTLR end member */

/** 
 * $ANTLR start try_expr
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:205:1: try_expr : KW_TRY t_exp= expr_g KW_CATCH c_exp= expr_g -> ^( ETRY ^( ETRY_EXP $t_exp) ^( ECATCH_EXP $c_exp) ) ;
 */
static yatgParser_try_expr_return
try_expr(pyatgParser ctx)
{   
    yatgParser_try_expr_return retval;
    ANTLR3_UINT32 try_expr_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_TRY70;
    pANTLR3_COMMON_TOKEN    KW_CATCH71;
    yatgParser_expr_g_return t_exp;
    #undef	RETURN_TYPE_t_exp
    #define	RETURN_TYPE_t_exp yatgParser_expr_g_return

    yatgParser_expr_g_return c_exp;
    #undef	RETURN_TYPE_c_exp
    #define	RETURN_TYPE_c_exp yatgParser_expr_g_return

    pANTLR3_BASE_TREE KW_TRY70_tree;
    pANTLR3_BASE_TREE KW_CATCH71_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_TRY;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_CATCH;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    try_expr_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(17)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_TRY70       = NULL;
    KW_CATCH71       = NULL;
    t_exp.tree = NULL;

    c_exp.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_TRY70_tree   = NULL;
    KW_CATCH71_tree   = NULL;

    stream_KW_TRY   = NULL;
    #define CREATE_stream_KW_TRY  if (stream_KW_TRY == NULL) {stream_KW_TRY = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_TRY"); } 
    stream_KW_CATCH   = NULL;
    #define CREATE_stream_KW_CATCH  if (stream_KW_CATCH == NULL) {stream_KW_CATCH = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_CATCH"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:206:2: ( KW_TRY t_exp= expr_g KW_CATCH c_exp= expr_g -> ^( ETRY ^( ETRY_EXP $t_exp) ^( ECATCH_EXP $c_exp) ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:206:4: KW_TRY t_exp= expr_g KW_CATCH c_exp= expr_g
        {
            KW_TRY70 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_TRY, &FOLLOW_KW_TRY_in_try_expr1221); 
            if  (HASEXCEPTION())
            {
                goto ruletry_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_TRY; stream_KW_TRY->add(stream_KW_TRY, KW_TRY70, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_try_expr1225);
            t_exp=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletry_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, t_exp.tree, NULL); }
            KW_CATCH71 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_CATCH, &FOLLOW_KW_CATCH_in_try_expr1227); 
            if  (HASEXCEPTION())
            {
                goto ruletry_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_CATCH; stream_KW_CATCH->add(stream_KW_CATCH, KW_CATCH71, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_try_expr1232);
            c_exp=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletry_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, c_exp.tree, NULL); }

             
            /* AST REWRITE
             * elements          : c_exp, t_exp
             * token labels      : 
             * rule labels       : retval, t_exp, c_exp
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_t_exp;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_c_exp;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_t_exp=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token t_exp", t_exp.tree != NULL ? t_exp.tree : NULL);
            	stream_c_exp=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token c_exp", c_exp.tree != NULL ? c_exp.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 207:2: -> ^( ETRY ^( ETRY_EXP $t_exp) ^( ECATCH_EXP $c_exp) )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:207:4: ^( ETRY ^( ETRY_EXP $t_exp) ^( ECATCH_EXP $c_exp) )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ETRY, (pANTLR3_UINT8)"ETRY"), root_1));

            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:207:11: ^( ETRY_EXP $t_exp)
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ETRY_EXP, (pANTLR3_UINT8)"ETRY_EXP"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_t_exp == NULL ? NULL : stream_t_exp->nextTree(stream_t_exp));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:207:29: ^( ECATCH_EXP $c_exp)
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ECATCH_EXP, (pANTLR3_UINT8)"ECATCH_EXP"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_c_exp == NULL ? NULL : stream_c_exp->nextTree(stream_c_exp));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_t_exp != NULL) stream_t_exp->free(stream_t_exp);
            	if (stream_c_exp != NULL) stream_c_exp->free(stream_c_exp);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletry_exprEx; /* Prevent compiler warnings */
    ruletry_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_TRY != NULL) stream_KW_TRY->free(stream_KW_TRY);
        if (stream_KW_CATCH != NULL) stream_KW_CATCH->free(stream_KW_CATCH);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(17, try_expr_StartIndex); }

    return retval;
}
/* $ANTLR end try_expr */

/** 
 * $ANTLR start function_def
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:209:1: function_def : ( KW_MAPPED )? fun IDENTIFIER ( argument_decl_list )* SS_EQUAL expr_g -> ^( FUN_DEF ^( FUN_NAME IDENTIFIER ) ^( ARG_EXPR_L ( argument_decl_list )* ) ^( BODY expr_g ) FUN_DEF_END ) ;
 */
static yatgParser_function_def_return
function_def(pyatgParser ctx)
{   
    yatgParser_function_def_return retval;
    ANTLR3_UINT32 function_def_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_MAPPED72;
    pANTLR3_COMMON_TOKEN    IDENTIFIER74;
    pANTLR3_COMMON_TOKEN    SS_EQUAL76;
    yatgParser_fun_return fun73;
    #undef	RETURN_TYPE_fun73
    #define	RETURN_TYPE_fun73 yatgParser_fun_return

    yatgParser_argument_decl_list_return argument_decl_list75;
    #undef	RETURN_TYPE_argument_decl_list75
    #define	RETURN_TYPE_argument_decl_list75 yatgParser_argument_decl_list_return

    yatgParser_expr_g_return expr_g77;
    #undef	RETURN_TYPE_expr_g77
    #define	RETURN_TYPE_expr_g77 yatgParser_expr_g_return

    pANTLR3_BASE_TREE KW_MAPPED72_tree;
    pANTLR3_BASE_TREE IDENTIFIER74_tree;
    pANTLR3_BASE_TREE SS_EQUAL76_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_MAPPED;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_EQUAL;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_fun;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_argument_decl_list;
    /* Initialize rule variables
     */
    function_def_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(18)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_MAPPED72       = NULL;
    IDENTIFIER74       = NULL;
    SS_EQUAL76       = NULL;
    fun73.tree = NULL;

    argument_decl_list75.tree = NULL;

    expr_g77.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_MAPPED72_tree   = NULL;
    IDENTIFIER74_tree   = NULL;
    SS_EQUAL76_tree   = NULL;

    stream_KW_MAPPED   = NULL;
    #define CREATE_stream_KW_MAPPED  if (stream_KW_MAPPED == NULL) {stream_KW_MAPPED = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_MAPPED"); } 
    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_SS_EQUAL   = NULL;
    #define CREATE_stream_SS_EQUAL  if (stream_SS_EQUAL == NULL) {stream_SS_EQUAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_EQUAL"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }
    stream_fun   = NULL;
    #define CREATE_stream_fun  if (stream_fun == NULL) {stream_fun = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule fun"); }
    stream_argument_decl_list   = NULL;
    #define CREATE_stream_argument_decl_list  if (stream_argument_decl_list == NULL) {stream_argument_decl_list = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule argument_decl_list"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:210:2: ( ( KW_MAPPED )? fun IDENTIFIER ( argument_decl_list )* SS_EQUAL expr_g -> ^( FUN_DEF ^( FUN_NAME IDENTIFIER ) ^( ARG_EXPR_L ( argument_decl_list )* ) ^( BODY expr_g ) FUN_DEF_END ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:210:4: ( KW_MAPPED )? fun IDENTIFIER ( argument_decl_list )* SS_EQUAL expr_g
        {

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:210:4: ( KW_MAPPED )?
            {
                int alt19=2;
                switch ( LA(1) ) 
                {
                    case KW_MAPPED:
                    	{
                    		alt19=1;
                    	}
                        break;
                }

                switch (alt19) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:210:6: KW_MAPPED
            	    {
            	        KW_MAPPED72 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_MAPPED, &FOLLOW_KW_MAPPED_in_function_def1264); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_MAPPED; stream_KW_MAPPED->add(stream_KW_MAPPED, KW_MAPPED72, NULL); }


            	    }
            	    break;

                }
            }
            FOLLOWPUSH(FOLLOW_fun_in_function_def1269);
            fun73=fun(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_fun; stream_fun->add(stream_fun, fun73.tree, NULL); }
            IDENTIFIER74 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_function_def1271); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER74, NULL); }


            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:210:34: ( argument_decl_list )*

            for (;;)
            {
                int alt20=2;
                switch ( LA(1) ) 
                {
                case IDENTIFIER:
                	{
                		alt20=1;
                	}
                    break;

                }

                switch (alt20) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:210:36: argument_decl_list
            	    {
            	        FOLLOWPUSH(FOLLOW_argument_decl_list_in_function_def1275);
            	        argument_decl_list75=argument_decl_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunction_defEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_argument_decl_list; stream_argument_decl_list->add(stream_argument_decl_list, argument_decl_list75.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop20;	/* break out of the loop */
            	    break;
                }
            }
            loop20: ; /* Jump out to here if this rule does not match */

            SS_EQUAL76 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_EQUAL, &FOLLOW_SS_EQUAL_in_function_def1281); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_EQUAL; stream_SS_EQUAL->add(stream_SS_EQUAL, SS_EQUAL76, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_function_def1283);
            expr_g77=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g77.tree, NULL); }

             
            /* AST REWRITE
             * elements          : IDENTIFIER, argument_decl_list, expr_g
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 211:2: -> ^( FUN_DEF ^( FUN_NAME IDENTIFIER ) ^( ARG_EXPR_L ( argument_decl_list )* ) ^( BODY expr_g ) FUN_DEF_END )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:211:4: ^( FUN_DEF ^( FUN_NAME IDENTIFIER ) ^( ARG_EXPR_L ( argument_decl_list )* ) ^( BODY expr_g ) FUN_DEF_END )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUN_DEF, (pANTLR3_UINT8)"FUN_DEF"), root_1));

            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:211:15: ^( FUN_NAME IDENTIFIER )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUN_NAME, (pANTLR3_UINT8)"FUN_NAME"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:211:38: ^( ARG_EXPR_L ( argument_decl_list )* )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARG_EXPR_L, (pANTLR3_UINT8)"ARG_EXPR_L"), root_2));

            	            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:211:52: ( argument_decl_list )*
            	            {
            	            	while ( (stream_argument_decl_list != NULL && stream_argument_decl_list->hasNext(stream_argument_decl_list))  )
            	            	{
            	            		ADAPTOR->addChild(ADAPTOR, root_2, stream_argument_decl_list == NULL ? NULL : stream_argument_decl_list->nextTree(stream_argument_decl_list));

            	            	}
            	            	if (stream_argument_decl_list != NULL) stream_argument_decl_list->reset(stream_argument_decl_list);

            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:211:78: ^( BODY expr_g )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BODY, (pANTLR3_UINT8)"BODY"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_expr_g == NULL ? NULL : stream_expr_g->nextTree(stream_expr_g));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUN_DEF_END, (pANTLR3_UINT8)"FUN_DEF_END"));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunction_defEx; /* Prevent compiler warnings */
    rulefunction_defEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_MAPPED != NULL) stream_KW_MAPPED->free(stream_KW_MAPPED);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_SS_EQUAL != NULL) stream_SS_EQUAL->free(stream_SS_EQUAL);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
        if (stream_fun != NULL) stream_fun->free(stream_fun);
        if (stream_argument_decl_list != NULL) stream_argument_decl_list->free(stream_argument_decl_list);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(18, function_def_StartIndex); }

    return retval;
}
/* $ANTLR end function_def */

/** 
 * $ANTLR start fun
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:214:1: fun : ( KW_FUNCTION | KW_FN );
 */
static yatgParser_fun_return
fun(pyatgParser ctx)
{   
    yatgParser_fun_return retval;
    ANTLR3_UINT32 fun_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set78;

    pANTLR3_BASE_TREE set78_tree;

    /* Initialize rule variables
     */
    fun_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(19)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    set78       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set78_tree   = NULL;


    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:215:2: ( KW_FUNCTION | KW_FN )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set78=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= KW_FUNCTION) && (LA(1) <= KW_FN)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set78)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_fun0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_fun0);    goto rulefunEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunEx; /* Prevent compiler warnings */
    rulefunEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(19, fun_StartIndex); }

    return retval;
}
/* $ANTLR end fun */

/** 
 * $ANTLR start function_return
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:218:1: function_return : KW_RETURN expr_g -> ^( RETURN expr_g ) ;
 */
static yatgParser_function_return_return
function_return(pyatgParser ctx)
{   
    yatgParser_function_return_return retval;
    ANTLR3_UINT32 function_return_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_RETURN79;
    yatgParser_expr_g_return expr_g80;
    #undef	RETURN_TYPE_expr_g80
    #define	RETURN_TYPE_expr_g80 yatgParser_expr_g_return

    pANTLR3_BASE_TREE KW_RETURN79_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_RETURN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    function_return_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(20)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_RETURN79       = NULL;
    expr_g80.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_RETURN79_tree   = NULL;

    stream_KW_RETURN   = NULL;
    #define CREATE_stream_KW_RETURN  if (stream_KW_RETURN == NULL) {stream_KW_RETURN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_RETURN"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:219:2: ( KW_RETURN expr_g -> ^( RETURN expr_g ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:219:4: KW_RETURN expr_g
        {
            KW_RETURN79 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_RETURN, &FOLLOW_KW_RETURN_in_function_return1348); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_returnEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_RETURN; stream_KW_RETURN->add(stream_KW_RETURN, KW_RETURN79, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_function_return1350);
            expr_g80=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunction_returnEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g80.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expr_g
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 220:2: -> ^( RETURN expr_g )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:220:4: ^( RETURN expr_g )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RETURN, (pANTLR3_UINT8)"RETURN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr_g == NULL ? NULL : stream_expr_g->nextTree(stream_expr_g));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunction_returnEx; /* Prevent compiler warnings */
    rulefunction_returnEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_RETURN != NULL) stream_KW_RETURN->free(stream_KW_RETURN);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(20, function_return_StartIndex); }

    return retval;
}
/* $ANTLR end function_return */

/** 
 * $ANTLR start context_expr
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:223:1: context_expr : context ( SS_COMMA context )* expr_g -> ^( CONTEXT ( context )+ expr_g ) ;
 */
static yatgParser_context_expr_return
context_expr(pyatgParser ctx)
{   
    yatgParser_context_expr_return retval;
    ANTLR3_UINT32 context_expr_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_COMMA82;
    yatgParser_context_return context81;
    #undef	RETURN_TYPE_context81
    #define	RETURN_TYPE_context81 yatgParser_context_return

    yatgParser_context_return context83;
    #undef	RETURN_TYPE_context83
    #define	RETURN_TYPE_context83 yatgParser_context_return

    yatgParser_expr_g_return expr_g84;
    #undef	RETURN_TYPE_expr_g84
    #define	RETURN_TYPE_expr_g84 yatgParser_expr_g_return

    pANTLR3_BASE_TREE SS_COMMA82_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_COMMA;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_context;
    /* Initialize rule variables
     */
    context_expr_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(21)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_COMMA82       = NULL;
    context81.tree = NULL;

    context83.tree = NULL;

    expr_g84.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_COMMA82_tree   = NULL;

    stream_SS_COMMA   = NULL;
    #define CREATE_stream_SS_COMMA  if (stream_SS_COMMA == NULL) {stream_SS_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_COMMA"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }
    stream_context   = NULL;
    #define CREATE_stream_context  if (stream_context == NULL) {stream_context = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule context"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:224:2: ( context ( SS_COMMA context )* expr_g -> ^( CONTEXT ( context )+ expr_g ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:224:4: context ( SS_COMMA context )* expr_g
        {
            FOLLOWPUSH(FOLLOW_context_in_context_expr1370);
            context81=context(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecontext_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_context; stream_context->add(stream_context, context81.tree, NULL); }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:224:13: ( SS_COMMA context )*

            for (;;)
            {
                int alt21=2;
                switch ( LA(1) ) 
                {
                case SS_COMMA:
                	{
                		alt21=1;
                	}
                    break;

                }

                switch (alt21) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:224:14: SS_COMMA context
            	    {
            	        SS_COMMA82 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_context_expr1374); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontext_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA82, NULL); }

            	        FOLLOWPUSH(FOLLOW_context_in_context_expr1376);
            	        context83=context(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontext_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_context; stream_context->add(stream_context, context83.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop21;	/* break out of the loop */
            	    break;
                }
            }
            loop21: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expr_g_in_context_expr1381);
            expr_g84=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecontext_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g84.tree, NULL); }

             
            /* AST REWRITE
             * elements          : context, expr_g
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 225:2: -> ^( CONTEXT ( context )+ expr_g )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:225:4: ^( CONTEXT ( context )+ expr_g )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

            	        if ((stream_context == NULL || !stream_context->hasNext(stream_context))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_context->hasNext(stream_context))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_context == NULL ? NULL : stream_context->nextTree(stream_context));

            	        	}
            	        	stream_context->reset(stream_context);

            	        }ADAPTOR->addChild(ADAPTOR, root_1, stream_expr_g == NULL ? NULL : stream_expr_g->nextTree(stream_expr_g));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontext_exprEx; /* Prevent compiler warnings */
    rulecontext_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_COMMA != NULL) stream_SS_COMMA->free(stream_SS_COMMA);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
        if (stream_context != NULL) stream_context->free(stream_context);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(21, context_expr_StartIndex); }

    return retval;
}
/* $ANTLR end context_expr */

/** 
 * $ANTLR start context
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:228:1: context : ( ( KW_WITH )? KW_ANIMATE logical_expression -> ^( CONTEXT ANIMATE logical_expression ) | KW_AT KW_LEVEL operand -> ^( CONTEXT AT LEVEL operand ) | KW_AT KW_TIME operand -> ^( CONTEXT AT TIME operand ) | KW_IN operand -> ^( CONTEXT EIN operand ) | ( KW_IN )? KW_COORDSYS ( KW_LOCAL -> ^( CONTEXT COORDSYS LOCAL ) | KW_WORLD -> ^( CONTEXT COORDSYS WORLD ) | KW_PARENT -> ^( CONTEXT COORDSYS PARENT ) | operand -> ^( CONTEXT COORDSYS operand ) ) | KW_ABOUT ( KW_PIVOT -> ^( CONTEXT ABOUT PIVOT ) | KW_SELECTION -> ^( CONTEXT ABOUT SELECTION ) | KW_COORDSYS -> ^( CONTEXT ABOUT COORDSYS ) | operand -> ^( CONTEXT ABOUT operand ) ) | ( KW_WITH )? KW_UNDO logical_expression -> ^( CONTEXT UNDO logical_expression ) );
 */
static yatgParser_context_return
context(pyatgParser ctx)
{   
    yatgParser_context_return retval;
    ANTLR3_UINT32 context_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_WITH85;
    pANTLR3_COMMON_TOKEN    KW_ANIMATE86;
    pANTLR3_COMMON_TOKEN    KW_AT88;
    pANTLR3_COMMON_TOKEN    KW_LEVEL89;
    pANTLR3_COMMON_TOKEN    KW_AT91;
    pANTLR3_COMMON_TOKEN    KW_TIME92;
    pANTLR3_COMMON_TOKEN    KW_IN94;
    pANTLR3_COMMON_TOKEN    KW_IN96;
    pANTLR3_COMMON_TOKEN    KW_COORDSYS97;
    pANTLR3_COMMON_TOKEN    KW_LOCAL98;
    pANTLR3_COMMON_TOKEN    KW_WORLD99;
    pANTLR3_COMMON_TOKEN    KW_PARENT100;
    pANTLR3_COMMON_TOKEN    KW_ABOUT102;
    pANTLR3_COMMON_TOKEN    KW_PIVOT103;
    pANTLR3_COMMON_TOKEN    KW_SELECTION104;
    pANTLR3_COMMON_TOKEN    KW_COORDSYS105;
    pANTLR3_COMMON_TOKEN    KW_WITH107;
    pANTLR3_COMMON_TOKEN    KW_UNDO108;
    yatgParser_logical_expression_return logical_expression87;
    #undef	RETURN_TYPE_logical_expression87
    #define	RETURN_TYPE_logical_expression87 yatgParser_logical_expression_return

    yatgParser_operand_return operand90;
    #undef	RETURN_TYPE_operand90
    #define	RETURN_TYPE_operand90 yatgParser_operand_return

    yatgParser_operand_return operand93;
    #undef	RETURN_TYPE_operand93
    #define	RETURN_TYPE_operand93 yatgParser_operand_return

    yatgParser_operand_return operand95;
    #undef	RETURN_TYPE_operand95
    #define	RETURN_TYPE_operand95 yatgParser_operand_return

    yatgParser_operand_return operand101;
    #undef	RETURN_TYPE_operand101
    #define	RETURN_TYPE_operand101 yatgParser_operand_return

    yatgParser_operand_return operand106;
    #undef	RETURN_TYPE_operand106
    #define	RETURN_TYPE_operand106 yatgParser_operand_return

    yatgParser_logical_expression_return logical_expression109;
    #undef	RETURN_TYPE_logical_expression109
    #define	RETURN_TYPE_logical_expression109 yatgParser_logical_expression_return

    pANTLR3_BASE_TREE KW_WITH85_tree;
    pANTLR3_BASE_TREE KW_ANIMATE86_tree;
    pANTLR3_BASE_TREE KW_AT88_tree;
    pANTLR3_BASE_TREE KW_LEVEL89_tree;
    pANTLR3_BASE_TREE KW_AT91_tree;
    pANTLR3_BASE_TREE KW_TIME92_tree;
    pANTLR3_BASE_TREE KW_IN94_tree;
    pANTLR3_BASE_TREE KW_IN96_tree;
    pANTLR3_BASE_TREE KW_COORDSYS97_tree;
    pANTLR3_BASE_TREE KW_LOCAL98_tree;
    pANTLR3_BASE_TREE KW_WORLD99_tree;
    pANTLR3_BASE_TREE KW_PARENT100_tree;
    pANTLR3_BASE_TREE KW_ABOUT102_tree;
    pANTLR3_BASE_TREE KW_PIVOT103_tree;
    pANTLR3_BASE_TREE KW_SELECTION104_tree;
    pANTLR3_BASE_TREE KW_COORDSYS105_tree;
    pANTLR3_BASE_TREE KW_WITH107_tree;
    pANTLR3_BASE_TREE KW_UNDO108_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_TIME;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_LEVEL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_PARENT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_WORLD;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_IN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_SELECTION;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_AT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_COORDSYS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_UNDO;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_LOCAL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_ANIMATE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_WITH;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_PIVOT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_ABOUT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logical_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_operand;
    /* Initialize rule variables
     */
    context_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(22)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_WITH85       = NULL;
    KW_ANIMATE86       = NULL;
    KW_AT88       = NULL;
    KW_LEVEL89       = NULL;
    KW_AT91       = NULL;
    KW_TIME92       = NULL;
    KW_IN94       = NULL;
    KW_IN96       = NULL;
    KW_COORDSYS97       = NULL;
    KW_LOCAL98       = NULL;
    KW_WORLD99       = NULL;
    KW_PARENT100       = NULL;
    KW_ABOUT102       = NULL;
    KW_PIVOT103       = NULL;
    KW_SELECTION104       = NULL;
    KW_COORDSYS105       = NULL;
    KW_WITH107       = NULL;
    KW_UNDO108       = NULL;
    logical_expression87.tree = NULL;

    operand90.tree = NULL;

    operand93.tree = NULL;

    operand95.tree = NULL;

    operand101.tree = NULL;

    operand106.tree = NULL;

    logical_expression109.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_WITH85_tree   = NULL;
    KW_ANIMATE86_tree   = NULL;
    KW_AT88_tree   = NULL;
    KW_LEVEL89_tree   = NULL;
    KW_AT91_tree   = NULL;
    KW_TIME92_tree   = NULL;
    KW_IN94_tree   = NULL;
    KW_IN96_tree   = NULL;
    KW_COORDSYS97_tree   = NULL;
    KW_LOCAL98_tree   = NULL;
    KW_WORLD99_tree   = NULL;
    KW_PARENT100_tree   = NULL;
    KW_ABOUT102_tree   = NULL;
    KW_PIVOT103_tree   = NULL;
    KW_SELECTION104_tree   = NULL;
    KW_COORDSYS105_tree   = NULL;
    KW_WITH107_tree   = NULL;
    KW_UNDO108_tree   = NULL;

    stream_KW_TIME   = NULL;
    #define CREATE_stream_KW_TIME  if (stream_KW_TIME == NULL) {stream_KW_TIME = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_TIME"); } 
    stream_KW_LEVEL   = NULL;
    #define CREATE_stream_KW_LEVEL  if (stream_KW_LEVEL == NULL) {stream_KW_LEVEL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_LEVEL"); } 
    stream_KW_PARENT   = NULL;
    #define CREATE_stream_KW_PARENT  if (stream_KW_PARENT == NULL) {stream_KW_PARENT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_PARENT"); } 
    stream_KW_WORLD   = NULL;
    #define CREATE_stream_KW_WORLD  if (stream_KW_WORLD == NULL) {stream_KW_WORLD = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_WORLD"); } 
    stream_KW_IN   = NULL;
    #define CREATE_stream_KW_IN  if (stream_KW_IN == NULL) {stream_KW_IN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_IN"); } 
    stream_KW_SELECTION   = NULL;
    #define CREATE_stream_KW_SELECTION  if (stream_KW_SELECTION == NULL) {stream_KW_SELECTION = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_SELECTION"); } 
    stream_KW_AT   = NULL;
    #define CREATE_stream_KW_AT  if (stream_KW_AT == NULL) {stream_KW_AT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_AT"); } 
    stream_KW_COORDSYS   = NULL;
    #define CREATE_stream_KW_COORDSYS  if (stream_KW_COORDSYS == NULL) {stream_KW_COORDSYS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_COORDSYS"); } 
    stream_KW_UNDO   = NULL;
    #define CREATE_stream_KW_UNDO  if (stream_KW_UNDO == NULL) {stream_KW_UNDO = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_UNDO"); } 
    stream_KW_LOCAL   = NULL;
    #define CREATE_stream_KW_LOCAL  if (stream_KW_LOCAL == NULL) {stream_KW_LOCAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_LOCAL"); } 
    stream_KW_ANIMATE   = NULL;
    #define CREATE_stream_KW_ANIMATE  if (stream_KW_ANIMATE == NULL) {stream_KW_ANIMATE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_ANIMATE"); } 
    stream_KW_WITH   = NULL;
    #define CREATE_stream_KW_WITH  if (stream_KW_WITH == NULL) {stream_KW_WITH = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_WITH"); } 
    stream_KW_PIVOT   = NULL;
    #define CREATE_stream_KW_PIVOT  if (stream_KW_PIVOT == NULL) {stream_KW_PIVOT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_PIVOT"); } 
    stream_KW_ABOUT   = NULL;
    #define CREATE_stream_KW_ABOUT  if (stream_KW_ABOUT == NULL) {stream_KW_ABOUT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_ABOUT"); } 
    stream_logical_expression   = NULL;
    #define CREATE_stream_logical_expression  if (stream_logical_expression == NULL) {stream_logical_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logical_expression"); }
    stream_operand   = NULL;
    #define CREATE_stream_operand  if (stream_operand == NULL) {stream_operand = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule operand"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:229:2: ( ( KW_WITH )? KW_ANIMATE logical_expression -> ^( CONTEXT ANIMATE logical_expression ) | KW_AT KW_LEVEL operand -> ^( CONTEXT AT LEVEL operand ) | KW_AT KW_TIME operand -> ^( CONTEXT AT TIME operand ) | KW_IN operand -> ^( CONTEXT EIN operand ) | ( KW_IN )? KW_COORDSYS ( KW_LOCAL -> ^( CONTEXT COORDSYS LOCAL ) | KW_WORLD -> ^( CONTEXT COORDSYS WORLD ) | KW_PARENT -> ^( CONTEXT COORDSYS PARENT ) | operand -> ^( CONTEXT COORDSYS operand ) ) | KW_ABOUT ( KW_PIVOT -> ^( CONTEXT ABOUT PIVOT ) | KW_SELECTION -> ^( CONTEXT ABOUT SELECTION ) | KW_COORDSYS -> ^( CONTEXT ABOUT COORDSYS ) | operand -> ^( CONTEXT ABOUT operand ) ) | ( KW_WITH )? KW_UNDO logical_expression -> ^( CONTEXT UNDO logical_expression ) )
            
            ANTLR3_UINT32 alt27;

            alt27=7;

            switch ( LA(1) ) 
            {
            case KW_WITH:
            	{
            		switch ( LA(2) ) 
            		{
            		case KW_ANIMATE:
            			{
            				alt27=1;
            			}
            		    break;
            		case KW_UNDO:
            			{
            				alt27=7;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 1;


            		    goto rulecontextEx;
            		}

            	}
                break;
            case KW_ANIMATE:
            	{
            		alt27=1;
            	}
                break;
            case KW_AT:
            	{
            		switch ( LA(2) ) 
            		{
            		case KW_LEVEL:
            			{
            				alt27=2;
            			}
            		    break;
            		case KW_TIME:
            			{
            				alt27=3;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 3;


            		    goto rulecontextEx;
            		}

            	}
                break;
            case KW_IN:
            	{
            		switch ( LA(2) ) 
            		{
            		case IDENTIFIER:
            		case SS_OPAREN:
            		case SS_MINUS:
            		case SS_OBRACKET:
            		case DIGIT:
            		case HEX_LITERAL:
            		case STRING_LITERIAL:
            		case SS_HASH:
            		case KW_TRUE:
            		case KW_FALSE:
            		case KW_ON:
            		case KW_OFF:
            		case KW_OK:
            		case KW_UNDEFINED:
            		case KW_UNSUPPLIED:
            			{
            				alt27=4;
            			}
            		    break;
            		case KW_COORDSYS:
            			{
            				alt27=5;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 4;


            		    goto rulecontextEx;
            		}

            	}
                break;
            case KW_COORDSYS:
            	{
            		alt27=5;
            	}
                break;
            case KW_ABOUT:
            	{
            		alt27=6;
            	}
                break;
            case KW_UNDO:
            	{
            		alt27=7;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 27;
                EXCEPTION->state        = 0;


                goto rulecontextEx;
            }

            switch (alt27) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:229:4: ( KW_WITH )? KW_ANIMATE logical_expression
        	    {

        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:229:4: ( KW_WITH )?
        	        {
        	            int alt22=2;
        	            switch ( LA(1) ) 
        	            {
        	                case KW_WITH:
        	                	{
        	                		alt22=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt22) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:229:5: KW_WITH
        	        	    {
        	        	        KW_WITH85 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_WITH, &FOLLOW_KW_WITH_in_context1405); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_WITH; stream_KW_WITH->add(stream_KW_WITH, KW_WITH85, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        KW_ANIMATE86 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_ANIMATE, &FOLLOW_KW_ANIMATE_in_context1409); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_ANIMATE; stream_KW_ANIMATE->add(stream_KW_ANIMATE, KW_ANIMATE86, NULL); }

        	        FOLLOWPUSH(FOLLOW_logical_expression_in_context1411);
        	        logical_expression87=logical_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_logical_expression; stream_logical_expression->add(stream_logical_expression, logical_expression87.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : logical_expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 229:45: -> ^( CONTEXT ANIMATE logical_expression )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:229:47: ^( CONTEXT ANIMATE logical_expression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ANIMATE, (pANTLR3_UINT8)"ANIMATE"));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logical_expression == NULL ? NULL : stream_logical_expression->nextTree(stream_logical_expression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:230:4: KW_AT KW_LEVEL operand
        	    {
        	        KW_AT88 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_AT, &FOLLOW_KW_AT_in_context1426); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_AT; stream_KW_AT->add(stream_KW_AT, KW_AT88, NULL); }

        	        KW_LEVEL89 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_LEVEL, &FOLLOW_KW_LEVEL_in_context1428); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_LEVEL; stream_KW_LEVEL->add(stream_KW_LEVEL, KW_LEVEL89, NULL); }

        	        FOLLOWPUSH(FOLLOW_operand_in_context1430);
        	        operand90=operand(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_operand; stream_operand->add(stream_operand, operand90.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : operand
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 230:27: -> ^( CONTEXT AT LEVEL operand )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:230:29: ^( CONTEXT AT LEVEL operand )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AT, (pANTLR3_UINT8)"AT"));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEVEL, (pANTLR3_UINT8)"LEVEL"));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_operand == NULL ? NULL : stream_operand->nextTree(stream_operand));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:231:4: KW_AT KW_TIME operand
        	    {
        	        KW_AT91 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_AT, &FOLLOW_KW_AT_in_context1446); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_AT; stream_KW_AT->add(stream_KW_AT, KW_AT91, NULL); }

        	        KW_TIME92 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_TIME, &FOLLOW_KW_TIME_in_context1448); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_TIME; stream_KW_TIME->add(stream_KW_TIME, KW_TIME92, NULL); }

        	        FOLLOWPUSH(FOLLOW_operand_in_context1450);
        	        operand93=operand(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_operand; stream_operand->add(stream_operand, operand93.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : operand
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 231:26: -> ^( CONTEXT AT TIME operand )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:231:28: ^( CONTEXT AT TIME operand )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AT, (pANTLR3_UINT8)"AT"));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TIME, (pANTLR3_UINT8)"TIME"));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_operand == NULL ? NULL : stream_operand->nextTree(stream_operand));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:232:4: KW_IN operand
        	    {
        	        KW_IN94 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_IN, &FOLLOW_KW_IN_in_context1466); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_IN; stream_KW_IN->add(stream_KW_IN, KW_IN94, NULL); }

        	        FOLLOWPUSH(FOLLOW_operand_in_context1468);
        	        operand95=operand(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_operand; stream_operand->add(stream_operand, operand95.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : operand
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 232:18: -> ^( CONTEXT EIN operand )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:232:20: ^( CONTEXT EIN operand )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EIN, (pANTLR3_UINT8)"EIN"));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_operand == NULL ? NULL : stream_operand->nextTree(stream_operand));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:233:4: ( KW_IN )? KW_COORDSYS ( KW_LOCAL -> ^( CONTEXT COORDSYS LOCAL ) | KW_WORLD -> ^( CONTEXT COORDSYS WORLD ) | KW_PARENT -> ^( CONTEXT COORDSYS PARENT ) | operand -> ^( CONTEXT COORDSYS operand ) )
        	    {

        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:233:4: ( KW_IN )?
        	        {
        	            int alt23=2;
        	            switch ( LA(1) ) 
        	            {
        	                case KW_IN:
        	                	{
        	                		alt23=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt23) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:233:5: KW_IN
        	        	    {
        	        	        KW_IN96 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_IN, &FOLLOW_KW_IN_in_context1483); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_IN; stream_KW_IN->add(stream_KW_IN, KW_IN96, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        KW_COORDSYS97 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_COORDSYS, &FOLLOW_KW_COORDSYS_in_context1487); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_COORDSYS; stream_KW_COORDSYS->add(stream_KW_COORDSYS, KW_COORDSYS97, NULL); }


        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:234:3: ( KW_LOCAL -> ^( CONTEXT COORDSYS LOCAL ) | KW_WORLD -> ^( CONTEXT COORDSYS WORLD ) | KW_PARENT -> ^( CONTEXT COORDSYS PARENT ) | operand -> ^( CONTEXT COORDSYS operand ) )
        	        {
        	            int alt24=4;
        	            switch ( LA(1) ) 
        	            {
        	            case KW_LOCAL:
        	            	{
        	            		alt24=1;
        	            	}
        	                break;
        	            case KW_WORLD:
        	            	{
        	            		alt24=2;
        	            	}
        	                break;
        	            case KW_PARENT:
        	            	{
        	            		alt24=3;
        	            	}
        	                break;
        	            case IDENTIFIER:
        	            case SS_OPAREN:
        	            case SS_MINUS:
        	            case SS_OBRACKET:
        	            case DIGIT:
        	            case HEX_LITERAL:
        	            case STRING_LITERIAL:
        	            case SS_HASH:
        	            case KW_TRUE:
        	            case KW_FALSE:
        	            case KW_ON:
        	            case KW_OFF:
        	            case KW_OK:
        	            case KW_UNDEFINED:
        	            case KW_UNSUPPLIED:
        	            	{
        	            		alt24=4;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 24;
        	                EXCEPTION->state        = 0;


        	                goto rulecontextEx;
        	            }

        	            switch (alt24) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:235:4: KW_LOCAL
        	        	    {
        	        	        KW_LOCAL98 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_LOCAL, &FOLLOW_KW_LOCAL_in_context1497); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_LOCAL; stream_KW_LOCAL->add(stream_KW_LOCAL, KW_LOCAL98, NULL); }


        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : 
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 235:14: -> ^( CONTEXT COORDSYS LOCAL )
        	        	        	{
        	        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:235:16: ^( CONTEXT COORDSYS LOCAL )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COORDSYS, (pANTLR3_UINT8)"COORDSYS"));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LOCAL, (pANTLR3_UINT8)"LOCAL"));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:236:6: KW_WORLD
        	        	    {
        	        	        KW_WORLD99 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_WORLD, &FOLLOW_KW_WORLD_in_context1515); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_WORLD; stream_KW_WORLD->add(stream_KW_WORLD, KW_WORLD99, NULL); }


        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : 
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 236:15: -> ^( CONTEXT COORDSYS WORLD )
        	        	        	{
        	        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:236:17: ^( CONTEXT COORDSYS WORLD )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COORDSYS, (pANTLR3_UINT8)"COORDSYS"));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WORLD, (pANTLR3_UINT8)"WORLD"));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:237:6: KW_PARENT
        	        	    {
        	        	        KW_PARENT100 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_PARENT, &FOLLOW_KW_PARENT_in_context1532); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_PARENT; stream_KW_PARENT->add(stream_KW_PARENT, KW_PARENT100, NULL); }


        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : 
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 237:17: -> ^( CONTEXT COORDSYS PARENT )
        	        	        	{
        	        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:237:19: ^( CONTEXT COORDSYS PARENT )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COORDSYS, (pANTLR3_UINT8)"COORDSYS"));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PARENT, (pANTLR3_UINT8)"PARENT"));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:238:6: operand
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_operand_in_context1549);
        	        	        operand101=operand(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_operand; stream_operand->add(stream_operand, operand101.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : operand
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 238:15: -> ^( CONTEXT COORDSYS operand )
        	        	        	{
        	        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:238:17: ^( CONTEXT COORDSYS operand )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COORDSYS, (pANTLR3_UINT8)"COORDSYS"));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_operand == NULL ? NULL : stream_operand->nextTree(stream_operand));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 6:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:240:4: KW_ABOUT ( KW_PIVOT -> ^( CONTEXT ABOUT PIVOT ) | KW_SELECTION -> ^( CONTEXT ABOUT SELECTION ) | KW_COORDSYS -> ^( CONTEXT ABOUT COORDSYS ) | operand -> ^( CONTEXT ABOUT operand ) )
        	    {
        	        KW_ABOUT102 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_ABOUT, &FOLLOW_KW_ABOUT_in_context1570); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_ABOUT; stream_KW_ABOUT->add(stream_KW_ABOUT, KW_ABOUT102, NULL); }


        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:241:3: ( KW_PIVOT -> ^( CONTEXT ABOUT PIVOT ) | KW_SELECTION -> ^( CONTEXT ABOUT SELECTION ) | KW_COORDSYS -> ^( CONTEXT ABOUT COORDSYS ) | operand -> ^( CONTEXT ABOUT operand ) )
        	        {
        	            int alt25=4;
        	            switch ( LA(1) ) 
        	            {
        	            case KW_PIVOT:
        	            	{
        	            		alt25=1;
        	            	}
        	                break;
        	            case KW_SELECTION:
        	            	{
        	            		alt25=2;
        	            	}
        	                break;
        	            case KW_COORDSYS:
        	            	{
        	            		alt25=3;
        	            	}
        	                break;
        	            case IDENTIFIER:
        	            case SS_OPAREN:
        	            case SS_MINUS:
        	            case SS_OBRACKET:
        	            case DIGIT:
        	            case HEX_LITERAL:
        	            case STRING_LITERIAL:
        	            case SS_HASH:
        	            case KW_TRUE:
        	            case KW_FALSE:
        	            case KW_ON:
        	            case KW_OFF:
        	            case KW_OK:
        	            case KW_UNDEFINED:
        	            case KW_UNSUPPLIED:
        	            	{
        	            		alt25=4;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 25;
        	                EXCEPTION->state        = 0;


        	                goto rulecontextEx;
        	            }

        	            switch (alt25) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:241:5: KW_PIVOT
        	        	    {
        	        	        KW_PIVOT103 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_PIVOT, &FOLLOW_KW_PIVOT_in_context1577); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_PIVOT; stream_KW_PIVOT->add(stream_KW_PIVOT, KW_PIVOT103, NULL); }


        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : 
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 241:14: -> ^( CONTEXT ABOUT PIVOT )
        	        	        	{
        	        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:241:16: ^( CONTEXT ABOUT PIVOT )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ABOUT, (pANTLR3_UINT8)"ABOUT"));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PIVOT, (pANTLR3_UINT8)"PIVOT"));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:242:5: KW_SELECTION
        	        	    {
        	        	        KW_SELECTION104 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_SELECTION, &FOLLOW_KW_SELECTION_in_context1593); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_SELECTION; stream_KW_SELECTION->add(stream_KW_SELECTION, KW_SELECTION104, NULL); }


        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : 
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 242:19: -> ^( CONTEXT ABOUT SELECTION )
        	        	        	{
        	        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:242:21: ^( CONTEXT ABOUT SELECTION )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ABOUT, (pANTLR3_UINT8)"ABOUT"));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SELECTION, (pANTLR3_UINT8)"SELECTION"));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:243:5: KW_COORDSYS
        	        	    {
        	        	        KW_COORDSYS105 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_COORDSYS, &FOLLOW_KW_COORDSYS_in_context1609); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_COORDSYS; stream_KW_COORDSYS->add(stream_KW_COORDSYS, KW_COORDSYS105, NULL); }


        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : 
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 243:18: -> ^( CONTEXT ABOUT COORDSYS )
        	        	        	{
        	        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:243:20: ^( CONTEXT ABOUT COORDSYS )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ABOUT, (pANTLR3_UINT8)"ABOUT"));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COORDSYS, (pANTLR3_UINT8)"COORDSYS"));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:244:5: operand
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_operand_in_context1625);
        	        	        operand106=operand(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_operand; stream_operand->add(stream_operand, operand106.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : operand
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 244:14: -> ^( CONTEXT ABOUT operand )
        	        	        	{
        	        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:244:16: ^( CONTEXT ABOUT operand )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ABOUT, (pANTLR3_UINT8)"ABOUT"));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_operand == NULL ? NULL : stream_operand->nextTree(stream_operand));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 7:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:246:4: ( KW_WITH )? KW_UNDO logical_expression
        	    {

        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:246:4: ( KW_WITH )?
        	        {
        	            int alt26=2;
        	            switch ( LA(1) ) 
        	            {
        	                case KW_WITH:
        	                	{
        	                		alt26=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt26) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:246:6: KW_WITH
        	        	    {
        	        	        KW_WITH107 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_WITH, &FOLLOW_KW_WITH_in_context1646); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_WITH; stream_KW_WITH->add(stream_KW_WITH, KW_WITH107, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        KW_UNDO108 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_UNDO, &FOLLOW_KW_UNDO_in_context1651); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_KW_UNDO; stream_KW_UNDO->add(stream_KW_UNDO, KW_UNDO108, NULL); }

        	        FOLLOWPUSH(FOLLOW_logical_expression_in_context1653);
        	        logical_expression109=logical_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_logical_expression; stream_logical_expression->add(stream_logical_expression, logical_expression109.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : logical_expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 246:44: -> ^( CONTEXT UNDO logical_expression )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:246:46: ^( CONTEXT UNDO logical_expression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTEXT, (pANTLR3_UINT8)"CONTEXT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNDO, (pANTLR3_UINT8)"UNDO"));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logical_expression == NULL ? NULL : stream_logical_expression->nextTree(stream_logical_expression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecontextEx; /* Prevent compiler warnings */
    rulecontextEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_TIME != NULL) stream_KW_TIME->free(stream_KW_TIME);
        if (stream_KW_LEVEL != NULL) stream_KW_LEVEL->free(stream_KW_LEVEL);
        if (stream_KW_PARENT != NULL) stream_KW_PARENT->free(stream_KW_PARENT);
        if (stream_KW_WORLD != NULL) stream_KW_WORLD->free(stream_KW_WORLD);
        if (stream_KW_IN != NULL) stream_KW_IN->free(stream_KW_IN);
        if (stream_KW_SELECTION != NULL) stream_KW_SELECTION->free(stream_KW_SELECTION);
        if (stream_KW_AT != NULL) stream_KW_AT->free(stream_KW_AT);
        if (stream_KW_COORDSYS != NULL) stream_KW_COORDSYS->free(stream_KW_COORDSYS);
        if (stream_KW_UNDO != NULL) stream_KW_UNDO->free(stream_KW_UNDO);
        if (stream_KW_LOCAL != NULL) stream_KW_LOCAL->free(stream_KW_LOCAL);
        if (stream_KW_ANIMATE != NULL) stream_KW_ANIMATE->free(stream_KW_ANIMATE);
        if (stream_KW_WITH != NULL) stream_KW_WITH->free(stream_KW_WITH);
        if (stream_KW_PIVOT != NULL) stream_KW_PIVOT->free(stream_KW_PIVOT);
        if (stream_KW_ABOUT != NULL) stream_KW_ABOUT->free(stream_KW_ABOUT);
        if (stream_logical_expression != NULL) stream_logical_expression->free(stream_logical_expression);
        if (stream_operand != NULL) stream_operand->free(stream_operand);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(22, context_StartIndex); }

    return retval;
}
/* $ANTLR end context */

/** 
 * $ANTLR start set_context
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:249:1: set_context : KW_SET context -> ^( SET context ) ;
 */
static yatgParser_set_context_return
set_context(pyatgParser ctx)
{   
    yatgParser_set_context_return retval;
    ANTLR3_UINT32 set_context_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_SET110;
    yatgParser_context_return context111;
    #undef	RETURN_TYPE_context111
    #define	RETURN_TYPE_context111 yatgParser_context_return

    pANTLR3_BASE_TREE KW_SET110_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_SET;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_context;
    /* Initialize rule variables
     */
    set_context_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(23)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    KW_SET110       = NULL;
    context111.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    KW_SET110_tree   = NULL;

    stream_KW_SET   = NULL;
    #define CREATE_stream_KW_SET  if (stream_KW_SET == NULL) {stream_KW_SET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_SET"); } 
    stream_context   = NULL;
    #define CREATE_stream_context  if (stream_context == NULL) {stream_context = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule context"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:250:2: ( KW_SET context -> ^( SET context ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:250:4: KW_SET context
        {
            KW_SET110 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_SET, &FOLLOW_KW_SET_in_set_context1676); 
            if  (HASEXCEPTION())
            {
                goto ruleset_contextEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_KW_SET; stream_KW_SET->add(stream_KW_SET, KW_SET110, NULL); }

            FOLLOWPUSH(FOLLOW_context_in_set_context1678);
            context111=context(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleset_contextEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_context; stream_context->add(stream_context, context111.tree, NULL); }

             
            /* AST REWRITE
             * elements          : context
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 251:2: -> ^( SET context )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:251:4: ^( SET context )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SET, (pANTLR3_UINT8)"SET"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_context == NULL ? NULL : stream_context->nextTree(stream_context));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleset_contextEx; /* Prevent compiler warnings */
    ruleset_contextEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_SET != NULL) stream_KW_SET->free(stream_KW_SET);
        if (stream_context != NULL) stream_context->free(stream_context);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(23, set_context_StartIndex); }

    return retval;
}
/* $ANTLR end set_context */

/** 
 * $ANTLR start math_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:257:1: math_expression : additive_expression ;
 */
static yatgParser_math_expression_return
math_expression(pyatgParser ctx)
{   
    yatgParser_math_expression_return retval;
    ANTLR3_UINT32 math_expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    yatgParser_additive_expression_return additive_expression112;
    #undef	RETURN_TYPE_additive_expression112
    #define	RETURN_TYPE_additive_expression112 yatgParser_additive_expression_return


    /* Initialize rule variables
     */
    math_expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(24)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    additive_expression112.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:258:2: ( additive_expression )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:258:4: additive_expression
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_additive_expression_in_math_expression1701);
            additive_expression112=additive_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemath_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, additive_expression112.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemath_expressionEx; /* Prevent compiler warnings */
    rulemath_expressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(24, math_expression_StartIndex); }

    return retval;
}
/* $ANTLR end math_expression */

/** 
 * $ANTLR start additive_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:261:1: additive_expression : ( multiplicative_expression ) ( ( SS_PLUS | SS_MINUS ) multiplicative_expression )* ;
 */
static yatgParser_additive_expression_return
additive_expression(pyatgParser ctx)
{   
    yatgParser_additive_expression_return retval;
    ANTLR3_UINT32 additive_expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set114;
    yatgParser_multiplicative_expression_return multiplicative_expression113;
    #undef	RETURN_TYPE_multiplicative_expression113
    #define	RETURN_TYPE_multiplicative_expression113 yatgParser_multiplicative_expression_return

    yatgParser_multiplicative_expression_return multiplicative_expression115;
    #undef	RETURN_TYPE_multiplicative_expression115
    #define	RETURN_TYPE_multiplicative_expression115 yatgParser_multiplicative_expression_return

    pANTLR3_BASE_TREE set114_tree;

    /* Initialize rule variables
     */
    additive_expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(25)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    set114       = NULL;
    multiplicative_expression113.tree = NULL;

    multiplicative_expression115.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    set114_tree   = NULL;


    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:262:2: ( ( multiplicative_expression ) ( ( SS_PLUS | SS_MINUS ) multiplicative_expression )* )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:262:4: ( multiplicative_expression ) ( ( SS_PLUS | SS_MINUS ) multiplicative_expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:262:4: ( multiplicative_expression )
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:262:5: multiplicative_expression
            {
                FOLLOWPUSH(FOLLOW_multiplicative_expression_in_additive_expression1713);
                multiplicative_expression113=multiplicative_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadditive_expressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, multiplicative_expression113.tree);

            }


            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:262:32: ( ( SS_PLUS | SS_MINUS ) multiplicative_expression )*

            for (;;)
            {
                int alt28=2;
                switch ( LA(1) ) 
                {
                case SS_MINUS:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA28_20 = LA(2);
                		    if ( (synpred53_yatg(ctx)) ) 
                		    {
                		        alt28=1;
                		    }

                		}
                	}
                    break;
                case SS_PLUS:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA28_56 = LA(2);
                		    if ( (synpred53_yatg(ctx)) ) 
                		    {
                		        alt28=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt28) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:262:33: ( SS_PLUS | SS_MINUS ) multiplicative_expression
            	    {
            	        set114=(pANTLR3_COMMON_TOKEN)LT(1);
            	        set114=(pANTLR3_COMMON_TOKEN)LT(1);
            	        if ( ((LA(1) >= SS_PLUS) && (LA(1) <= SS_MINUS)) )
            	        {
            	            CONSUME();
            	            if ( BACKTRACKING==0 ) root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set114)), root_0));
            	            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else 
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return retval;
            	            }
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = &FOLLOW_set_in_additive_expression1717;
            	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_additive_expression1717);    goto ruleadditive_expressionEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_multiplicative_expression_in_additive_expression1724);
            	        multiplicative_expression115=multiplicative_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditive_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, multiplicative_expression115.tree);

            	    }
            	    break;

            	default:
            	    goto loop28;	/* break out of the loop */
            	    break;
                }
            }
            loop28: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditive_expressionEx; /* Prevent compiler warnings */
    ruleadditive_expressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(25, additive_expression_StartIndex); }

    return retval;
}
/* $ANTLR end additive_expression */

/** 
 * $ANTLR start multiplicative_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:265:1: multiplicative_expression : ( unary_expression ) ( ( SS_STAR | SS_FSLASH | SS_PERCENT ) unary_expression )* ;
 */
static yatgParser_multiplicative_expression_return
multiplicative_expression(pyatgParser ctx)
{   
    yatgParser_multiplicative_expression_return retval;
    ANTLR3_UINT32 multiplicative_expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set117;
    yatgParser_unary_expression_return unary_expression116;
    #undef	RETURN_TYPE_unary_expression116
    #define	RETURN_TYPE_unary_expression116 yatgParser_unary_expression_return

    yatgParser_unary_expression_return unary_expression118;
    #undef	RETURN_TYPE_unary_expression118
    #define	RETURN_TYPE_unary_expression118 yatgParser_unary_expression_return

    pANTLR3_BASE_TREE set117_tree;

    /* Initialize rule variables
     */
    multiplicative_expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(26)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    set117       = NULL;
    unary_expression116.tree = NULL;

    unary_expression118.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    set117_tree   = NULL;


    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:266:2: ( ( unary_expression ) ( ( SS_STAR | SS_FSLASH | SS_PERCENT ) unary_expression )* )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:266:4: ( unary_expression ) ( ( SS_STAR | SS_FSLASH | SS_PERCENT ) unary_expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:266:4: ( unary_expression )
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:266:5: unary_expression
            {
                FOLLOWPUSH(FOLLOW_unary_expression_in_multiplicative_expression1739);
                unary_expression116=unary_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicative_expressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression116.tree);

            }


            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:266:23: ( ( SS_STAR | SS_FSLASH | SS_PERCENT ) unary_expression )*

            for (;;)
            {
                int alt29=2;
                switch ( LA(1) ) 
                {
                case SS_STAR:
                case SS_FSLASH:
                case SS_PERCENT:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA29_56 = LA(2);
                		    if ( (synpred56_yatg(ctx)) ) 
                		    {
                		        alt29=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt29) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:266:24: ( SS_STAR | SS_FSLASH | SS_PERCENT ) unary_expression
            	    {
            	        set117=(pANTLR3_COMMON_TOKEN)LT(1);
            	        set117=(pANTLR3_COMMON_TOKEN)LT(1);
            	        if ( ((LA(1) >= SS_STAR) && (LA(1) <= SS_PERCENT)) )
            	        {
            	            CONSUME();
            	            if ( BACKTRACKING==0 ) root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set117)), root_0));
            	            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else 
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return retval;
            	            }
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = &FOLLOW_set_in_multiplicative_expression1743;
            	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_multiplicative_expression1743);    goto rulemultiplicative_expressionEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_unary_expression_in_multiplicative_expression1752);
            	        unary_expression118=unary_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicative_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression118.tree);

            	    }
            	    break;

            	default:
            	    goto loop29;	/* break out of the loop */
            	    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicative_expressionEx; /* Prevent compiler warnings */
    rulemultiplicative_expressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(26, multiplicative_expression_StartIndex); }

    return retval;
}
/* $ANTLR end multiplicative_expression */

/** 
 * $ANTLR start argT
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:269:1: argT : IDENTIFIER ( SS_COLON operand )? -> ^( IDENTIFIER ( operand )? ) ;
 */
static yatgParser_argT_return
argT(pyatgParser ctx)
{   
    yatgParser_argT_return retval;
    ANTLR3_UINT32 argT_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENTIFIER119;
    pANTLR3_COMMON_TOKEN    SS_COLON120;
    yatgParser_operand_return operand121;
    #undef	RETURN_TYPE_operand121
    #define	RETURN_TYPE_operand121 yatgParser_operand_return

    pANTLR3_BASE_TREE IDENTIFIER119_tree;
    pANTLR3_BASE_TREE SS_COLON120_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_COLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_operand;
    /* Initialize rule variables
     */
    argT_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(27)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    IDENTIFIER119       = NULL;
    SS_COLON120       = NULL;
    operand121.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENTIFIER119_tree   = NULL;
    SS_COLON120_tree   = NULL;

    stream_SS_COLON   = NULL;
    #define CREATE_stream_SS_COLON  if (stream_SS_COLON == NULL) {stream_SS_COLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_COLON"); } 
    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_operand   = NULL;
    #define CREATE_stream_operand  if (stream_operand == NULL) {stream_operand = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule operand"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:269:6: ( IDENTIFIER ( SS_COLON operand )? -> ^( IDENTIFIER ( operand )? ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:269:7: IDENTIFIER ( SS_COLON operand )?
        {
            IDENTIFIER119 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_argT1764); 
            if  (HASEXCEPTION())
            {
                goto ruleargTEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER119, NULL); }


            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:269:18: ( SS_COLON operand )?
            {
                int alt30=2;
                switch ( LA(1) ) 
                {
                    case SS_COLON:
                    	{
                    		alt30=1;
                    	}
                        break;
                }

                switch (alt30) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:269:19: SS_COLON operand
            	    {
            	        SS_COLON120 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COLON, &FOLLOW_SS_COLON_in_argT1767); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargTEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_COLON; stream_SS_COLON->add(stream_SS_COLON, SS_COLON120, NULL); }

            	        FOLLOWPUSH(FOLLOW_operand_in_argT1769);
            	        operand121=operand(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargTEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_operand; stream_operand->add(stream_operand, operand121.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : IDENTIFIER, operand
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 270:2: -> ^( IDENTIFIER ( operand )? )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:270:4: ^( IDENTIFIER ( operand )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER), root_1));

            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:270:18: ( operand )?
            	        {
            	        	if ( (stream_operand != NULL && stream_operand->hasNext(stream_operand))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_operand == NULL ? NULL : stream_operand->nextTree(stream_operand));

            	        	}
            	        	if ( stream_operand != NULL) stream_operand->reset(stream_operand);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargTEx; /* Prevent compiler warnings */
    ruleargTEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_COLON != NULL) stream_SS_COLON->free(stream_SS_COLON);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_operand != NULL) stream_operand->free(stream_operand);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(27, argT_StartIndex); }

    return retval;
}
/* $ANTLR end argT */

/** 
 * $ANTLR start argument_decl_list
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:273:1: argument_decl_list : argT ( SS_COMMA argT )* -> ( argT )+ ;
 */
static yatgParser_argument_decl_list_return
argument_decl_list(pyatgParser ctx)
{   
    yatgParser_argument_decl_list_return retval;
    ANTLR3_UINT32 argument_decl_list_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_COMMA123;
    yatgParser_argT_return argT122;
    #undef	RETURN_TYPE_argT122
    #define	RETURN_TYPE_argT122 yatgParser_argT_return

    yatgParser_argT_return argT124;
    #undef	RETURN_TYPE_argT124
    #define	RETURN_TYPE_argT124 yatgParser_argT_return

    pANTLR3_BASE_TREE SS_COMMA123_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_COMMA;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_argT;
    /* Initialize rule variables
     */
    argument_decl_list_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(28)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_COMMA123       = NULL;
    argT122.tree = NULL;

    argT124.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_COMMA123_tree   = NULL;

    stream_SS_COMMA   = NULL;
    #define CREATE_stream_SS_COMMA  if (stream_SS_COMMA == NULL) {stream_SS_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_COMMA"); } 
    stream_argT   = NULL;
    #define CREATE_stream_argT  if (stream_argT == NULL) {stream_argT = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule argT"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:274:2: ( argT ( SS_COMMA argT )* -> ( argT )+ )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:274:5: argT ( SS_COMMA argT )*
        {
            FOLLOWPUSH(FOLLOW_argT_in_argument_decl_list1797);
            argT122=argT(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleargument_decl_listEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_argT; stream_argT->add(stream_argT, argT122.tree, NULL); }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:274:10: ( SS_COMMA argT )*

            for (;;)
            {
                int alt31=2;
                switch ( LA(1) ) 
                {
                case SS_COMMA:
                	{
                		alt31=1;
                	}
                    break;

                }

                switch (alt31) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:274:12: SS_COMMA argT
            	    {
            	        SS_COMMA123 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_argument_decl_list1801); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargument_decl_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA123, NULL); }

            	        FOLLOWPUSH(FOLLOW_argT_in_argument_decl_list1803);
            	        argT124=argT(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargument_decl_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_argT; stream_argT->add(stream_argT, argT124.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : argT
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 275:2: -> ( argT )+
            	{
            	    if ((stream_argT == NULL || !stream_argT->hasNext(stream_argT))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_argT->hasNext(stream_argT))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_argT == NULL ? NULL : stream_argT->nextTree(stream_argT));

            	    	}
            	    	stream_argT->reset(stream_argT);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargument_decl_listEx; /* Prevent compiler warnings */
    ruleargument_decl_listEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_COMMA != NULL) stream_SS_COMMA->free(stream_SS_COMMA);
        if (stream_argT != NULL) stream_argT->free(stream_argT);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(28, argument_decl_list_StartIndex); }

    return retval;
}
/* $ANTLR end argument_decl_list */

/** 
 * $ANTLR start argument_expression_list
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:278:1: argument_expression_list : expr_g ( SS_COMMA expr_g )* -> ( expr_g )+ ;
 */
static yatgParser_argument_expression_list_return
argument_expression_list(pyatgParser ctx)
{   
    yatgParser_argument_expression_list_return retval;
    ANTLR3_UINT32 argument_expression_list_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_COMMA126;
    yatgParser_expr_g_return expr_g125;
    #undef	RETURN_TYPE_expr_g125
    #define	RETURN_TYPE_expr_g125 yatgParser_expr_g_return

    yatgParser_expr_g_return expr_g127;
    #undef	RETURN_TYPE_expr_g127
    #define	RETURN_TYPE_expr_g127 yatgParser_expr_g_return

    pANTLR3_BASE_TREE SS_COMMA126_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_COMMA;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    argument_expression_list_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(29)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_COMMA126       = NULL;
    expr_g125.tree = NULL;

    expr_g127.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_COMMA126_tree   = NULL;

    stream_SS_COMMA   = NULL;
    #define CREATE_stream_SS_COMMA  if (stream_SS_COMMA == NULL) {stream_SS_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_COMMA"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:279:2: ( expr_g ( SS_COMMA expr_g )* -> ( expr_g )+ )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:279:4: expr_g ( SS_COMMA expr_g )*
        {
            FOLLOWPUSH(FOLLOW_expr_g_in_argument_expression_list1824);
            expr_g125=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleargument_expression_listEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g125.tree, NULL); }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:279:11: ( SS_COMMA expr_g )*

            for (;;)
            {
                int alt32=2;
                switch ( LA(1) ) 
                {
                case SS_COMMA:
                	{
                		alt32=1;
                	}
                    break;

                }

                switch (alt32) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:279:13: SS_COMMA expr_g
            	    {
            	        SS_COMMA126 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_argument_expression_list1828); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargument_expression_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA126, NULL); }

            	        FOLLOWPUSH(FOLLOW_expr_g_in_argument_expression_list1830);
            	        expr_g127=expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargument_expression_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g127.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop32;	/* break out of the loop */
            	    break;
                }
            }
            loop32: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : expr_g
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 280:2: -> ( expr_g )+
            	{
            	    if ((stream_expr_g == NULL || !stream_expr_g->hasNext(stream_expr_g))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_expr_g->hasNext(stream_expr_g))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_expr_g == NULL ? NULL : stream_expr_g->nextTree(stream_expr_g));

            	    	}
            	    	stream_expr_g->reset(stream_expr_g);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargument_expression_listEx; /* Prevent compiler warnings */
    ruleargument_expression_listEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_COMMA != NULL) stream_SS_COMMA->free(stream_SS_COMMA);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(29, argument_expression_list_StartIndex); }

    return retval;
}
/* $ANTLR end argument_expression_list */

/** 
 * $ANTLR start unary_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:283:1: unary_expression : operand ;
 */
static yatgParser_unary_expression_return
unary_expression(pyatgParser ctx)
{   
    yatgParser_unary_expression_return retval;
    ANTLR3_UINT32 unary_expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    yatgParser_operand_return operand128;
    #undef	RETURN_TYPE_operand128
    #define	RETURN_TYPE_operand128 yatgParser_operand_return


    /* Initialize rule variables
     */
    unary_expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(30)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    operand128.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:284:2: ( operand )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:284:4: operand
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_operand_in_unary_expression1850);
            operand128=operand(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleunary_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, operand128.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunary_expressionEx; /* Prevent compiler warnings */
    ruleunary_expressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(30, unary_expression_StartIndex); }

    return retval;
}
/* $ANTLR end unary_expression */

/** 
 * $ANTLR start operand
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:286:1: operand : ( IDENTIFIER ( operand_op )* -> ^( OPERAND IDENTIFIER ( operand_op )* ID_MORE ) | constant );
 */
static yatgParser_operand_return
operand(pyatgParser ctx)
{   
    yatgParser_operand_return retval;
    ANTLR3_UINT32 operand_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENTIFIER129;
    yatgParser_operand_op_return operand_op130;
    #undef	RETURN_TYPE_operand_op130
    #define	RETURN_TYPE_operand_op130 yatgParser_operand_op_return

    yatgParser_constant_return constant131;
    #undef	RETURN_TYPE_constant131
    #define	RETURN_TYPE_constant131 yatgParser_constant_return

    pANTLR3_BASE_TREE IDENTIFIER129_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_operand_op;
    /* Initialize rule variables
     */
    operand_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(31)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    IDENTIFIER129       = NULL;
    operand_op130.tree = NULL;

    constant131.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENTIFIER129_tree   = NULL;

    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_operand_op   = NULL;
    #define CREATE_stream_operand_op  if (stream_operand_op == NULL) {stream_operand_op = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule operand_op"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:287:2: ( IDENTIFIER ( operand_op )* -> ^( OPERAND IDENTIFIER ( operand_op )* ID_MORE ) | constant )
            
            ANTLR3_UINT32 alt34;

            alt34=2;

            switch ( LA(1) ) 
            {
            case IDENTIFIER:
            	{
            		alt34=1;
            	}
                break;
            case SS_OPAREN:
            case SS_MINUS:
            case SS_OBRACKET:
            case DIGIT:
            case HEX_LITERAL:
            case STRING_LITERIAL:
            case SS_HASH:
            case KW_TRUE:
            case KW_FALSE:
            case KW_ON:
            case KW_OFF:
            case KW_OK:
            case KW_UNDEFINED:
            case KW_UNSUPPLIED:
            	{
            		alt34=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 34;
                EXCEPTION->state        = 0;


                goto ruleoperandEx;
            }

            switch (alt34) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:287:4: IDENTIFIER ( operand_op )*
        	    {
        	        IDENTIFIER129 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_operand1860); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperandEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER129, NULL); }


        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:287:15: ( operand_op )*

        	        for (;;)
        	        {
        	            int alt33=2;
        	            switch ( LA(1) ) 
        	            {
        	            case SS_OPAREN:
        	            	{
        	            		{
        	            		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	            		    */
        	            		    int LA33_2 = LA(2);
        	            		    if ( (synpred60_yatg(ctx)) ) 
        	            		    {
        	            		        alt33=1;
        	            		    }

        	            		}
        	            	}
        	                break;
        	            case SS_OBRACKET:
        	            	{
        	            		{
        	            		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	            		    */
        	            		    int LA33_8 = LA(2);
        	            		    if ( (synpred60_yatg(ctx)) ) 
        	            		    {
        	            		        alt33=1;
        	            		    }

        	            		}
        	            	}
        	                break;
        	            case SS_DOT:
        	            	{
        	            		alt33=1;
        	            	}
        	                break;

        	            }

        	            switch (alt33) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:287:16: operand_op
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_operand_op_in_operand1863);
        	        	        operand_op130=operand_op(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoperandEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_operand_op; stream_operand_op->add(stream_operand_op, operand_op130.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop33;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop33: ; /* Jump out to here if this rule does not match */


        	         
        	        /* AST REWRITE
        	         * elements          : operand_op, IDENTIFIER
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 287:30: -> ^( OPERAND IDENTIFIER ( operand_op )* ID_MORE )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:287:32: ^( OPERAND IDENTIFIER ( operand_op )* ID_MORE )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OPERAND, (pANTLR3_UINT8)"OPERAND"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER));
        	        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:287:53: ( operand_op )*
        	        	        {
        	        	        	while ( (stream_operand_op != NULL && stream_operand_op->hasNext(stream_operand_op))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_operand_op == NULL ? NULL : stream_operand_op->nextTree(stream_operand_op));

        	        	        	}
        	        	        	if (stream_operand_op != NULL) stream_operand_op->reset(stream_operand_op);

        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ID_MORE, (pANTLR3_UINT8)"ID_MORE"));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:288:11: constant
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_constant_in_operand1892);
        	        constant131=constant(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperandEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constant131.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleoperandEx; /* Prevent compiler warnings */
    ruleoperandEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_operand_op != NULL) stream_operand_op->free(stream_operand_op);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(31, operand_StartIndex); }

    return retval;
}
/* $ANTLR end operand */

/** 
 * $ANTLR start operand_op
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:291:1: operand_op : ( SS_DOT IDENTIFIER -> ^( DOT IDENTIFIER ) | SS_OBRACKET expr_g SS_CBRACKET -> ^( ARR_IND expr_g ) | SS_OPAREN ( argument_expression_list )? SS_CPAREN -> ^( ARG_EXPR_L ( argument_expression_list )? ) );
 */
static yatgParser_operand_op_return
operand_op(pyatgParser ctx)
{   
    yatgParser_operand_op_return retval;
    ANTLR3_UINT32 operand_op_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_DOT132;
    pANTLR3_COMMON_TOKEN    IDENTIFIER133;
    pANTLR3_COMMON_TOKEN    SS_OBRACKET134;
    pANTLR3_COMMON_TOKEN    SS_CBRACKET136;
    pANTLR3_COMMON_TOKEN    SS_OPAREN137;
    pANTLR3_COMMON_TOKEN    SS_CPAREN139;
    yatgParser_expr_g_return expr_g135;
    #undef	RETURN_TYPE_expr_g135
    #define	RETURN_TYPE_expr_g135 yatgParser_expr_g_return

    yatgParser_argument_expression_list_return argument_expression_list138;
    #undef	RETURN_TYPE_argument_expression_list138
    #define	RETURN_TYPE_argument_expression_list138 yatgParser_argument_expression_list_return

    pANTLR3_BASE_TREE SS_DOT132_tree;
    pANTLR3_BASE_TREE IDENTIFIER133_tree;
    pANTLR3_BASE_TREE SS_OBRACKET134_tree;
    pANTLR3_BASE_TREE SS_CBRACKET136_tree;
    pANTLR3_BASE_TREE SS_OPAREN137_tree;
    pANTLR3_BASE_TREE SS_CPAREN139_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_CPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_CBRACKET;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_OBRACKET;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_DOT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_OPAREN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_argument_expression_list;
    /* Initialize rule variables
     */
    operand_op_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(32)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_DOT132       = NULL;
    IDENTIFIER133       = NULL;
    SS_OBRACKET134       = NULL;
    SS_CBRACKET136       = NULL;
    SS_OPAREN137       = NULL;
    SS_CPAREN139       = NULL;
    expr_g135.tree = NULL;

    argument_expression_list138.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_DOT132_tree   = NULL;
    IDENTIFIER133_tree   = NULL;
    SS_OBRACKET134_tree   = NULL;
    SS_CBRACKET136_tree   = NULL;
    SS_OPAREN137_tree   = NULL;
    SS_CPAREN139_tree   = NULL;

    stream_SS_CPAREN   = NULL;
    #define CREATE_stream_SS_CPAREN  if (stream_SS_CPAREN == NULL) {stream_SS_CPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_CPAREN"); } 
    stream_SS_CBRACKET   = NULL;
    #define CREATE_stream_SS_CBRACKET  if (stream_SS_CBRACKET == NULL) {stream_SS_CBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_CBRACKET"); } 
    stream_SS_OBRACKET   = NULL;
    #define CREATE_stream_SS_OBRACKET  if (stream_SS_OBRACKET == NULL) {stream_SS_OBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_OBRACKET"); } 
    stream_SS_DOT   = NULL;
    #define CREATE_stream_SS_DOT  if (stream_SS_DOT == NULL) {stream_SS_DOT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_DOT"); } 
    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_SS_OPAREN   = NULL;
    #define CREATE_stream_SS_OPAREN  if (stream_SS_OPAREN == NULL) {stream_SS_OPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_OPAREN"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }
    stream_argument_expression_list   = NULL;
    #define CREATE_stream_argument_expression_list  if (stream_argument_expression_list == NULL) {stream_argument_expression_list = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule argument_expression_list"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:292:2: ( SS_DOT IDENTIFIER -> ^( DOT IDENTIFIER ) | SS_OBRACKET expr_g SS_CBRACKET -> ^( ARR_IND expr_g ) | SS_OPAREN ( argument_expression_list )? SS_CPAREN -> ^( ARG_EXPR_L ( argument_expression_list )? ) )
            
            ANTLR3_UINT32 alt36;

            alt36=3;

            switch ( LA(1) ) 
            {
            case SS_DOT:
            	{
            		alt36=1;
            	}
                break;
            case SS_OBRACKET:
            	{
            		alt36=2;
            	}
                break;
            case SS_OPAREN:
            	{
            		alt36=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 36;
                EXCEPTION->state        = 0;


                goto ruleoperand_opEx;
            }

            switch (alt36) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:292:4: SS_DOT IDENTIFIER
        	    {
        	        SS_DOT132 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_DOT, &FOLLOW_SS_DOT_in_operand_op1912); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_DOT; stream_SS_DOT->add(stream_SS_DOT, SS_DOT132, NULL); }

        	        IDENTIFIER133 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_operand_op1914); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER133, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : IDENTIFIER
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 292:22: -> ^( DOT IDENTIFIER )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:292:24: ^( DOT IDENTIFIER )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:293:11: SS_OBRACKET expr_g SS_CBRACKET
        	    {
        	        SS_OBRACKET134 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_OBRACKET, &FOLLOW_SS_OBRACKET_in_operand_op1933); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_OBRACKET; stream_SS_OBRACKET->add(stream_SS_OBRACKET, SS_OBRACKET134, NULL); }

        	        FOLLOWPUSH(FOLLOW_expr_g_in_operand_op1935);
        	        expr_g135=expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, expr_g135.tree, NULL); }
        	        SS_CBRACKET136 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_CBRACKET, &FOLLOW_SS_CBRACKET_in_operand_op1937); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_CBRACKET; stream_SS_CBRACKET->add(stream_SS_CBRACKET, SS_CBRACKET136, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expr_g
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 293:42: -> ^( ARR_IND expr_g )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:293:44: ^( ARR_IND expr_g )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARR_IND, (pANTLR3_UINT8)"ARR_IND"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr_g == NULL ? NULL : stream_expr_g->nextTree(stream_expr_g));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:294:11: SS_OPAREN ( argument_expression_list )? SS_CPAREN
        	    {
        	        SS_OPAREN137 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_OPAREN, &FOLLOW_SS_OPAREN_in_operand_op1956); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_OPAREN; stream_SS_OPAREN->add(stream_SS_OPAREN, SS_OPAREN137, NULL); }


        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:294:21: ( argument_expression_list )?
        	        {
        	            int alt35=2;
        	            switch ( LA(1) ) 
        	            {
        	                case KW_LOCAL:
        	                case KW_GLOBAL:
        	                case IDENTIFIER:
        	                case KW_IF:
        	                case KW_DO:
        	                case KW_WHILE:
        	                case KW_FOR:
        	                case KW_IN:
        	                case KW_EXIT:
        	                case KW_WITH:
        	                case KW_CONTINUE:
        	                case KW_CASE:
        	                case SS_OPAREN:
        	                case KW_STRUCT:
        	                case KW_TRY:
        	                case KW_MAPPED:
        	                case KW_FUNCTION:
        	                case KW_FN:
        	                case KW_RETURN:
        	                case KW_ANIMATE:
        	                case KW_AT:
        	                case KW_COORDSYS:
        	                case KW_ABOUT:
        	                case KW_UNDO:
        	                case SS_MINUS:
        	                case SS_OBRACKET:
        	                case DIGIT:
        	                case HEX_LITERAL:
        	                case STRING_LITERIAL:
        	                case SS_HASH:
        	                case KW_TRUE:
        	                case KW_FALSE:
        	                case KW_ON:
        	                case KW_OFF:
        	                case KW_OK:
        	                case KW_UNDEFINED:
        	                case KW_UNSUPPLIED:
        	                	{
        	                		alt35=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt35) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:0:0: argument_expression_list
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_argument_expression_list_in_operand_op1958);
        	        	        argument_expression_list138=argument_expression_list(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoperand_opEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_argument_expression_list; stream_argument_expression_list->add(stream_argument_expression_list, argument_expression_list138.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        SS_CPAREN139 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_CPAREN, &FOLLOW_SS_CPAREN_in_operand_op1961); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_CPAREN; stream_SS_CPAREN->add(stream_SS_CPAREN, SS_CPAREN139, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : argument_expression_list
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 294:57: -> ^( ARG_EXPR_L ( argument_expression_list )? )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:294:60: ^( ARG_EXPR_L ( argument_expression_list )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARG_EXPR_L, (pANTLR3_UINT8)"ARG_EXPR_L"), root_1));

        	        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:294:73: ( argument_expression_list )?
        	        	        {
        	        	        	if ( (stream_argument_expression_list != NULL && stream_argument_expression_list->hasNext(stream_argument_expression_list))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_argument_expression_list == NULL ? NULL : stream_argument_expression_list->nextTree(stream_argument_expression_list));

        	        	        	}
        	        	        	if ( stream_argument_expression_list != NULL) stream_argument_expression_list->reset(stream_argument_expression_list);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleoperand_opEx; /* Prevent compiler warnings */
    ruleoperand_opEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_CPAREN != NULL) stream_SS_CPAREN->free(stream_SS_CPAREN);
        if (stream_SS_CBRACKET != NULL) stream_SS_CBRACKET->free(stream_SS_CBRACKET);
        if (stream_SS_OBRACKET != NULL) stream_SS_OBRACKET->free(stream_SS_OBRACKET);
        if (stream_SS_DOT != NULL) stream_SS_DOT->free(stream_SS_DOT);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_SS_OPAREN != NULL) stream_SS_OPAREN->free(stream_SS_OPAREN);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
        if (stream_argument_expression_list != NULL) stream_argument_expression_list->free(stream_argument_expression_list);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(32, operand_op_StartIndex); }

    return retval;
}
/* $ANTLR end operand_op */

/** 
 * $ANTLR start constant
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:297:1: constant : ( DIGIT | HEX_LITERAL | STRING_LITERIAL | SS_HASH IDENTIFIER | array | bitarray | box2 | point3 | point2 | KW_TRUE | KW_FALSE | KW_ON | KW_OFF | KW_OK | KW_UNDEFINED | KW_UNSUPPLIED | SS_MINUS expr_g | expr_seq );
 */
static yatgParser_constant_return
constant(pyatgParser ctx)
{   
    yatgParser_constant_return retval;
    ANTLR3_UINT32 constant_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    DIGIT140;
    pANTLR3_COMMON_TOKEN    HEX_LITERAL141;
    pANTLR3_COMMON_TOKEN    STRING_LITERIAL142;
    pANTLR3_COMMON_TOKEN    SS_HASH143;
    pANTLR3_COMMON_TOKEN    IDENTIFIER144;
    pANTLR3_COMMON_TOKEN    KW_TRUE150;
    pANTLR3_COMMON_TOKEN    KW_FALSE151;
    pANTLR3_COMMON_TOKEN    KW_ON152;
    pANTLR3_COMMON_TOKEN    KW_OFF153;
    pANTLR3_COMMON_TOKEN    KW_OK154;
    pANTLR3_COMMON_TOKEN    KW_UNDEFINED155;
    pANTLR3_COMMON_TOKEN    KW_UNSUPPLIED156;
    pANTLR3_COMMON_TOKEN    SS_MINUS157;
    yatgParser_array_return array145;
    #undef	RETURN_TYPE_array145
    #define	RETURN_TYPE_array145 yatgParser_array_return

    yatgParser_bitarray_return bitarray146;
    #undef	RETURN_TYPE_bitarray146
    #define	RETURN_TYPE_bitarray146 yatgParser_bitarray_return

    yatgParser_box2_return box2147;
    #undef	RETURN_TYPE_box2147
    #define	RETURN_TYPE_box2147 yatgParser_box2_return

    yatgParser_point3_return point3148;
    #undef	RETURN_TYPE_point3148
    #define	RETURN_TYPE_point3148 yatgParser_point3_return

    yatgParser_point2_return point2149;
    #undef	RETURN_TYPE_point2149
    #define	RETURN_TYPE_point2149 yatgParser_point2_return

    yatgParser_expr_g_return expr_g158;
    #undef	RETURN_TYPE_expr_g158
    #define	RETURN_TYPE_expr_g158 yatgParser_expr_g_return

    yatgParser_expr_seq_return expr_seq159;
    #undef	RETURN_TYPE_expr_seq159
    #define	RETURN_TYPE_expr_seq159 yatgParser_expr_seq_return

    pANTLR3_BASE_TREE DIGIT140_tree;
    pANTLR3_BASE_TREE HEX_LITERAL141_tree;
    pANTLR3_BASE_TREE STRING_LITERIAL142_tree;
    pANTLR3_BASE_TREE SS_HASH143_tree;
    pANTLR3_BASE_TREE IDENTIFIER144_tree;
    pANTLR3_BASE_TREE KW_TRUE150_tree;
    pANTLR3_BASE_TREE KW_FALSE151_tree;
    pANTLR3_BASE_TREE KW_ON152_tree;
    pANTLR3_BASE_TREE KW_OFF153_tree;
    pANTLR3_BASE_TREE KW_OK154_tree;
    pANTLR3_BASE_TREE KW_UNDEFINED155_tree;
    pANTLR3_BASE_TREE KW_UNSUPPLIED156_tree;
    pANTLR3_BASE_TREE SS_MINUS157_tree;

    /* Initialize rule variables
     */
    constant_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(33)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    DIGIT140       = NULL;
    HEX_LITERAL141       = NULL;
    STRING_LITERIAL142       = NULL;
    SS_HASH143       = NULL;
    IDENTIFIER144       = NULL;
    KW_TRUE150       = NULL;
    KW_FALSE151       = NULL;
    KW_ON152       = NULL;
    KW_OFF153       = NULL;
    KW_OK154       = NULL;
    KW_UNDEFINED155       = NULL;
    KW_UNSUPPLIED156       = NULL;
    SS_MINUS157       = NULL;
    array145.tree = NULL;

    bitarray146.tree = NULL;

    box2147.tree = NULL;

    point3148.tree = NULL;

    point2149.tree = NULL;

    expr_g158.tree = NULL;

    expr_seq159.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    DIGIT140_tree   = NULL;
    HEX_LITERAL141_tree   = NULL;
    STRING_LITERIAL142_tree   = NULL;
    SS_HASH143_tree   = NULL;
    IDENTIFIER144_tree   = NULL;
    KW_TRUE150_tree   = NULL;
    KW_FALSE151_tree   = NULL;
    KW_ON152_tree   = NULL;
    KW_OFF153_tree   = NULL;
    KW_OK154_tree   = NULL;
    KW_UNDEFINED155_tree   = NULL;
    KW_UNSUPPLIED156_tree   = NULL;
    SS_MINUS157_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:298:6: ( DIGIT | HEX_LITERAL | STRING_LITERIAL | SS_HASH IDENTIFIER | array | bitarray | box2 | point3 | point2 | KW_TRUE | KW_FALSE | KW_ON | KW_OFF | KW_OK | KW_UNDEFINED | KW_UNSUPPLIED | SS_MINUS expr_g | expr_seq )
            
            ANTLR3_UINT32 alt37;

            alt37=18;

            switch ( LA(1) ) 
            {
            case DIGIT:
            	{
            		alt37=1;
            	}
                break;
            case HEX_LITERAL:
            	{
            		alt37=2;
            	}
                break;
            case STRING_LITERIAL:
            	{
            		alt37=3;
            	}
                break;
            case SS_HASH:
            	{
            		switch ( LA(2) ) 
            		{
            		case IDENTIFIER:
            			{
            				alt37=4;
            			}
            		    break;
            		case SS_OCBRACKET:
            			{
            				alt37=6;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 37;
            		    EXCEPTION->state        = 4;


            		    goto ruleconstantEx;
            		}

            	}
                break;
            case SS_OBRACKET:
            	{
            		switch ( LA(2) ) 
            		{
            		case SS_CBRACKET:
            			{
            				alt37=5;
            			}
            		    break;
            		case SS_OPAREN:
            			{

            				{
            				    int LA37_18 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 18;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case IDENTIFIER:
            			{

            				{
            				    int LA37_19 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 19;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case DIGIT:
            			{

            				{
            				    int LA37_20 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 20;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case HEX_LITERAL:
            			{

            				{
            				    int LA37_21 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 21;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case STRING_LITERIAL:
            			{

            				{
            				    int LA37_22 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 22;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case SS_HASH:
            			{

            				{
            				    int LA37_23 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 23;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case SS_OBRACKET:
            			{

            				{
            				    int LA37_24 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 24;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_TRUE:
            			{

            				{
            				    int LA37_25 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 25;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FALSE:
            			{

            				{
            				    int LA37_26 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 26;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ON:
            			{

            				{
            				    int LA37_27 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 27;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_OFF:
            			{

            				{
            				    int LA37_28 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 28;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_OK:
            			{

            				{
            				    int LA37_29 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 29;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNDEFINED:
            			{

            				{
            				    int LA37_30 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 30;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNSUPPLIED:
            			{

            				{
            				    int LA37_31 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 31;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case SS_MINUS:
            			{

            				{
            				    int LA37_32 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 32;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_LOCAL:
            		case KW_GLOBAL:
            			{

            				{
            				    int LA37_33 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 33;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_IF:
            			{

            				{
            				    int LA37_34 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 34;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_WHILE:
            			{

            				{
            				    int LA37_35 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 35;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_DO:
            			{

            				{
            				    int LA37_36 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 36;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FOR:
            			{

            				{
            				    int LA37_37 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 37;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_EXIT:
            			{

            				{
            				    int LA37_38 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 38;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_CONTINUE:
            			{

            				{
            				    int LA37_39 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 39;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_CASE:
            			{

            				{
            				    int LA37_40 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 40;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_STRUCT:
            			{

            				{
            				    int LA37_41 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 41;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_TRY:
            			{

            				{
            				    int LA37_42 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 42;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_MAPPED:
            			{

            				{
            				    int LA37_43 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 43;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FUNCTION:
            		case KW_FN:
            			{

            				{
            				    int LA37_44 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 44;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_RETURN:
            			{

            				{
            				    int LA37_45 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 45;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_WITH:
            			{

            				{
            				    int LA37_46 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 46;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ANIMATE:
            			{

            				{
            				    int LA37_47 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 47;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_AT:
            			{

            				{
            				    int LA37_48 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 48;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_IN:
            			{

            				{
            				    int LA37_49 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 49;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_COORDSYS:
            			{

            				{
            				    int LA37_50 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 50;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ABOUT:
            			{

            				{
            				    int LA37_51 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 51;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNDO:
            			{

            				{
            				    int LA37_52 = LA(3);
            				    if ( (synpred69_yatg(ctx)) ) 
            				    {
            				        alt37=5;
            				    }
            				    else if ( (synpred71_yatg(ctx)) ) 
            				    {
            				        alt37=7;
            				    }
            				    else if ( (synpred72_yatg(ctx)) ) 
            				    {
            				        alt37=8;
            				    }
            				    else if ( (synpred73_yatg(ctx)) ) 
            				    {
            				        alt37=9;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 37;
            				        EXCEPTION->state        = 52;


            				        goto ruleconstantEx;
            				    }
            				}
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 37;
            		    EXCEPTION->state        = 5;


            		    goto ruleconstantEx;
            		}

            	}
                break;
            case KW_TRUE:
            	{
            		alt37=10;
            	}
                break;
            case KW_FALSE:
            	{
            		alt37=11;
            	}
                break;
            case KW_ON:
            	{
            		alt37=12;
            	}
                break;
            case KW_OFF:
            	{
            		alt37=13;
            	}
                break;
            case KW_OK:
            	{
            		alt37=14;
            	}
                break;
            case KW_UNDEFINED:
            	{
            		alt37=15;
            	}
                break;
            case KW_UNSUPPLIED:
            	{
            		alt37=16;
            	}
                break;
            case SS_MINUS:
            	{
            		alt37=17;
            	}
                break;
            case SS_OPAREN:
            	{
            		alt37=18;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 37;
                EXCEPTION->state        = 0;


                goto ruleconstantEx;
            }

            switch (alt37) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:299:8: DIGIT
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        DIGIT140 = (pANTLR3_COMMON_TOKEN) MATCHT(DIGIT, &FOLLOW_DIGIT_in_constant1999); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        DIGIT140_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, DIGIT140));
        	        ADAPTOR->addChild(ADAPTOR, root_0, DIGIT140_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:300:8: HEX_LITERAL
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        HEX_LITERAL141 = (pANTLR3_COMMON_TOKEN) MATCHT(HEX_LITERAL, &FOLLOW_HEX_LITERAL_in_constant2008); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        HEX_LITERAL141_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, HEX_LITERAL141));
        	        ADAPTOR->addChild(ADAPTOR, root_0, HEX_LITERAL141_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:301:8: STRING_LITERIAL
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        STRING_LITERIAL142 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING_LITERIAL, &FOLLOW_STRING_LITERIAL_in_constant2017); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        STRING_LITERIAL142_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, STRING_LITERIAL142));
        	        ADAPTOR->addChild(ADAPTOR, root_0, STRING_LITERIAL142_tree);
        	        }

        	    }
        	    break;
        	case 4:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:302:8: SS_HASH IDENTIFIER
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        SS_HASH143 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_HASH, &FOLLOW_SS_HASH_in_constant2026); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        SS_HASH143_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SS_HASH143));
        	        ADAPTOR->addChild(ADAPTOR, root_0, SS_HASH143_tree);
        	        }
        	        IDENTIFIER144 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_constant2028); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        IDENTIFIER144_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENTIFIER144));
        	        ADAPTOR->addChild(ADAPTOR, root_0, IDENTIFIER144_tree);
        	        }

        	    }
        	    break;
        	case 5:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:303:7: array
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_array_in_constant2036);
        	        array145=array(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, array145.tree);

        	    }
        	    break;
        	case 6:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:304:8: bitarray
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_bitarray_in_constant2045);
        	        bitarray146=bitarray(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, bitarray146.tree);

        	    }
        	    break;
        	case 7:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:305:8: box2
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_box2_in_constant2054);
        	        box2147=box2(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, box2147.tree);

        	    }
        	    break;
        	case 8:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:306:7: point3
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_point3_in_constant2062);
        	        point3148=point3(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, point3148.tree);

        	    }
        	    break;
        	case 9:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:307:7: point2
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_point2_in_constant2070);
        	        point2149=point2(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, point2149.tree);

        	    }
        	    break;
        	case 10:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:308:8: KW_TRUE
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        KW_TRUE150 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_TRUE, &FOLLOW_KW_TRUE_in_constant2079); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        KW_TRUE150_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_TRUE150));
        	        ADAPTOR->addChild(ADAPTOR, root_0, KW_TRUE150_tree);
        	        }

        	    }
        	    break;
        	case 11:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:309:8: KW_FALSE
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        KW_FALSE151 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_FALSE, &FOLLOW_KW_FALSE_in_constant2088); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        KW_FALSE151_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_FALSE151));
        	        ADAPTOR->addChild(ADAPTOR, root_0, KW_FALSE151_tree);
        	        }

        	    }
        	    break;
        	case 12:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:310:8: KW_ON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        KW_ON152 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_ON, &FOLLOW_KW_ON_in_constant2097); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        KW_ON152_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_ON152));
        	        ADAPTOR->addChild(ADAPTOR, root_0, KW_ON152_tree);
        	        }

        	    }
        	    break;
        	case 13:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:311:8: KW_OFF
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        KW_OFF153 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_OFF, &FOLLOW_KW_OFF_in_constant2106); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        KW_OFF153_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_OFF153));
        	        ADAPTOR->addChild(ADAPTOR, root_0, KW_OFF153_tree);
        	        }

        	    }
        	    break;
        	case 14:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:312:8: KW_OK
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        KW_OK154 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_OK, &FOLLOW_KW_OK_in_constant2115); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        KW_OK154_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_OK154));
        	        ADAPTOR->addChild(ADAPTOR, root_0, KW_OK154_tree);
        	        }

        	    }
        	    break;
        	case 15:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:313:8: KW_UNDEFINED
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        KW_UNDEFINED155 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_UNDEFINED, &FOLLOW_KW_UNDEFINED_in_constant2124); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        KW_UNDEFINED155_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_UNDEFINED155));
        	        ADAPTOR->addChild(ADAPTOR, root_0, KW_UNDEFINED155_tree);
        	        }

        	    }
        	    break;
        	case 16:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:314:8: KW_UNSUPPLIED
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        KW_UNSUPPLIED156 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_UNSUPPLIED, &FOLLOW_KW_UNSUPPLIED_in_constant2133); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        KW_UNSUPPLIED156_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, KW_UNSUPPLIED156));
        	        ADAPTOR->addChild(ADAPTOR, root_0, KW_UNSUPPLIED156_tree);
        	        }

        	    }
        	    break;
        	case 17:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:315:8: SS_MINUS expr_g
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        SS_MINUS157 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_MINUS, &FOLLOW_SS_MINUS_in_constant2142); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        SS_MINUS157_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SS_MINUS157));
        	        ADAPTOR->addChild(ADAPTOR, root_0, SS_MINUS157_tree);
        	        }
        	        FOLLOWPUSH(FOLLOW_expr_g_in_constant2144);
        	        expr_g158=expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr_g158.tree);

        	    }
        	    break;
        	case 18:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:316:7: expr_seq
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expr_seq_in_constant2152);
        	        expr_seq159=expr_seq(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr_seq159.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstantEx; /* Prevent compiler warnings */
    ruleconstantEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(33, constant_StartIndex); }

    return retval;
}
/* $ANTLR end constant */

/** 
 * $ANTLR start constant_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:320:1: constant_expression : logical_expression ;
 */
static yatgParser_constant_expression_return
constant_expression(pyatgParser ctx)
{   
    yatgParser_constant_expression_return retval;
    ANTLR3_UINT32 constant_expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    yatgParser_logical_expression_return logical_expression160;
    #undef	RETURN_TYPE_logical_expression160
    #define	RETURN_TYPE_logical_expression160 yatgParser_logical_expression_return


    /* Initialize rule variables
     */
    constant_expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(34)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    logical_expression160.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:321:2: ( logical_expression )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:321:4: logical_expression
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_logical_expression_in_constant_expression2168);
            logical_expression160=logical_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstant_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, logical_expression160.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstant_expressionEx; /* Prevent compiler warnings */
    ruleconstant_expressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(34, constant_expression_StartIndex); }

    return retval;
}
/* $ANTLR end constant_expression */

/** 
 * $ANTLR start assignment_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:324:1: assignment_expression : ( lvalue assignment_operator expr -> ^( assignment_operator lvalue expr ) | constant_expression );
 */
static yatgParser_assignment_expression_return
assignment_expression(pyatgParser ctx)
{   
    yatgParser_assignment_expression_return retval;
    ANTLR3_UINT32 assignment_expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    yatgParser_lvalue_return lvalue161;
    #undef	RETURN_TYPE_lvalue161
    #define	RETURN_TYPE_lvalue161 yatgParser_lvalue_return

    yatgParser_assignment_operator_return assignment_operator162;
    #undef	RETURN_TYPE_assignment_operator162
    #define	RETURN_TYPE_assignment_operator162 yatgParser_assignment_operator_return

    yatgParser_expr_return expr163;
    #undef	RETURN_TYPE_expr163
    #define	RETURN_TYPE_expr163 yatgParser_expr_return

    yatgParser_constant_expression_return constant_expression164;
    #undef	RETURN_TYPE_constant_expression164
    #define	RETURN_TYPE_constant_expression164 yatgParser_constant_expression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_lvalue;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignment_operator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */
    assignment_expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(35)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    lvalue161.tree = NULL;

    assignment_operator162.tree = NULL;

    expr163.tree = NULL;

    constant_expression164.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_lvalue   = NULL;
    #define CREATE_stream_lvalue  if (stream_lvalue == NULL) {stream_lvalue = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule lvalue"); }
    stream_assignment_operator   = NULL;
    #define CREATE_stream_assignment_operator  if (stream_assignment_operator == NULL) {stream_assignment_operator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignment_operator"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:325:2: ( lvalue assignment_operator expr -> ^( assignment_operator lvalue expr ) | constant_expression )
            
            ANTLR3_UINT32 alt38;

            alt38=2;

            switch ( LA(1) ) 
            {
            case IDENTIFIER:
            	{

            		{
            		    int LA38_1 = LA(2);
            		    if ( (synpred82_yatg(ctx)) ) 
            		    {
            		        alt38=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt38=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 38;
            		        EXCEPTION->state        = 1;


            		        goto ruleassignment_expressionEx;
            		    }
            		}
            	}
                break;
            case DIGIT:
            	{

            		{
            		    int LA38_2 = LA(2);
            		    if ( (synpred82_yatg(ctx)) ) 
            		    {
            		        alt38=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt38=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 38;
            		        EXCEPTION->state        = 2;


            		        goto ruleassignment_expressionEx;
            		    }
            		}
            	}
                break;
            case HEX_LITERAL:
            	{

            		{
            		    int LA38_3 = LA(2);
            		    if ( (synpred82_yatg(ctx)) ) 
            		    {
            		        alt38=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt38=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 38;
            		        EXCEPTION->state        = 3;


            		        goto ruleassignment_expressionEx;
            		    }
            		}
            	}
                break;
            case STRING_LITERIAL:
            	{

            		{
            		    int LA38_4 = LA(2);
            		    if ( (synpred82_yatg(ctx)) ) 
            		    {
            		        alt38=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt38=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 38;
            		        EXCEPTION->state        = 4;


            		        goto ruleassignment_expressionEx;
            		    }
            		}
            	}
                break;
            case SS_HASH:
            	{
            		switch ( LA(2) ) 
            		{
            		case IDENTIFIER:
            			{

            				{
            				    int LA38_255 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 255;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_OCBRACKET:
            			{

            				{
            				    int LA38_256 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 256;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 38;
            		    EXCEPTION->state        = 5;


            		    goto ruleassignment_expressionEx;
            		}

            	}
                break;
            case SS_OBRACKET:
            	{
            		switch ( LA(2) ) 
            		{
            		case SS_CBRACKET:
            			{

            				{
            				    int LA38_257 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 257;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_OPAREN:
            			{

            				{
            				    int LA38_258 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 258;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case IDENTIFIER:
            			{

            				{
            				    int LA38_259 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 259;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case DIGIT:
            			{

            				{
            				    int LA38_260 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 260;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case HEX_LITERAL:
            			{

            				{
            				    int LA38_261 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 261;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case STRING_LITERIAL:
            			{

            				{
            				    int LA38_262 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 262;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_HASH:
            			{

            				{
            				    int LA38_263 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 263;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_OBRACKET:
            			{

            				{
            				    int LA38_264 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 264;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_TRUE:
            			{

            				{
            				    int LA38_265 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 265;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FALSE:
            			{

            				{
            				    int LA38_266 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 266;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ON:
            			{

            				{
            				    int LA38_267 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 267;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_OFF:
            			{

            				{
            				    int LA38_268 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 268;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_OK:
            			{

            				{
            				    int LA38_269 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 269;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNDEFINED:
            			{

            				{
            				    int LA38_270 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 270;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNSUPPLIED:
            			{

            				{
            				    int LA38_271 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 271;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_MINUS:
            			{

            				{
            				    int LA38_272 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 272;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_LOCAL:
            		case KW_GLOBAL:
            			{

            				{
            				    int LA38_273 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 273;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_IF:
            			{

            				{
            				    int LA38_274 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 274;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_WHILE:
            			{

            				{
            				    int LA38_275 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 275;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_DO:
            			{

            				{
            				    int LA38_276 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 276;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FOR:
            			{

            				{
            				    int LA38_277 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 277;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_EXIT:
            			{

            				{
            				    int LA38_278 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 278;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_CONTINUE:
            			{

            				{
            				    int LA38_279 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 279;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_CASE:
            			{

            				{
            				    int LA38_280 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 280;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_STRUCT:
            			{

            				{
            				    int LA38_281 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 281;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_TRY:
            			{

            				{
            				    int LA38_282 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 282;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_MAPPED:
            			{

            				{
            				    int LA38_283 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 283;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FUNCTION:
            		case KW_FN:
            			{

            				{
            				    int LA38_284 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 284;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_RETURN:
            			{

            				{
            				    int LA38_285 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 285;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_WITH:
            			{

            				{
            				    int LA38_286 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 286;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ANIMATE:
            			{

            				{
            				    int LA38_287 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 287;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_AT:
            			{

            				{
            				    int LA38_288 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 288;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_IN:
            			{

            				{
            				    int LA38_289 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 289;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_COORDSYS:
            			{

            				{
            				    int LA38_290 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 290;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ABOUT:
            			{

            				{
            				    int LA38_291 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 291;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNDO:
            			{

            				{
            				    int LA38_292 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 292;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 38;
            		    EXCEPTION->state        = 6;


            		    goto ruleassignment_expressionEx;
            		}

            	}
                break;
            case KW_TRUE:
            	{

            		{
            		    int LA38_7 = LA(2);
            		    if ( (synpred82_yatg(ctx)) ) 
            		    {
            		        alt38=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt38=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 38;
            		        EXCEPTION->state        = 7;


            		        goto ruleassignment_expressionEx;
            		    }
            		}
            	}
                break;
            case KW_FALSE:
            	{

            		{
            		    int LA38_8 = LA(2);
            		    if ( (synpred82_yatg(ctx)) ) 
            		    {
            		        alt38=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt38=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 38;
            		        EXCEPTION->state        = 8;


            		        goto ruleassignment_expressionEx;
            		    }
            		}
            	}
                break;
            case KW_ON:
            	{

            		{
            		    int LA38_9 = LA(2);
            		    if ( (synpred82_yatg(ctx)) ) 
            		    {
            		        alt38=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt38=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 38;
            		        EXCEPTION->state        = 9;


            		        goto ruleassignment_expressionEx;
            		    }
            		}
            	}
                break;
            case KW_OFF:
            	{

            		{
            		    int LA38_10 = LA(2);
            		    if ( (synpred82_yatg(ctx)) ) 
            		    {
            		        alt38=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt38=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 38;
            		        EXCEPTION->state        = 10;


            		        goto ruleassignment_expressionEx;
            		    }
            		}
            	}
                break;
            case KW_OK:
            	{

            		{
            		    int LA38_11 = LA(2);
            		    if ( (synpred82_yatg(ctx)) ) 
            		    {
            		        alt38=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt38=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 38;
            		        EXCEPTION->state        = 11;


            		        goto ruleassignment_expressionEx;
            		    }
            		}
            	}
                break;
            case KW_UNDEFINED:
            	{

            		{
            		    int LA38_12 = LA(2);
            		    if ( (synpred82_yatg(ctx)) ) 
            		    {
            		        alt38=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt38=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 38;
            		        EXCEPTION->state        = 12;


            		        goto ruleassignment_expressionEx;
            		    }
            		}
            	}
                break;
            case KW_UNSUPPLIED:
            	{

            		{
            		    int LA38_13 = LA(2);
            		    if ( (synpred82_yatg(ctx)) ) 
            		    {
            		        alt38=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt38=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 38;
            		        EXCEPTION->state        = 13;


            		        goto ruleassignment_expressionEx;
            		    }
            		}
            	}
                break;
            case SS_MINUS:
            	{
            		switch ( LA(2) ) 
            		{
            		case SS_OPAREN:
            			{

            				{
            				    int LA38_706 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 706;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case IDENTIFIER:
            			{

            				{
            				    int LA38_707 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 707;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case DIGIT:
            			{

            				{
            				    int LA38_708 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 708;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case HEX_LITERAL:
            			{

            				{
            				    int LA38_709 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 709;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case STRING_LITERIAL:
            			{

            				{
            				    int LA38_710 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 710;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_HASH:
            			{

            				{
            				    int LA38_711 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 711;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_OBRACKET:
            			{

            				{
            				    int LA38_712 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 712;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_TRUE:
            			{

            				{
            				    int LA38_713 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 713;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FALSE:
            			{

            				{
            				    int LA38_714 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 714;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ON:
            			{

            				{
            				    int LA38_715 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 715;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_OFF:
            			{

            				{
            				    int LA38_716 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 716;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_OK:
            			{

            				{
            				    int LA38_717 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 717;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNDEFINED:
            			{

            				{
            				    int LA38_718 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 718;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNSUPPLIED:
            			{

            				{
            				    int LA38_719 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 719;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_MINUS:
            			{

            				{
            				    int LA38_720 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 720;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_LOCAL:
            		case KW_GLOBAL:
            			{

            				{
            				    int LA38_721 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 721;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_IF:
            			{

            				{
            				    int LA38_722 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 722;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_WHILE:
            			{

            				{
            				    int LA38_723 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 723;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_DO:
            			{

            				{
            				    int LA38_724 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 724;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FOR:
            			{

            				{
            				    int LA38_725 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 725;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_EXIT:
            			{

            				{
            				    int LA38_726 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 726;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_CONTINUE:
            			{

            				{
            				    int LA38_727 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 727;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_CASE:
            			{

            				{
            				    int LA38_728 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 728;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_STRUCT:
            			{

            				{
            				    int LA38_729 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 729;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_TRY:
            			{

            				{
            				    int LA38_730 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 730;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_MAPPED:
            			{

            				{
            				    int LA38_731 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 731;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FUNCTION:
            		case KW_FN:
            			{

            				{
            				    int LA38_732 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 732;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_RETURN:
            			{

            				{
            				    int LA38_733 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 733;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_WITH:
            			{

            				{
            				    int LA38_734 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 734;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ANIMATE:
            			{

            				{
            				    int LA38_735 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 735;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_AT:
            			{

            				{
            				    int LA38_736 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 736;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_IN:
            			{

            				{
            				    int LA38_737 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 737;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_COORDSYS:
            			{

            				{
            				    int LA38_738 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 738;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ABOUT:
            			{

            				{
            				    int LA38_739 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 739;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNDO:
            			{

            				{
            				    int LA38_740 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 740;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 38;
            		    EXCEPTION->state        = 14;


            		    goto ruleassignment_expressionEx;
            		}

            	}
                break;
            case SS_OPAREN:
            	{
            		switch ( LA(2) ) 
            		{
            		case IDENTIFIER:
            			{

            				{
            				    int LA38_741 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 741;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case DIGIT:
            			{

            				{
            				    int LA38_742 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 742;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case HEX_LITERAL:
            			{

            				{
            				    int LA38_743 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 743;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case STRING_LITERIAL:
            			{

            				{
            				    int LA38_744 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 744;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_HASH:
            			{

            				{
            				    int LA38_745 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 745;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_OBRACKET:
            			{

            				{
            				    int LA38_746 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 746;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_TRUE:
            			{

            				{
            				    int LA38_747 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 747;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FALSE:
            			{

            				{
            				    int LA38_748 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 748;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ON:
            			{

            				{
            				    int LA38_749 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 749;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_OFF:
            			{

            				{
            				    int LA38_750 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 750;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_OK:
            			{

            				{
            				    int LA38_751 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 751;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNDEFINED:
            			{

            				{
            				    int LA38_752 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 752;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNSUPPLIED:
            			{

            				{
            				    int LA38_753 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 753;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_MINUS:
            			{

            				{
            				    int LA38_754 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 754;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_OPAREN:
            			{

            				{
            				    int LA38_755 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 755;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_LOCAL:
            		case KW_GLOBAL:
            			{

            				{
            				    int LA38_756 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 756;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_IF:
            			{

            				{
            				    int LA38_757 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 757;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_WHILE:
            			{

            				{
            				    int LA38_758 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 758;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_DO:
            			{

            				{
            				    int LA38_759 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 759;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FOR:
            			{

            				{
            				    int LA38_760 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 760;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_EXIT:
            			{

            				{
            				    int LA38_761 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 761;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_CONTINUE:
            			{

            				{
            				    int LA38_762 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 762;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_CASE:
            			{

            				{
            				    int LA38_763 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 763;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_STRUCT:
            			{

            				{
            				    int LA38_764 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 764;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_TRY:
            			{

            				{
            				    int LA38_765 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 765;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_MAPPED:
            			{

            				{
            				    int LA38_766 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 766;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FUNCTION:
            		case KW_FN:
            			{

            				{
            				    int LA38_767 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 767;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_RETURN:
            			{

            				{
            				    int LA38_768 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 768;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_WITH:
            			{

            				{
            				    int LA38_769 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 769;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ANIMATE:
            			{

            				{
            				    int LA38_770 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 770;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_AT:
            			{

            				{
            				    int LA38_771 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 771;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_IN:
            			{

            				{
            				    int LA38_772 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 772;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_COORDSYS:
            			{

            				{
            				    int LA38_773 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 773;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ABOUT:
            			{

            				{
            				    int LA38_774 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 774;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNDO:
            			{

            				{
            				    int LA38_775 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 775;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;
            		case SS_CPAREN:
            			{

            				{
            				    int LA38_776 = LA(3);
            				    if ( (synpred82_yatg(ctx)) ) 
            				    {
            				        alt38=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt38=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 38;
            				        EXCEPTION->state        = 776;


            				        goto ruleassignment_expressionEx;
            				    }
            				}
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 38;
            		    EXCEPTION->state        = 15;


            		    goto ruleassignment_expressionEx;
            		}

            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 38;
                EXCEPTION->state        = 0;


                goto ruleassignment_expressionEx;
            }

            switch (alt38) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:325:4: lvalue assignment_operator expr
        	    {
        	        FOLLOWPUSH(FOLLOW_lvalue_in_assignment_expression2179);
        	        lvalue161=lvalue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_lvalue; stream_lvalue->add(stream_lvalue, lvalue161.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_assignment_operator_in_assignment_expression2181);
        	        assignment_operator162=assignment_operator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignment_operator; stream_assignment_operator->add(stream_assignment_operator, assignment_operator162.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_expr_in_assignment_expression2183);
        	        expr163=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr163.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : expr, assignment_operator, lvalue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 326:2: -> ^( assignment_operator lvalue expr )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:326:5: ^( assignment_operator lvalue expr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignment_operator == NULL ? NULL : stream_assignment_operator->nextNode(stream_assignment_operator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_lvalue == NULL ? NULL : stream_lvalue->nextTree(stream_lvalue));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:327:4: constant_expression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_constant_expression_in_assignment_expression2199);
        	        constant_expression164=constant_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, constant_expression164.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignment_expressionEx; /* Prevent compiler warnings */
    ruleassignment_expressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_lvalue != NULL) stream_lvalue->free(stream_lvalue);
        if (stream_assignment_operator != NULL) stream_assignment_operator->free(stream_assignment_operator);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(35, assignment_expression_StartIndex); }

    return retval;
}
/* $ANTLR end assignment_expression */

/** 
 * $ANTLR start lvalue
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:330:1: lvalue : unary_expression ;
 */
static yatgParser_lvalue_return
lvalue(pyatgParser ctx)
{   
    yatgParser_lvalue_return retval;
    ANTLR3_UINT32 lvalue_StartIndex;
    pANTLR3_BASE_TREE root_0;

    yatgParser_unary_expression_return unary_expression165;
    #undef	RETURN_TYPE_unary_expression165
    #define	RETURN_TYPE_unary_expression165 yatgParser_unary_expression_return


    /* Initialize rule variables
     */
    lvalue_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(36)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    unary_expression165.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:331:2: ( unary_expression )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:331:4: unary_expression
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_unary_expression_in_lvalue2211);
            unary_expression165=unary_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelvalueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, unary_expression165.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelvalueEx; /* Prevent compiler warnings */
    rulelvalueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(36, lvalue_StartIndex); }

    return retval;
}
/* $ANTLR end lvalue */

/** 
 * $ANTLR start assignment_operator
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:334:1: assignment_operator : ( SS_EQUAL | SS_STAR_EQUAL | SS_FSLASH_EQUAL | SS_PERCENT_EQUAL | SS_PLUS_EQUAL | SS_MINUS_EQUAL );
 */
static yatgParser_assignment_operator_return
assignment_operator(pyatgParser ctx)
{   
    yatgParser_assignment_operator_return retval;
    ANTLR3_UINT32 assignment_operator_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set166;

    pANTLR3_BASE_TREE set166_tree;

    /* Initialize rule variables
     */
    assignment_operator_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(37)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    set166       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set166_tree   = NULL;


    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:335:2: ( SS_EQUAL | SS_STAR_EQUAL | SS_FSLASH_EQUAL | SS_PERCENT_EQUAL | SS_PLUS_EQUAL | SS_MINUS_EQUAL )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set166=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == SS_EQUAL || ((LA(1) >= SS_STAR_EQUAL) && (LA(1) <= SS_MINUS_EQUAL)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set166)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_assignment_operator0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_assignment_operator0);    goto ruleassignment_operatorEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignment_operatorEx; /* Prevent compiler warnings */
    ruleassignment_operatorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(37, assignment_operator_StartIndex); }

    return retval;
}
/* $ANTLR end assignment_operator */

/** 
 * $ANTLR start logical_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:343:1: logical_expression : logical_or_expression ;
 */
static yatgParser_logical_expression_return
logical_expression(pyatgParser ctx)
{   
    yatgParser_logical_expression_return retval;
    ANTLR3_UINT32 logical_expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    yatgParser_logical_or_expression_return logical_or_expression167;
    #undef	RETURN_TYPE_logical_or_expression167
    #define	RETURN_TYPE_logical_or_expression167 yatgParser_logical_or_expression_return


    /* Initialize rule variables
     */
    logical_expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(38)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    logical_or_expression167.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:344:2: ( logical_or_expression )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:344:4: logical_or_expression
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_logical_or_expression_in_logical_expression2258);
            logical_or_expression167=logical_or_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelogical_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, logical_or_expression167.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogical_expressionEx; /* Prevent compiler warnings */
    rulelogical_expressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(38, logical_expression_StartIndex); }

    return retval;
}
/* $ANTLR end logical_expression */

/** 
 * $ANTLR start logical_or_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:347:1: logical_or_expression : logical_and_expression ( SS_D_BAR logical_and_expression )* ;
 */
static yatgParser_logical_or_expression_return
logical_or_expression(pyatgParser ctx)
{   
    yatgParser_logical_or_expression_return retval;
    ANTLR3_UINT32 logical_or_expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_D_BAR169;
    yatgParser_logical_and_expression_return logical_and_expression168;
    #undef	RETURN_TYPE_logical_and_expression168
    #define	RETURN_TYPE_logical_and_expression168 yatgParser_logical_and_expression_return

    yatgParser_logical_and_expression_return logical_and_expression170;
    #undef	RETURN_TYPE_logical_and_expression170
    #define	RETURN_TYPE_logical_and_expression170 yatgParser_logical_and_expression_return

    pANTLR3_BASE_TREE SS_D_BAR169_tree;

    /* Initialize rule variables
     */
    logical_or_expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(39)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_D_BAR169       = NULL;
    logical_and_expression168.tree = NULL;

    logical_and_expression170.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_D_BAR169_tree   = NULL;


    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:348:2: ( logical_and_expression ( SS_D_BAR logical_and_expression )* )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:348:4: logical_and_expression ( SS_D_BAR logical_and_expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_logical_and_expression_in_logical_or_expression2269);
            logical_and_expression168=logical_and_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelogical_or_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, logical_and_expression168.tree);

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:348:27: ( SS_D_BAR logical_and_expression )*

            for (;;)
            {
                int alt39=2;
                switch ( LA(1) ) 
                {
                case SS_D_BAR:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA39_56 = LA(2);
                		    if ( (synpred88_yatg(ctx)) ) 
                		    {
                		        alt39=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt39) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:348:28: SS_D_BAR logical_and_expression
            	    {
            	        SS_D_BAR169 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_D_BAR, &FOLLOW_SS_D_BAR_in_logical_or_expression2272); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_or_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        SS_D_BAR169_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SS_D_BAR169));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, SS_D_BAR169_tree, root_0));
            	        }
            	        FOLLOWPUSH(FOLLOW_logical_and_expression_in_logical_or_expression2275);
            	        logical_and_expression170=logical_and_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_or_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, logical_and_expression170.tree);

            	    }
            	    break;

            	default:
            	    goto loop39;	/* break out of the loop */
            	    break;
                }
            }
            loop39: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogical_or_expressionEx; /* Prevent compiler warnings */
    rulelogical_or_expressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(39, logical_or_expression_StartIndex); }

    return retval;
}
/* $ANTLR end logical_or_expression */

/** 
 * $ANTLR start logical_and_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:351:1: logical_and_expression : equality_expression ( SS_D_AMP equality_expression )* ;
 */
static yatgParser_logical_and_expression_return
logical_and_expression(pyatgParser ctx)
{   
    yatgParser_logical_and_expression_return retval;
    ANTLR3_UINT32 logical_and_expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_D_AMP172;
    yatgParser_equality_expression_return equality_expression171;
    #undef	RETURN_TYPE_equality_expression171
    #define	RETURN_TYPE_equality_expression171 yatgParser_equality_expression_return

    yatgParser_equality_expression_return equality_expression173;
    #undef	RETURN_TYPE_equality_expression173
    #define	RETURN_TYPE_equality_expression173 yatgParser_equality_expression_return

    pANTLR3_BASE_TREE SS_D_AMP172_tree;

    /* Initialize rule variables
     */
    logical_and_expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(40)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_D_AMP172       = NULL;
    equality_expression171.tree = NULL;

    equality_expression173.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_D_AMP172_tree   = NULL;


    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:352:2: ( equality_expression ( SS_D_AMP equality_expression )* )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:352:4: equality_expression ( SS_D_AMP equality_expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_equality_expression_in_logical_and_expression2288);
            equality_expression171=equality_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelogical_and_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, equality_expression171.tree);

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:352:24: ( SS_D_AMP equality_expression )*

            for (;;)
            {
                int alt40=2;
                switch ( LA(1) ) 
                {
                case SS_D_AMP:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA40_56 = LA(2);
                		    if ( (synpred89_yatg(ctx)) ) 
                		    {
                		        alt40=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt40) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:352:25: SS_D_AMP equality_expression
            	    {
            	        SS_D_AMP172 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_D_AMP, &FOLLOW_SS_D_AMP_in_logical_and_expression2291); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_and_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        SS_D_AMP172_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SS_D_AMP172));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, SS_D_AMP172_tree, root_0));
            	        }
            	        FOLLOWPUSH(FOLLOW_equality_expression_in_logical_and_expression2294);
            	        equality_expression173=equality_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_and_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, equality_expression173.tree);

            	    }
            	    break;

            	default:
            	    goto loop40;	/* break out of the loop */
            	    break;
                }
            }
            loop40: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogical_and_expressionEx; /* Prevent compiler warnings */
    rulelogical_and_expressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(40, logical_and_expression_StartIndex); }

    return retval;
}
/* $ANTLR end logical_and_expression */

/** 
 * $ANTLR start equality_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:355:1: equality_expression : relational_expression ( ( SS_D_EQUAL | SS_EXC_EQUAL ) relational_expression )* ;
 */
static yatgParser_equality_expression_return
equality_expression(pyatgParser ctx)
{   
    yatgParser_equality_expression_return retval;
    ANTLR3_UINT32 equality_expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set175;
    yatgParser_relational_expression_return relational_expression174;
    #undef	RETURN_TYPE_relational_expression174
    #define	RETURN_TYPE_relational_expression174 yatgParser_relational_expression_return

    yatgParser_relational_expression_return relational_expression176;
    #undef	RETURN_TYPE_relational_expression176
    #define	RETURN_TYPE_relational_expression176 yatgParser_relational_expression_return

    pANTLR3_BASE_TREE set175_tree;

    /* Initialize rule variables
     */
    equality_expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(41)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    set175       = NULL;
    relational_expression174.tree = NULL;

    relational_expression176.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    set175_tree   = NULL;


    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:356:2: ( relational_expression ( ( SS_D_EQUAL | SS_EXC_EQUAL ) relational_expression )* )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:356:4: relational_expression ( ( SS_D_EQUAL | SS_EXC_EQUAL ) relational_expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_relational_expression_in_equality_expression2307);
            relational_expression174=relational_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleequality_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, relational_expression174.tree);

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:356:26: ( ( SS_D_EQUAL | SS_EXC_EQUAL ) relational_expression )*

            for (;;)
            {
                int alt41=2;
                switch ( LA(1) ) 
                {
                case SS_D_EQUAL:
                case SS_EXC_EQUAL:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA41_56 = LA(2);
                		    if ( (synpred91_yatg(ctx)) ) 
                		    {
                		        alt41=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt41) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:356:27: ( SS_D_EQUAL | SS_EXC_EQUAL ) relational_expression
            	    {
            	        set175=(pANTLR3_COMMON_TOKEN)LT(1);
            	        set175=(pANTLR3_COMMON_TOKEN)LT(1);
            	        if ( ((LA(1) >= SS_D_EQUAL) && (LA(1) <= SS_EXC_EQUAL)) )
            	        {
            	            CONSUME();
            	            if ( BACKTRACKING==0 ) root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set175)), root_0));
            	            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else 
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return retval;
            	            }
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = &FOLLOW_set_in_equality_expression2310;
            	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_equality_expression2310);    goto ruleequality_expressionEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_relational_expression_in_equality_expression2317);
            	        relational_expression176=relational_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequality_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, relational_expression176.tree);

            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequality_expressionEx; /* Prevent compiler warnings */
    ruleequality_expressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(41, equality_expression_StartIndex); }

    return retval;
}
/* $ANTLR end equality_expression */

/** 
 * $ANTLR start relational_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:359:1: relational_expression : math_expression ( ( SS_LT | SS_GT | SS_LT_EQUAL | SS_GT_EQUAL ) math_expression )* ;
 */
static yatgParser_relational_expression_return
relational_expression(pyatgParser ctx)
{   
    yatgParser_relational_expression_return retval;
    ANTLR3_UINT32 relational_expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set178;
    yatgParser_math_expression_return math_expression177;
    #undef	RETURN_TYPE_math_expression177
    #define	RETURN_TYPE_math_expression177 yatgParser_math_expression_return

    yatgParser_math_expression_return math_expression179;
    #undef	RETURN_TYPE_math_expression179
    #define	RETURN_TYPE_math_expression179 yatgParser_math_expression_return

    pANTLR3_BASE_TREE set178_tree;

    /* Initialize rule variables
     */
    relational_expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(42)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    set178       = NULL;
    math_expression177.tree = NULL;

    math_expression179.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    set178_tree   = NULL;


    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:360:2: ( math_expression ( ( SS_LT | SS_GT | SS_LT_EQUAL | SS_GT_EQUAL ) math_expression )* )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:360:4: math_expression ( ( SS_LT | SS_GT | SS_LT_EQUAL | SS_GT_EQUAL ) math_expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_math_expression_in_relational_expression2330);
            math_expression177=math_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerelational_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, math_expression177.tree);

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:360:20: ( ( SS_LT | SS_GT | SS_LT_EQUAL | SS_GT_EQUAL ) math_expression )*

            for (;;)
            {
                int alt42=2;
                switch ( LA(1) ) 
                {
                case SS_LT:
                case SS_GT:
                case SS_LT_EQUAL:
                case SS_GT_EQUAL:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA42_56 = LA(2);
                		    if ( (synpred95_yatg(ctx)) ) 
                		    {
                		        alt42=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt42) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:360:21: ( SS_LT | SS_GT | SS_LT_EQUAL | SS_GT_EQUAL ) math_expression
            	    {
            	        set178=(pANTLR3_COMMON_TOKEN)LT(1);
            	        set178=(pANTLR3_COMMON_TOKEN)LT(1);
            	        if ( ((LA(1) >= SS_LT) && (LA(1) <= SS_GT_EQUAL)) )
            	        {
            	            CONSUME();
            	            if ( BACKTRACKING==0 ) root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set178)), root_0));
            	            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else 
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE;
            	                return retval;
            	            }
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = &FOLLOW_set_in_relational_expression2333;
            	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_relational_expression2333);    goto rulerelational_expressionEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_math_expression_in_relational_expression2344);
            	        math_expression179=math_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelational_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, math_expression179.tree);

            	    }
            	    break;

            	default:
            	    goto loop42;	/* break out of the loop */
            	    break;
                }
            }
            loop42: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelational_expressionEx; /* Prevent compiler warnings */
    rulerelational_expressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(42, relational_expression_StartIndex); }

    return retval;
}
/* $ANTLR end relational_expression */

/** 
 * $ANTLR start expr_seq
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:367:1: expr_seq : SS_OPAREN ( expr )* SS_CPAREN -> ^( ESEQ ( expr )+ ) ;
 */
static yatgParser_expr_seq_return
expr_seq(pyatgParser ctx)
{   
    yatgParser_expr_seq_return retval;
    ANTLR3_UINT32 expr_seq_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_OPAREN180;
    pANTLR3_COMMON_TOKEN    SS_CPAREN182;
    yatgParser_expr_return expr181;
    #undef	RETURN_TYPE_expr181
    #define	RETURN_TYPE_expr181 yatgParser_expr_return

    pANTLR3_BASE_TREE SS_OPAREN180_tree;
    pANTLR3_BASE_TREE SS_CPAREN182_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_CPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_OPAREN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */
    expr_seq_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(43)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_OPAREN180       = NULL;
    SS_CPAREN182       = NULL;
    expr181.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_OPAREN180_tree   = NULL;
    SS_CPAREN182_tree   = NULL;

    stream_SS_CPAREN   = NULL;
    #define CREATE_stream_SS_CPAREN  if (stream_SS_CPAREN == NULL) {stream_SS_CPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_CPAREN"); } 
    stream_SS_OPAREN   = NULL;
    #define CREATE_stream_SS_OPAREN  if (stream_SS_OPAREN == NULL) {stream_SS_OPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_OPAREN"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:368:2: ( SS_OPAREN ( expr )* SS_CPAREN -> ^( ESEQ ( expr )+ ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:368:4: SS_OPAREN ( expr )* SS_CPAREN
        {
            SS_OPAREN180 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_OPAREN, &FOLLOW_SS_OPAREN_in_expr_seq2361); 
            if  (HASEXCEPTION())
            {
                goto ruleexpr_seqEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_OPAREN; stream_SS_OPAREN->add(stream_SS_OPAREN, SS_OPAREN180, NULL); }


            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:368:14: ( expr )*

            for (;;)
            {
                int alt43=2;
                switch ( LA(1) ) 
                {
                case KW_LOCAL:
                case KW_GLOBAL:
                case IDENTIFIER:
                case KW_IF:
                case KW_DO:
                case KW_WHILE:
                case KW_FOR:
                case KW_IN:
                case KW_EXIT:
                case KW_WITH:
                case KW_CONTINUE:
                case KW_CASE:
                case SS_OPAREN:
                case KW_STRUCT:
                case KW_TRY:
                case KW_MAPPED:
                case KW_FUNCTION:
                case KW_FN:
                case KW_RETURN:
                case KW_ANIMATE:
                case KW_AT:
                case KW_COORDSYS:
                case KW_ABOUT:
                case KW_UNDO:
                case SS_MINUS:
                case SS_OBRACKET:
                case DIGIT:
                case HEX_LITERAL:
                case STRING_LITERIAL:
                case SS_HASH:
                case KW_TRUE:
                case KW_FALSE:
                case KW_ON:
                case KW_OFF:
                case KW_OK:
                case KW_UNDEFINED:
                case KW_UNSUPPLIED:
                	{
                		alt43=1;
                	}
                    break;

                }

                switch (alt43) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:368:15: expr
            	    {
            	        FOLLOWPUSH(FOLLOW_expr_in_expr_seq2364);
            	        expr181=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpr_seqEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr181.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */

            SS_CPAREN182 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_CPAREN, &FOLLOW_SS_CPAREN_in_expr_seq2369); 
            if  (HASEXCEPTION())
            {
                goto ruleexpr_seqEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_CPAREN; stream_SS_CPAREN->add(stream_SS_CPAREN, SS_CPAREN182, NULL); }


             
            /* AST REWRITE
             * elements          : expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 369:2: -> ^( ESEQ ( expr )+ )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:369:5: ^( ESEQ ( expr )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ESEQ, (pANTLR3_UINT8)"ESEQ"), root_1));

            	        if ((stream_expr == NULL || !stream_expr->hasNext(stream_expr))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_expr->hasNext(stream_expr))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	}
            	        	stream_expr->reset(stream_expr);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpr_seqEx; /* Prevent compiler warnings */
    ruleexpr_seqEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_CPAREN != NULL) stream_SS_CPAREN->free(stream_SS_CPAREN);
        if (stream_SS_OPAREN != NULL) stream_SS_OPAREN->free(stream_SS_OPAREN);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(43, expr_seq_StartIndex); }

    return retval;
}
/* $ANTLR end expr_seq */

/** 
 * $ANTLR start expr_g
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:371:1: expr_g : ( expr_seq | expr );
 */
static yatgParser_expr_g_return
expr_g(pyatgParser ctx)
{   
    yatgParser_expr_g_return retval;
    ANTLR3_UINT32 expr_g_StartIndex;
    pANTLR3_BASE_TREE root_0;

    yatgParser_expr_seq_return expr_seq183;
    #undef	RETURN_TYPE_expr_seq183
    #define	RETURN_TYPE_expr_seq183 yatgParser_expr_seq_return

    yatgParser_expr_return expr184;
    #undef	RETURN_TYPE_expr184
    #define	RETURN_TYPE_expr184 yatgParser_expr_return


    /* Initialize rule variables
     */
    expr_g_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(44)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    expr_seq183.tree = NULL;

    expr184.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:372:2: ( expr_seq | expr )
            
            ANTLR3_UINT32 alt44;

            alt44=2;

            switch ( LA(1) ) 
            {
            case SS_OPAREN:
            	{
            		switch ( LA(2) ) 
            		{
            		case IDENTIFIER:
            			{

            				{
            				    int LA44_36 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 36;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case DIGIT:
            			{

            				{
            				    int LA44_37 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 37;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case HEX_LITERAL:
            			{

            				{
            				    int LA44_38 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 38;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case STRING_LITERIAL:
            			{

            				{
            				    int LA44_39 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 39;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case SS_HASH:
            			{

            				{
            				    int LA44_40 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 40;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case SS_OBRACKET:
            			{

            				{
            				    int LA44_41 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 41;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_TRUE:
            			{

            				{
            				    int LA44_42 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 42;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FALSE:
            			{

            				{
            				    int LA44_43 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 43;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ON:
            			{

            				{
            				    int LA44_44 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 44;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_OFF:
            			{

            				{
            				    int LA44_45 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 45;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_OK:
            			{

            				{
            				    int LA44_46 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 46;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNDEFINED:
            			{

            				{
            				    int LA44_47 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 47;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNSUPPLIED:
            			{

            				{
            				    int LA44_48 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 48;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case SS_MINUS:
            			{

            				{
            				    int LA44_49 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 49;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case SS_OPAREN:
            			{

            				{
            				    int LA44_50 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 50;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_LOCAL:
            		case KW_GLOBAL:
            			{

            				{
            				    int LA44_51 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 51;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_IF:
            			{

            				{
            				    int LA44_52 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 52;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_WHILE:
            			{

            				{
            				    int LA44_53 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 53;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_DO:
            			{

            				{
            				    int LA44_54 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 54;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FOR:
            			{

            				{
            				    int LA44_55 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 55;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_EXIT:
            			{

            				{
            				    int LA44_56 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 56;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_CONTINUE:
            			{

            				{
            				    int LA44_57 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 57;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_CASE:
            			{

            				{
            				    int LA44_58 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 58;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_STRUCT:
            			{

            				{
            				    int LA44_59 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 59;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_TRY:
            			{

            				{
            				    int LA44_60 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 60;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_MAPPED:
            			{

            				{
            				    int LA44_61 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 61;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_FUNCTION:
            		case KW_FN:
            			{

            				{
            				    int LA44_62 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 62;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_RETURN:
            			{

            				{
            				    int LA44_63 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 63;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_WITH:
            			{

            				{
            				    int LA44_64 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 64;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ANIMATE:
            			{

            				{
            				    int LA44_65 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 65;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_AT:
            			{

            				{
            				    int LA44_66 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 66;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_IN:
            			{

            				{
            				    int LA44_67 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 67;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_COORDSYS:
            			{

            				{
            				    int LA44_68 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 68;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_ABOUT:
            			{

            				{
            				    int LA44_69 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 69;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case KW_UNDO:
            			{

            				{
            				    int LA44_70 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 70;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;
            		case SS_CPAREN:
            			{

            				{
            				    int LA44_71 = LA(3);
            				    if ( (synpred97_yatg(ctx)) ) 
            				    {
            				        alt44=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt44=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 44;
            				        EXCEPTION->state        = 71;


            				        goto ruleexpr_gEx;
            				    }
            				}
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 44;
            		    EXCEPTION->state        = 1;


            		    goto ruleexpr_gEx;
            		}

            	}
                break;
            case KW_LOCAL:
            case KW_GLOBAL:
            case IDENTIFIER:
            case KW_IF:
            case KW_DO:
            case KW_WHILE:
            case KW_FOR:
            case KW_IN:
            case KW_EXIT:
            case KW_WITH:
            case KW_CONTINUE:
            case KW_CASE:
            case KW_STRUCT:
            case KW_TRY:
            case KW_MAPPED:
            case KW_FUNCTION:
            case KW_FN:
            case KW_RETURN:
            case KW_ANIMATE:
            case KW_AT:
            case KW_COORDSYS:
            case KW_ABOUT:
            case KW_UNDO:
            case SS_MINUS:
            case SS_OBRACKET:
            case DIGIT:
            case HEX_LITERAL:
            case STRING_LITERIAL:
            case SS_HASH:
            case KW_TRUE:
            case KW_FALSE:
            case KW_ON:
            case KW_OFF:
            case KW_OK:
            case KW_UNDEFINED:
            case KW_UNSUPPLIED:
            	{
            		alt44=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 44;
                EXCEPTION->state        = 0;


                goto ruleexpr_gEx;
            }

            switch (alt44) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:372:5: expr_seq
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expr_seq_in_expr_g2390);
        	        expr_seq183=expr_seq(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpr_gEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr_seq183.tree);

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:373:5: expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expr_in_expr_g2396);
        	        expr184=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpr_gEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr184.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpr_gEx; /* Prevent compiler warnings */
    ruleexpr_gEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(44, expr_g_StartIndex); }

    return retval;
}
/* $ANTLR end expr_g */

/** 
 * $ANTLR start box2
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:392:1: box2 : SS_OBRACKET e1= expr_g SS_COMMA e2= expr_g SS_COMMA e3= expr_g SS_COMMA e4= expr_g SS_CBRACKET -> ^( P_BOX2 $e1 $e2 $e3 $e4) ;
 */
static yatgParser_box2_return
box2(pyatgParser ctx)
{   
    yatgParser_box2_return retval;
    ANTLR3_UINT32 box2_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_OBRACKET185;
    pANTLR3_COMMON_TOKEN    SS_COMMA186;
    pANTLR3_COMMON_TOKEN    SS_COMMA187;
    pANTLR3_COMMON_TOKEN    SS_COMMA188;
    pANTLR3_COMMON_TOKEN    SS_CBRACKET189;
    yatgParser_expr_g_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 yatgParser_expr_g_return

    yatgParser_expr_g_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 yatgParser_expr_g_return

    yatgParser_expr_g_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 yatgParser_expr_g_return

    yatgParser_expr_g_return e4;
    #undef	RETURN_TYPE_e4
    #define	RETURN_TYPE_e4 yatgParser_expr_g_return

    pANTLR3_BASE_TREE SS_OBRACKET185_tree;
    pANTLR3_BASE_TREE SS_COMMA186_tree;
    pANTLR3_BASE_TREE SS_COMMA187_tree;
    pANTLR3_BASE_TREE SS_COMMA188_tree;
    pANTLR3_BASE_TREE SS_CBRACKET189_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_CBRACKET;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_OBRACKET;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    box2_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(45)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_OBRACKET185       = NULL;
    SS_COMMA186       = NULL;
    SS_COMMA187       = NULL;
    SS_COMMA188       = NULL;
    SS_CBRACKET189       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    e4.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_OBRACKET185_tree   = NULL;
    SS_COMMA186_tree   = NULL;
    SS_COMMA187_tree   = NULL;
    SS_COMMA188_tree   = NULL;
    SS_CBRACKET189_tree   = NULL;

    stream_SS_CBRACKET   = NULL;
    #define CREATE_stream_SS_CBRACKET  if (stream_SS_CBRACKET == NULL) {stream_SS_CBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_CBRACKET"); } 
    stream_SS_COMMA   = NULL;
    #define CREATE_stream_SS_COMMA  if (stream_SS_COMMA == NULL) {stream_SS_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_COMMA"); } 
    stream_SS_OBRACKET   = NULL;
    #define CREATE_stream_SS_OBRACKET  if (stream_SS_OBRACKET == NULL) {stream_SS_OBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_OBRACKET"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:393:2: ( SS_OBRACKET e1= expr_g SS_COMMA e2= expr_g SS_COMMA e3= expr_g SS_COMMA e4= expr_g SS_CBRACKET -> ^( P_BOX2 $e1 $e2 $e3 $e4) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:393:4: SS_OBRACKET e1= expr_g SS_COMMA e2= expr_g SS_COMMA e3= expr_g SS_COMMA e4= expr_g SS_CBRACKET
        {
            SS_OBRACKET185 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_OBRACKET, &FOLLOW_SS_OBRACKET_in_box22419); 
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_OBRACKET; stream_SS_OBRACKET->add(stream_SS_OBRACKET, SS_OBRACKET185, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_box22423);
            e1=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, e1.tree, NULL); }
            SS_COMMA186 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_box22425); 
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA186, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_box22429);
            e2=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, e2.tree, NULL); }
            SS_COMMA187 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_box22431); 
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA187, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_box22435);
            e3=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, e3.tree, NULL); }
            SS_COMMA188 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_box22437); 
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA188, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_box22441);
            e4=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, e4.tree, NULL); }
            SS_CBRACKET189 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_CBRACKET, &FOLLOW_SS_CBRACKET_in_box22443); 
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_CBRACKET; stream_SS_CBRACKET->add(stream_SS_CBRACKET, SS_CBRACKET189, NULL); }


             
            /* AST REWRITE
             * elements          : e2, e1, e4, e3
             * token labels      : 
             * rule labels       : e3, e4, retval, e1, e2
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e4;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
            	stream_e4=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e4", e4.tree != NULL ? e4.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
            	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 394:2: -> ^( P_BOX2 $e1 $e2 $e3 $e4)
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:394:5: ^( P_BOX2 $e1 $e2 $e3 $e4)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, P_BOX2, (pANTLR3_UINT8)"P_BOX2"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e4 == NULL ? NULL : stream_e4->nextTree(stream_e4));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_e3 != NULL) stream_e3->free(stream_e3);
            	if (stream_e4 != NULL) stream_e4->free(stream_e4);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_e1 != NULL) stream_e1->free(stream_e1);
            	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebox2Ex; /* Prevent compiler warnings */
    rulebox2Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_CBRACKET != NULL) stream_SS_CBRACKET->free(stream_SS_CBRACKET);
        if (stream_SS_COMMA != NULL) stream_SS_COMMA->free(stream_SS_COMMA);
        if (stream_SS_OBRACKET != NULL) stream_SS_OBRACKET->free(stream_SS_OBRACKET);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(45, box2_StartIndex); }

    return retval;
}
/* $ANTLR end box2 */

/** 
 * $ANTLR start point3
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:397:1: point3 : SS_OBRACKET e1= expr_g SS_COMMA e2= expr_g SS_COMMA e3= expr_g SS_CBRACKET -> ^( P_P3 $e1 $e2 $e3) ;
 */
static yatgParser_point3_return
point3(pyatgParser ctx)
{   
    yatgParser_point3_return retval;
    ANTLR3_UINT32 point3_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_OBRACKET190;
    pANTLR3_COMMON_TOKEN    SS_COMMA191;
    pANTLR3_COMMON_TOKEN    SS_COMMA192;
    pANTLR3_COMMON_TOKEN    SS_CBRACKET193;
    yatgParser_expr_g_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 yatgParser_expr_g_return

    yatgParser_expr_g_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 yatgParser_expr_g_return

    yatgParser_expr_g_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 yatgParser_expr_g_return

    pANTLR3_BASE_TREE SS_OBRACKET190_tree;
    pANTLR3_BASE_TREE SS_COMMA191_tree;
    pANTLR3_BASE_TREE SS_COMMA192_tree;
    pANTLR3_BASE_TREE SS_CBRACKET193_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_CBRACKET;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_OBRACKET;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    point3_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(46)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_OBRACKET190       = NULL;
    SS_COMMA191       = NULL;
    SS_COMMA192       = NULL;
    SS_CBRACKET193       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_OBRACKET190_tree   = NULL;
    SS_COMMA191_tree   = NULL;
    SS_COMMA192_tree   = NULL;
    SS_CBRACKET193_tree   = NULL;

    stream_SS_CBRACKET   = NULL;
    #define CREATE_stream_SS_CBRACKET  if (stream_SS_CBRACKET == NULL) {stream_SS_CBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_CBRACKET"); } 
    stream_SS_COMMA   = NULL;
    #define CREATE_stream_SS_COMMA  if (stream_SS_COMMA == NULL) {stream_SS_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_COMMA"); } 
    stream_SS_OBRACKET   = NULL;
    #define CREATE_stream_SS_OBRACKET  if (stream_SS_OBRACKET == NULL) {stream_SS_OBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_OBRACKET"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:398:2: ( SS_OBRACKET e1= expr_g SS_COMMA e2= expr_g SS_COMMA e3= expr_g SS_CBRACKET -> ^( P_P3 $e1 $e2 $e3) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:398:4: SS_OBRACKET e1= expr_g SS_COMMA e2= expr_g SS_COMMA e3= expr_g SS_CBRACKET
        {
            SS_OBRACKET190 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_OBRACKET, &FOLLOW_SS_OBRACKET_in_point32473); 
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_OBRACKET; stream_SS_OBRACKET->add(stream_SS_OBRACKET, SS_OBRACKET190, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_point32477);
            e1=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, e1.tree, NULL); }
            SS_COMMA191 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_point32479); 
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA191, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_point32483);
            e2=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, e2.tree, NULL); }
            SS_COMMA192 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_point32485); 
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA192, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_point32489);
            e3=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, e3.tree, NULL); }
            SS_CBRACKET193 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_CBRACKET, &FOLLOW_SS_CBRACKET_in_point32491); 
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_CBRACKET; stream_SS_CBRACKET->add(stream_SS_CBRACKET, SS_CBRACKET193, NULL); }


             
            /* AST REWRITE
             * elements          : e1, e2, e3
             * token labels      : 
             * rule labels       : e3, retval, e1, e2
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
            	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 399:2: -> ^( P_P3 $e1 $e2 $e3)
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:399:5: ^( P_P3 $e1 $e2 $e3)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, P_P3, (pANTLR3_UINT8)"P_P3"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_e3 != NULL) stream_e3->free(stream_e3);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_e1 != NULL) stream_e1->free(stream_e1);
            	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepoint3Ex; /* Prevent compiler warnings */
    rulepoint3Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_CBRACKET != NULL) stream_SS_CBRACKET->free(stream_SS_CBRACKET);
        if (stream_SS_COMMA != NULL) stream_SS_COMMA->free(stream_SS_COMMA);
        if (stream_SS_OBRACKET != NULL) stream_SS_OBRACKET->free(stream_SS_OBRACKET);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(46, point3_StartIndex); }

    return retval;
}
/* $ANTLR end point3 */

/** 
 * $ANTLR start point2
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:402:1: point2 : SS_OBRACKET e1= expr_g SS_COMMA e2= expr_g SS_CBRACKET -> ^( P_P2 $e1 $e2) ;
 */
static yatgParser_point2_return
point2(pyatgParser ctx)
{   
    yatgParser_point2_return retval;
    ANTLR3_UINT32 point2_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_OBRACKET194;
    pANTLR3_COMMON_TOKEN    SS_COMMA195;
    pANTLR3_COMMON_TOKEN    SS_CBRACKET196;
    yatgParser_expr_g_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 yatgParser_expr_g_return

    yatgParser_expr_g_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 yatgParser_expr_g_return

    pANTLR3_BASE_TREE SS_OBRACKET194_tree;
    pANTLR3_BASE_TREE SS_COMMA195_tree;
    pANTLR3_BASE_TREE SS_CBRACKET196_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_CBRACKET;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_OBRACKET;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    point2_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(47)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_OBRACKET194       = NULL;
    SS_COMMA195       = NULL;
    SS_CBRACKET196       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_OBRACKET194_tree   = NULL;
    SS_COMMA195_tree   = NULL;
    SS_CBRACKET196_tree   = NULL;

    stream_SS_CBRACKET   = NULL;
    #define CREATE_stream_SS_CBRACKET  if (stream_SS_CBRACKET == NULL) {stream_SS_CBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_CBRACKET"); } 
    stream_SS_COMMA   = NULL;
    #define CREATE_stream_SS_COMMA  if (stream_SS_COMMA == NULL) {stream_SS_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_COMMA"); } 
    stream_SS_OBRACKET   = NULL;
    #define CREATE_stream_SS_OBRACKET  if (stream_SS_OBRACKET == NULL) {stream_SS_OBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_OBRACKET"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:403:2: ( SS_OBRACKET e1= expr_g SS_COMMA e2= expr_g SS_CBRACKET -> ^( P_P2 $e1 $e2) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:403:4: SS_OBRACKET e1= expr_g SS_COMMA e2= expr_g SS_CBRACKET
        {
            SS_OBRACKET194 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_OBRACKET, &FOLLOW_SS_OBRACKET_in_point22519); 
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_OBRACKET; stream_SS_OBRACKET->add(stream_SS_OBRACKET, SS_OBRACKET194, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_point22523);
            e1=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, e1.tree, NULL); }
            SS_COMMA195 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_point22525); 
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA195, NULL); }

            FOLLOWPUSH(FOLLOW_expr_g_in_point22529);
            e2=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, e2.tree, NULL); }
            SS_CBRACKET196 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_CBRACKET, &FOLLOW_SS_CBRACKET_in_point22531); 
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_SS_CBRACKET; stream_SS_CBRACKET->add(stream_SS_CBRACKET, SS_CBRACKET196, NULL); }


             
            /* AST REWRITE
             * elements          : e1, e2
             * token labels      : 
             * rule labels       : retval, e1, e2
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
            	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 404:2: -> ^( P_P2 $e1 $e2)
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:404:5: ^( P_P2 $e1 $e2)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, P_P2, (pANTLR3_UINT8)"P_P2"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_e1 != NULL) stream_e1->free(stream_e1);
            	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepoint2Ex; /* Prevent compiler warnings */
    rulepoint2Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_CBRACKET != NULL) stream_SS_CBRACKET->free(stream_SS_CBRACKET);
        if (stream_SS_COMMA != NULL) stream_SS_COMMA->free(stream_SS_COMMA);
        if (stream_SS_OBRACKET != NULL) stream_SS_OBRACKET->free(stream_SS_OBRACKET);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(47, point2_StartIndex); }

    return retval;
}
/* $ANTLR end point2 */

/** 
 * $ANTLR start array
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:407:1: array : ( SS_OBRACKET SS_CBRACKET -> ^( ARR_A ) | SS_OBRACKET ele+= expr_g ( SS_COMMA ele+= expr_g )* SS_CBRACKET -> ^( ARR_A ( $ele)+ ) );
 */
static yatgParser_array_return
array(pyatgParser ctx)
{   
    yatgParser_array_return retval;
    ANTLR3_UINT32 array_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_OBRACKET197;
    pANTLR3_COMMON_TOKEN    SS_CBRACKET198;
    pANTLR3_COMMON_TOKEN    SS_OBRACKET199;
    pANTLR3_COMMON_TOKEN    SS_COMMA200;
    pANTLR3_COMMON_TOKEN    SS_CBRACKET201;
    pANTLR3_VECTOR    list_ele;
    yatgParser_expr_g_return ele;
    #undef	RETURN_TYPE_ele
    #define	RETURN_TYPE_ele yatgParser_expr_g_return

    pANTLR3_BASE_TREE SS_OBRACKET197_tree;
    pANTLR3_BASE_TREE SS_CBRACKET198_tree;
    pANTLR3_BASE_TREE SS_OBRACKET199_tree;
    pANTLR3_BASE_TREE SS_COMMA200_tree;
    pANTLR3_BASE_TREE SS_CBRACKET201_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_CBRACKET;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_OBRACKET;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    array_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(48)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_OBRACKET197       = NULL;
    SS_CBRACKET198       = NULL;
    SS_OBRACKET199       = NULL;
    SS_COMMA200       = NULL;
    SS_CBRACKET201       = NULL;
    list_ele     = NULL;
    ele.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_OBRACKET197_tree   = NULL;
    SS_CBRACKET198_tree   = NULL;
    SS_OBRACKET199_tree   = NULL;
    SS_COMMA200_tree   = NULL;
    SS_CBRACKET201_tree   = NULL;

    stream_SS_CBRACKET   = NULL;
    #define CREATE_stream_SS_CBRACKET  if (stream_SS_CBRACKET == NULL) {stream_SS_CBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_CBRACKET"); } 
    stream_SS_COMMA   = NULL;
    #define CREATE_stream_SS_COMMA  if (stream_SS_COMMA == NULL) {stream_SS_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_COMMA"); } 
    stream_SS_OBRACKET   = NULL;
    #define CREATE_stream_SS_OBRACKET  if (stream_SS_OBRACKET == NULL) {stream_SS_OBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_OBRACKET"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:408:2: ( SS_OBRACKET SS_CBRACKET -> ^( ARR_A ) | SS_OBRACKET ele+= expr_g ( SS_COMMA ele+= expr_g )* SS_CBRACKET -> ^( ARR_A ( $ele)+ ) )
            
            ANTLR3_UINT32 alt46;

            alt46=2;

            switch ( LA(1) ) 
            {
            case SS_OBRACKET:
            	{
            		switch ( LA(2) ) 
            		{
            		case SS_CBRACKET:
            			{
            				alt46=1;
            			}
            		    break;
            		case KW_LOCAL:
            		case KW_GLOBAL:
            		case IDENTIFIER:
            		case KW_IF:
            		case KW_DO:
            		case KW_WHILE:
            		case KW_FOR:
            		case KW_IN:
            		case KW_EXIT:
            		case KW_WITH:
            		case KW_CONTINUE:
            		case KW_CASE:
            		case SS_OPAREN:
            		case KW_STRUCT:
            		case KW_TRY:
            		case KW_MAPPED:
            		case KW_FUNCTION:
            		case KW_FN:
            		case KW_RETURN:
            		case KW_ANIMATE:
            		case KW_AT:
            		case KW_COORDSYS:
            		case KW_ABOUT:
            		case KW_UNDO:
            		case SS_MINUS:
            		case SS_OBRACKET:
            		case DIGIT:
            		case HEX_LITERAL:
            		case STRING_LITERIAL:
            		case SS_HASH:
            		case KW_TRUE:
            		case KW_FALSE:
            		case KW_ON:
            		case KW_OFF:
            		case KW_OK:
            		case KW_UNDEFINED:
            		case KW_UNSUPPLIED:
            			{
            				alt46=2;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 46;
            		    EXCEPTION->state        = 1;


            		    goto rulearrayEx;
            		}

            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 46;
                EXCEPTION->state        = 0;


                goto rulearrayEx;
            }

            switch (alt46) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:408:4: SS_OBRACKET SS_CBRACKET
        	    {
        	        SS_OBRACKET197 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_OBRACKET, &FOLLOW_SS_OBRACKET_in_array2556); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_OBRACKET; stream_SS_OBRACKET->add(stream_SS_OBRACKET, SS_OBRACKET197, NULL); }

        	        SS_CBRACKET198 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_CBRACKET, &FOLLOW_SS_CBRACKET_in_array2558); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_CBRACKET; stream_SS_CBRACKET->add(stream_SS_CBRACKET, SS_CBRACKET198, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 409:2: -> ^( ARR_A )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:409:5: ^( ARR_A )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARR_A, (pANTLR3_UINT8)"ARR_A"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:410:4: SS_OBRACKET ele+= expr_g ( SS_COMMA ele+= expr_g )* SS_CBRACKET
        	    {
        	        SS_OBRACKET199 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_OBRACKET, &FOLLOW_SS_OBRACKET_in_array2570); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_OBRACKET; stream_SS_OBRACKET->add(stream_SS_OBRACKET, SS_OBRACKET199, NULL); }

        	        FOLLOWPUSH(FOLLOW_expr_g_in_array2574);
        	        ele=expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, ele.tree, NULL); }
        	        /* listLabelTrack(label)
        	         */
        	        if (list_ele == NULL)
        	        {
        	            list_ele=ctx->vectors->newVector(ctx->vectors);
        	        }
        	        list_ele->add(list_ele, ele.tree, NULL);

        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:410:28: ( SS_COMMA ele+= expr_g )*

        	        for (;;)
        	        {
        	            int alt45=2;
        	            switch ( LA(1) ) 
        	            {
        	            case SS_COMMA:
        	            	{
        	            		alt45=1;
        	            	}
        	                break;

        	            }

        	            switch (alt45) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:410:30: SS_COMMA ele+= expr_g
        	        	    {
        	        	        SS_COMMA200 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_array2578); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA200, NULL); }

        	        	        FOLLOWPUSH(FOLLOW_expr_g_in_array2582);
        	        	        ele=expr_g(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, ele.tree, NULL); }
        	        	        /* listLabelTrack(label)
        	        	         */
        	        	        if (list_ele == NULL)
        	        	        {
        	        	            list_ele=ctx->vectors->newVector(ctx->vectors);
        	        	        }
        	        	        list_ele->add(list_ele, ele.tree, NULL);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop45;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop45: ; /* Jump out to here if this rule does not match */

        	        SS_CBRACKET201 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_CBRACKET, &FOLLOW_SS_CBRACKET_in_array2587); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_CBRACKET; stream_SS_CBRACKET->add(stream_SS_CBRACKET, SS_CBRACKET201, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : ele
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : ele
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ele;
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_ele=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token ele", list_ele);
        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 411:2: -> ^( ARR_A ( $ele)+ )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:411:5: ^( ARR_A ( $ele)+ )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARR_A, (pANTLR3_UINT8)"ARR_A"), root_1));

        	        	        if ((stream_ele == NULL || !stream_ele->hasNext(stream_ele))  )
        	        	        {
        	        	            CONSTRUCTEX();
        	        	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
        	        	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
        	        	        }
        	        	        else
        	        	        {
        	        	        	while ( (stream_ele->hasNext(stream_ele))  ) {
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_ele == NULL ? NULL : stream_ele->nextTree(stream_ele));

        	        	        	}
        	        	        	stream_ele->reset(stream_ele);

        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_ele != NULL) stream_ele->free(stream_ele);

        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayEx; /* Prevent compiler warnings */
    rulearrayEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_CBRACKET != NULL) stream_SS_CBRACKET->free(stream_SS_CBRACKET);
        if (stream_SS_COMMA != NULL) stream_SS_COMMA->free(stream_SS_COMMA);
        if (stream_SS_OBRACKET != NULL) stream_SS_OBRACKET->free(stream_SS_OBRACKET);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(48, array_StartIndex); }

    return retval;
}
/* $ANTLR end array */

/** 
 * $ANTLR start bitarray
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:414:1: bitarray : ( SS_HASH SS_OCBRACKET SS_CCBRACKET -> ^( ARR_BIT ) | SS_HASH SS_OCBRACKET ele+= arrrange ( SS_COMMA ele+= arrrange )* SS_CCBRACKET -> ^( ARR_BIT ( $ele)+ ) );
 */
static yatgParser_bitarray_return
bitarray(pyatgParser ctx)
{   
    yatgParser_bitarray_return retval;
    ANTLR3_UINT32 bitarray_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_HASH202;
    pANTLR3_COMMON_TOKEN    SS_OCBRACKET203;
    pANTLR3_COMMON_TOKEN    SS_CCBRACKET204;
    pANTLR3_COMMON_TOKEN    SS_HASH205;
    pANTLR3_COMMON_TOKEN    SS_OCBRACKET206;
    pANTLR3_COMMON_TOKEN    SS_COMMA207;
    pANTLR3_COMMON_TOKEN    SS_CCBRACKET208;
    pANTLR3_VECTOR    list_ele;
    yatgParser_arrrange_return ele;
    #undef	RETURN_TYPE_ele
    #define	RETURN_TYPE_ele yatgParser_arrrange_return

    pANTLR3_BASE_TREE SS_HASH202_tree;
    pANTLR3_BASE_TREE SS_OCBRACKET203_tree;
    pANTLR3_BASE_TREE SS_CCBRACKET204_tree;
    pANTLR3_BASE_TREE SS_HASH205_tree;
    pANTLR3_BASE_TREE SS_OCBRACKET206_tree;
    pANTLR3_BASE_TREE SS_COMMA207_tree;
    pANTLR3_BASE_TREE SS_CCBRACKET208_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_OCBRACKET;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_CCBRACKET;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_HASH;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arrrange;
    /* Initialize rule variables
     */
    bitarray_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(49)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_HASH202       = NULL;
    SS_OCBRACKET203       = NULL;
    SS_CCBRACKET204       = NULL;
    SS_HASH205       = NULL;
    SS_OCBRACKET206       = NULL;
    SS_COMMA207       = NULL;
    SS_CCBRACKET208       = NULL;
    list_ele     = NULL;
    ele.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_HASH202_tree   = NULL;
    SS_OCBRACKET203_tree   = NULL;
    SS_CCBRACKET204_tree   = NULL;
    SS_HASH205_tree   = NULL;
    SS_OCBRACKET206_tree   = NULL;
    SS_COMMA207_tree   = NULL;
    SS_CCBRACKET208_tree   = NULL;

    stream_SS_COMMA   = NULL;
    #define CREATE_stream_SS_COMMA  if (stream_SS_COMMA == NULL) {stream_SS_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_COMMA"); } 
    stream_SS_OCBRACKET   = NULL;
    #define CREATE_stream_SS_OCBRACKET  if (stream_SS_OCBRACKET == NULL) {stream_SS_OCBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_OCBRACKET"); } 
    stream_SS_CCBRACKET   = NULL;
    #define CREATE_stream_SS_CCBRACKET  if (stream_SS_CCBRACKET == NULL) {stream_SS_CCBRACKET = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_CCBRACKET"); } 
    stream_SS_HASH   = NULL;
    #define CREATE_stream_SS_HASH  if (stream_SS_HASH == NULL) {stream_SS_HASH = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_HASH"); } 
    stream_arrrange   = NULL;
    #define CREATE_stream_arrrange  if (stream_arrrange == NULL) {stream_arrrange = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arrrange"); }

    retval.tree  = NULL;
    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:415:2: ( SS_HASH SS_OCBRACKET SS_CCBRACKET -> ^( ARR_BIT ) | SS_HASH SS_OCBRACKET ele+= arrrange ( SS_COMMA ele+= arrrange )* SS_CCBRACKET -> ^( ARR_BIT ( $ele)+ ) )
            
            ANTLR3_UINT32 alt48;

            alt48=2;

            switch ( LA(1) ) 
            {
            case SS_HASH:
            	{
            		switch ( LA(2) ) 
            		{
            		case SS_OCBRACKET:
            			{

            				{
            				    int LA48_2 = LA(3);
            				    if ( (synpred100_yatg(ctx)) ) 
            				    {
            				        alt48=1;
            				    }
            				    else if ( (ANTLR3_TRUE) ) 
            				    {
            				        alt48=2;
            				    }
            				    else 
            				    {
            				        if (BACKTRACKING>0)
            				        {
            				            FAILEDFLAG = ANTLR3_TRUE;
            				            return retval;
            				        }
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 48;
            				        EXCEPTION->state        = 2;


            				        goto rulebitarrayEx;
            				    }
            				}
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 48;
            		    EXCEPTION->state        = 1;


            		    goto rulebitarrayEx;
            		}

            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 48;
                EXCEPTION->state        = 0;


                goto rulebitarrayEx;
            }

            switch (alt48) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:415:4: SS_HASH SS_OCBRACKET SS_CCBRACKET
        	    {
        	        SS_HASH202 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_HASH, &FOLLOW_SS_HASH_in_bitarray2610); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_HASH; stream_SS_HASH->add(stream_SS_HASH, SS_HASH202, NULL); }

        	        SS_OCBRACKET203 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_OCBRACKET, &FOLLOW_SS_OCBRACKET_in_bitarray2612); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_OCBRACKET; stream_SS_OCBRACKET->add(stream_SS_OCBRACKET, SS_OCBRACKET203, NULL); }

        	        SS_CCBRACKET204 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_CCBRACKET, &FOLLOW_SS_CCBRACKET_in_bitarray2614); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_CCBRACKET; stream_SS_CCBRACKET->add(stream_SS_CCBRACKET, SS_CCBRACKET204, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 415:38: -> ^( ARR_BIT )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:415:41: ^( ARR_BIT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARR_BIT, (pANTLR3_UINT8)"ARR_BIT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:416:4: SS_HASH SS_OCBRACKET ele+= arrrange ( SS_COMMA ele+= arrrange )* SS_CCBRACKET
        	    {
        	        SS_HASH205 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_HASH, &FOLLOW_SS_HASH_in_bitarray2625); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_HASH; stream_SS_HASH->add(stream_SS_HASH, SS_HASH205, NULL); }

        	        SS_OCBRACKET206 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_OCBRACKET, &FOLLOW_SS_OCBRACKET_in_bitarray2627); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_OCBRACKET; stream_SS_OCBRACKET->add(stream_SS_OCBRACKET, SS_OCBRACKET206, NULL); }

        	        FOLLOWPUSH(FOLLOW_arrrange_in_bitarray2631);
        	        ele=arrrange(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_arrrange; stream_arrrange->add(stream_arrrange, ele.tree, NULL); }
        	        /* listLabelTrack(label)
        	         */
        	        if (list_ele == NULL)
        	        {
        	            list_ele=ctx->vectors->newVector(ctx->vectors);
        	        }
        	        list_ele->add(list_ele, ele.tree, NULL);

        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:416:39: ( SS_COMMA ele+= arrrange )*

        	        for (;;)
        	        {
        	            int alt47=2;
        	            switch ( LA(1) ) 
        	            {
        	            case SS_COMMA:
        	            	{
        	            		alt47=1;
        	            	}
        	                break;

        	            }

        	            switch (alt47) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:416:41: SS_COMMA ele+= arrrange
        	        	    {
        	        	        SS_COMMA207 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_bitarray2635); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulebitarrayEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_COMMA; stream_SS_COMMA->add(stream_SS_COMMA, SS_COMMA207, NULL); }

        	        	        FOLLOWPUSH(FOLLOW_arrrange_in_bitarray2639);
        	        	        ele=arrrange(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulebitarrayEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_arrrange; stream_arrrange->add(stream_arrrange, ele.tree, NULL); }
        	        	        /* listLabelTrack(label)
        	        	         */
        	        	        if (list_ele == NULL)
        	        	        {
        	        	            list_ele=ctx->vectors->newVector(ctx->vectors);
        	        	        }
        	        	        list_ele->add(list_ele, ele.tree, NULL);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop47;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop47: ; /* Jump out to here if this rule does not match */

        	        SS_CCBRACKET208 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_CCBRACKET, &FOLLOW_SS_CCBRACKET_in_bitarray2644); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_CCBRACKET; stream_SS_CCBRACKET->add(stream_SS_CCBRACKET, SS_CCBRACKET208, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : ele
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : ele
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ele;
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_ele=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token ele", list_ele);
        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 416:80: -> ^( ARR_BIT ( $ele)+ )
        	        	{
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:416:83: ^( ARR_BIT ( $ele)+ )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARR_BIT, (pANTLR3_UINT8)"ARR_BIT"), root_1));

        	        	        if ((stream_ele == NULL || !stream_ele->hasNext(stream_ele))  )
        	        	        {
        	        	            CONSTRUCTEX();
        	        	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
        	        	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
        	        	        }
        	        	        else
        	        	        {
        	        	        	while ( (stream_ele->hasNext(stream_ele))  ) {
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_ele == NULL ? NULL : stream_ele->nextTree(stream_ele));

        	        	        	}
        	        	        	stream_ele->reset(stream_ele);

        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_ele != NULL) stream_ele->free(stream_ele);

        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitarrayEx; /* Prevent compiler warnings */
    rulebitarrayEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_COMMA != NULL) stream_SS_COMMA->free(stream_SS_COMMA);
        if (stream_SS_OCBRACKET != NULL) stream_SS_OCBRACKET->free(stream_SS_OCBRACKET);
        if (stream_SS_CCBRACKET != NULL) stream_SS_CCBRACKET->free(stream_SS_CCBRACKET);
        if (stream_SS_HASH != NULL) stream_SS_HASH->free(stream_SS_HASH);
        if (stream_arrrange != NULL) stream_arrrange->free(stream_arrrange);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(49, bitarray_StartIndex); }

    return retval;
}
/* $ANTLR end bitarray */

/** 
 * $ANTLR start arrrange
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:419:1: arrrange : (e1= expr_g ( SS_D_DOT e2= expr_g )? ) -> ^( ARR_BIT_RANGE $e1 ( $e2)? ) ;
 */
static yatgParser_arrrange_return
arrrange(pyatgParser ctx)
{   
    yatgParser_arrrange_return retval;
    ANTLR3_UINT32 arrrange_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SS_D_DOT209;
    yatgParser_expr_g_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 yatgParser_expr_g_return

    yatgParser_expr_g_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 yatgParser_expr_g_return

    pANTLR3_BASE_TREE SS_D_DOT209_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SS_D_DOT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr_g;
    /* Initialize rule variables
     */
    arrrange_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(50)) )
    {
    	retval.start = 0;

        {
        }


        return retval; 
    }
    SS_D_DOT209       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SS_D_DOT209_tree   = NULL;

    stream_SS_D_DOT   = NULL;
    #define CREATE_stream_SS_D_DOT  if (stream_SS_D_DOT == NULL) {stream_SS_D_DOT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SS_D_DOT"); } 
    stream_expr_g   = NULL;
    #define CREATE_stream_expr_g  if (stream_expr_g == NULL) {stream_expr_g = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr_g"); }

    retval.tree  = NULL;
    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:420:2: ( (e1= expr_g ( SS_D_DOT e2= expr_g )? ) -> ^( ARR_BIT_RANGE $e1 ( $e2)? ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:420:4: (e1= expr_g ( SS_D_DOT e2= expr_g )? )
        {
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:420:4: (e1= expr_g ( SS_D_DOT e2= expr_g )? )
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:420:5: e1= expr_g ( SS_D_DOT e2= expr_g )?
            {
                FOLLOWPUSH(FOLLOW_expr_g_in_arrrange2668);
                e1=expr_g(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulearrrangeEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, e1.tree, NULL); }

                // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:420:15: ( SS_D_DOT e2= expr_g )?
                {
                    int alt49=2;
                    switch ( LA(1) ) 
                    {
                        case SS_D_DOT:
                        	{
                        		alt49=1;
                        	}
                            break;
                    }

                    switch (alt49) 
                    {
                	case 1:
                	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:420:17: SS_D_DOT e2= expr_g
                	    {
                	        SS_D_DOT209 = (pANTLR3_COMMON_TOKEN) MATCHT(SS_D_DOT, &FOLLOW_SS_D_DOT_in_arrrange2672); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulearrrangeEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_SS_D_DOT; stream_SS_D_DOT->add(stream_SS_D_DOT, SS_D_DOT209, NULL); }

                	        FOLLOWPUSH(FOLLOW_expr_g_in_arrrange2676);
                	        e2=expr_g(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulearrrangeEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        }
                	        if ( BACKTRACKING==0 ) { CREATE_stream_expr_g; stream_expr_g->add(stream_expr_g, e2.tree, NULL); }

                	    }
                	    break;

                    }
                }

            }


             
            /* AST REWRITE
             * elements          : e2, e1
             * token labels      : 
             * rule labels       : retval, e1, e2
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
            	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 421:2: -> ^( ARR_BIT_RANGE $e1 ( $e2)? )
            	{
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:421:5: ^( ARR_BIT_RANGE $e1 ( $e2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARR_BIT_RANGE, (pANTLR3_UINT8)"ARR_BIT_RANGE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:421:25: ( $e2)?
            	        {
            	        	if ( (stream_e2 != NULL && stream_e2->hasNext(stream_e2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	}
            	        	if ( stream_e2 != NULL) stream_e2->reset(stream_e2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_e1 != NULL) stream_e1->free(stream_e1);
            	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulearrrangeEx; /* Prevent compiler warnings */
    rulearrrangeEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SS_D_DOT != NULL) stream_SS_D_DOT->free(stream_SS_D_DOT);
        if (stream_expr_g != NULL) stream_expr_g->free(stream_expr_g);
    }

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }

    if ( BACKTRACKING>0 ) { MEMOIZE(50, arrrange_StartIndex); }

    return retval;
}
/* $ANTLR end arrrange */

// $ANTLR start synpred2_yatg
static void synpred2_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:116:4: ( assignment_expression )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:116:4: assignment_expression
    {
        FOLLOWPUSH(FOLLOW_assignment_expression_in_synpred2_yatg424);
        assignment_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred2_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred2_yatgEx; /* Prevent compiler warnings */
rulesynpred2_yatgEx: ;

}
// $ANTLR end synpred2_yatg

// $ANTLR start synpred16_yatg
static void synpred16_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:134:21: ( SS_COMMA decl )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:134:21: SS_COMMA decl
    {
         MATCHT(SS_COMMA, &FOLLOW_SS_COMMA_in_synpred16_yatg573); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred16_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_decl_in_synpred16_yatg575);
        decl(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred16_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred16_yatgEx; /* Prevent compiler warnings */
rulesynpred16_yatgEx: ;

}
// $ANTLR end synpred16_yatg

// $ANTLR start synpred18_yatg
static void synpred18_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:143:17: ( SS_EQUAL expr_g )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:143:17: SS_EQUAL expr_g
    {
         MATCHT(SS_EQUAL, &FOLLOW_SS_EQUAL_in_synpred18_yatg626); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred18_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_expr_g_in_synpred18_yatg628);
        expr_g(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred18_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred18_yatgEx; /* Prevent compiler warnings */
rulesynpred18_yatgEx: ;

}
// $ANTLR end synpred18_yatg

// $ANTLR start synpred20_yatg
static void synpred20_yatg_fragment(pyatgParser ctx ) 
{
	yatgParser_expr_g_return relse;
	#undef	RETURN_TYPE_relse
	#define	RETURN_TYPE_relse yatgParser_expr_g_return

    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:149:57: ( KW_ELSE relse= expr_g )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:149:57: KW_ELSE relse= expr_g
    {
         MATCHT(KW_ELSE, &FOLLOW_KW_ELSE_in_synpred20_yatg685); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred20_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_expr_g_in_synpred20_yatg689);
        relse=expr_g(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred20_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred20_yatgEx; /* Prevent compiler warnings */
rulesynpred20_yatgEx: ;

}
// $ANTLR end synpred20_yatg

// $ANTLR start synpred26_yatg
static void synpred26_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:176:14: ( KW_WITH )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:176:16: KW_WITH
    {
         MATCHT(KW_WITH, &FOLLOW_KW_WITH_in_synpred26_yatg986); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred26_yatgEx; /* Prevent compiler warnings */
rulesynpred26_yatgEx: ;

}
// $ANTLR end synpred26_yatg

// $ANTLR start synpred53_yatg
static void synpred53_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:262:33: ( ( SS_PLUS | SS_MINUS ) multiplicative_expression )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:262:33: ( SS_PLUS | SS_MINUS ) multiplicative_expression
    {
        if ( ((LA(1) >= SS_PLUS) && (LA(1) <= SS_MINUS)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred53_yatg1717;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred53_yatg1717);    goto rulesynpred53_yatgEx;
        }

        FOLLOWPUSH(FOLLOW_multiplicative_expression_in_synpred53_yatg1724);
        multiplicative_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred53_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred53_yatgEx; /* Prevent compiler warnings */
rulesynpred53_yatgEx: ;

}
// $ANTLR end synpred53_yatg

// $ANTLR start synpred56_yatg
static void synpred56_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:266:24: ( ( SS_STAR | SS_FSLASH | SS_PERCENT ) unary_expression )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:266:24: ( SS_STAR | SS_FSLASH | SS_PERCENT ) unary_expression
    {
        if ( ((LA(1) >= SS_STAR) && (LA(1) <= SS_PERCENT)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred56_yatg1743;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred56_yatg1743);    goto rulesynpred56_yatgEx;
        }

        FOLLOWPUSH(FOLLOW_unary_expression_in_synpred56_yatg1752);
        unary_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred56_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred56_yatgEx; /* Prevent compiler warnings */
rulesynpred56_yatgEx: ;

}
// $ANTLR end synpred56_yatg

// $ANTLR start synpred60_yatg
static void synpred60_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:287:16: ( operand_op )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:287:16: operand_op
    {
        FOLLOWPUSH(FOLLOW_operand_op_in_synpred60_yatg1863);
        operand_op(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred60_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred60_yatgEx; /* Prevent compiler warnings */
rulesynpred60_yatgEx: ;

}
// $ANTLR end synpred60_yatg

// $ANTLR start synpred69_yatg
static void synpred69_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:303:7: ( array )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:303:7: array
    {
        FOLLOWPUSH(FOLLOW_array_in_synpred69_yatg2036);
        array(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred69_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred69_yatgEx; /* Prevent compiler warnings */
rulesynpred69_yatgEx: ;

}
// $ANTLR end synpred69_yatg

// $ANTLR start synpred71_yatg
static void synpred71_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:305:8: ( box2 )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:305:8: box2
    {
        FOLLOWPUSH(FOLLOW_box2_in_synpred71_yatg2054);
        box2(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred71_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred71_yatgEx; /* Prevent compiler warnings */
rulesynpred71_yatgEx: ;

}
// $ANTLR end synpred71_yatg

// $ANTLR start synpred72_yatg
static void synpred72_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:306:7: ( point3 )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:306:7: point3
    {
        FOLLOWPUSH(FOLLOW_point3_in_synpred72_yatg2062);
        point3(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred72_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred72_yatgEx; /* Prevent compiler warnings */
rulesynpred72_yatgEx: ;

}
// $ANTLR end synpred72_yatg

// $ANTLR start synpred73_yatg
static void synpred73_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:307:7: ( point2 )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:307:7: point2
    {
        FOLLOWPUSH(FOLLOW_point2_in_synpred73_yatg2070);
        point2(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred73_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred73_yatgEx; /* Prevent compiler warnings */
rulesynpred73_yatgEx: ;

}
// $ANTLR end synpred73_yatg

// $ANTLR start synpred82_yatg
static void synpred82_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:325:4: ( lvalue assignment_operator expr )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:325:4: lvalue assignment_operator expr
    {
        FOLLOWPUSH(FOLLOW_lvalue_in_synpred82_yatg2179);
        lvalue(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred82_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_assignment_operator_in_synpred82_yatg2181);
        assignment_operator(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred82_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_expr_in_synpred82_yatg2183);
        expr(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred82_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred82_yatgEx; /* Prevent compiler warnings */
rulesynpred82_yatgEx: ;

}
// $ANTLR end synpred82_yatg

// $ANTLR start synpred88_yatg
static void synpred88_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:348:28: ( SS_D_BAR logical_and_expression )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:348:28: SS_D_BAR logical_and_expression
    {
         MATCHT(SS_D_BAR, &FOLLOW_SS_D_BAR_in_synpred88_yatg2272); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred88_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_logical_and_expression_in_synpred88_yatg2275);
        logical_and_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred88_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred88_yatgEx; /* Prevent compiler warnings */
rulesynpred88_yatgEx: ;

}
// $ANTLR end synpred88_yatg

// $ANTLR start synpred89_yatg
static void synpred89_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:352:25: ( SS_D_AMP equality_expression )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:352:25: SS_D_AMP equality_expression
    {
         MATCHT(SS_D_AMP, &FOLLOW_SS_D_AMP_in_synpred89_yatg2291); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred89_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_equality_expression_in_synpred89_yatg2294);
        equality_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred89_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred89_yatgEx; /* Prevent compiler warnings */
rulesynpred89_yatgEx: ;

}
// $ANTLR end synpred89_yatg

// $ANTLR start synpred91_yatg
static void synpred91_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:356:27: ( ( SS_D_EQUAL | SS_EXC_EQUAL ) relational_expression )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:356:27: ( SS_D_EQUAL | SS_EXC_EQUAL ) relational_expression
    {
        if ( ((LA(1) >= SS_D_EQUAL) && (LA(1) <= SS_EXC_EQUAL)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred91_yatg2310;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred91_yatg2310);    goto rulesynpred91_yatgEx;
        }

        FOLLOWPUSH(FOLLOW_relational_expression_in_synpred91_yatg2317);
        relational_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred91_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred91_yatgEx; /* Prevent compiler warnings */
rulesynpred91_yatgEx: ;

}
// $ANTLR end synpred91_yatg

// $ANTLR start synpred95_yatg
static void synpred95_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:360:21: ( ( SS_LT | SS_GT | SS_LT_EQUAL | SS_GT_EQUAL ) math_expression )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:360:21: ( SS_LT | SS_GT | SS_LT_EQUAL | SS_GT_EQUAL ) math_expression
    {
        if ( ((LA(1) >= SS_LT) && (LA(1) <= SS_GT_EQUAL)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred95_yatg2333;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred95_yatg2333);    goto rulesynpred95_yatgEx;
        }

        FOLLOWPUSH(FOLLOW_math_expression_in_synpred95_yatg2344);
        math_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred95_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred95_yatgEx; /* Prevent compiler warnings */
rulesynpred95_yatgEx: ;

}
// $ANTLR end synpred95_yatg

// $ANTLR start synpred97_yatg
static void synpred97_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:372:5: ( expr_seq )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:372:5: expr_seq
    {
        FOLLOWPUSH(FOLLOW_expr_seq_in_synpred97_yatg2390);
        expr_seq(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred97_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred97_yatgEx; /* Prevent compiler warnings */
rulesynpred97_yatgEx: ;

}
// $ANTLR end synpred97_yatg

// $ANTLR start synpred100_yatg
static void synpred100_yatg_fragment(pyatgParser ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:415:4: ( SS_HASH SS_OCBRACKET SS_CCBRACKET )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatg.g:415:4: SS_HASH SS_OCBRACKET SS_CCBRACKET
    {
         MATCHT(SS_HASH, &FOLLOW_SS_HASH_in_synpred100_yatg2610); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred100_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(SS_OCBRACKET, &FOLLOW_SS_OCBRACKET_in_synpred100_yatg2612); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred100_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(SS_CCBRACKET, &FOLLOW_SS_CCBRACKET_in_synpred100_yatg2614); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred100_yatgEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred100_yatgEx; /* Prevent compiler warnings */
rulesynpred100_yatgEx: ;

}
// $ANTLR end synpred100_yatg
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred88_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred88_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred89_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred89_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred100_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred100_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred56_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred56_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred2_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred2_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred26_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred72_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred72_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred18_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred18_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred95_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred95_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred97_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred97_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred82_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred82_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred91_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred91_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred20_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred20_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred73_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred73_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred60_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred60_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred69_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred69_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred16_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred16_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred53_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred53_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred71_yatg(pyatgParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred71_yatg_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
