/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : yatgWalker.g
 *     -                            On : 2009-10-25 09:36:52
 *     -           for the tree parser : yatgWalkerTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "yatgWalker.h"
/* ----------------------------------------- */
#include <iostream>
using namespace std;
#include "../ZSymbolTable/ZSymbolTable.h"
ZSymbolTable<int,long> zym;




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pyatgWalker_##scope##_SCOPE
#define SCOPE_STACK(scope)  pyatgWalker_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pyatgWalker_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef	    BACKTRACKING
#undef      ADAPTOR
#undef	    RULEMEMO		
#undef		SEEK    
#undef		INDEX
#undef		DBG

#define	    PARSER							ctx->pTreeParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    INPUT							PARSER->ctnstream
#define		ISTREAM							INPUT->tnstream->istream
#define	    STRSTREAM						INPUT->tnstream
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							ISTREAM->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->tnstream->_LT(INPUT->tnstream, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         INPUT->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define		INDEX()							ISTREAM->index(ISTREAM)
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   yatgWalkerTokenNames[149+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "VDECL",
        (pANTLR3_UINT8) "VDEF",
        (pANTLR3_UINT8) "VVAL",
        (pANTLR3_UINT8) "ESEQ",
        (pANTLR3_UINT8) "EIF",
        (pANTLR3_UINT8) "EIF_COND",
        (pANTLR3_UINT8) "EIF_THEN",
        (pANTLR3_UINT8) "EIF_ELSE",
        (pANTLR3_UINT8) "EWHILE",
        (pANTLR3_UINT8) "EWHILE_CON",
        (pANTLR3_UINT8) "EWHILE_EXP",
        (pANTLR3_UINT8) "EDO",
        (pANTLR3_UINT8) "EDO_CON",
        (pANTLR3_UINT8) "EDO_EXP",
        (pANTLR3_UINT8) "EFOR",
        (pANTLR3_UINT8) "EFOR_SRC",
        (pANTLR3_UINT8) "EFOR_EXP",
        (pANTLR3_UINT8) "ESRC_START",
        (pANTLR3_UINT8) "ESRC_TO",
        (pANTLR3_UINT8) "ESRC_BY",
        (pANTLR3_UINT8) "ESRC_WHERE",
        (pANTLR3_UINT8) "P_BOX2",
        (pANTLR3_UINT8) "P_P2",
        (pANTLR3_UINT8) "P_P3",
        (pANTLR3_UINT8) "ARR_A",
        (pANTLR3_UINT8) "ARR_BIT",
        (pANTLR3_UINT8) "ARR_BIT_RANGE",
        (pANTLR3_UINT8) "LP_EXIT",
        (pANTLR3_UINT8) "LP_EXIT_WITH",
        (pANTLR3_UINT8) "LP_CONT",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "CASE_Exp",
        (pANTLR3_UINT8) "CASE_Item",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "STRUCT",
        (pANTLR3_UINT8) "MEMBER",
        (pANTLR3_UINT8) "ETRY",
        (pANTLR3_UINT8) "ETRY_EXP",
        (pANTLR3_UINT8) "ECATCH_EXP",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "FUN_DEF",
        (pANTLR3_UINT8) "FUN_NAME",
        (pANTLR3_UINT8) "BODY",
        (pANTLR3_UINT8) "FUN",
        (pANTLR3_UINT8) "MAPPED",
        (pANTLR3_UINT8) "CONTEXT",
        (pANTLR3_UINT8) "COORDSYS",
        (pANTLR3_UINT8) "SELECTION",
        (pANTLR3_UINT8) "PIVOT",
        (pANTLR3_UINT8) "ABOUT",
        (pANTLR3_UINT8) "LOCAL",
        (pANTLR3_UINT8) "WORLD",
        (pANTLR3_UINT8) "PARENT",
        (pANTLR3_UINT8) "LEVEL",
        (pANTLR3_UINT8) "ANIMATE",
        (pANTLR3_UINT8) "TIME",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "UNDO",
        (pANTLR3_UINT8) "EIN",
        (pANTLR3_UINT8) "AT",
        (pANTLR3_UINT8) "OPERAND",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "ARG_EXPR_L",
        (pANTLR3_UINT8) "SET",
        (pANTLR3_UINT8) "PRIM_EXP",
        (pANTLR3_UINT8) "EOL",
        (pANTLR3_UINT8) "IDENTIFIER",
        (pANTLR3_UINT8) "CONT",
        (pANTLR3_UINT8) "HEX_LITERAL",
        (pANTLR3_UINT8) "STRING_LITERAL",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "NONQ",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "LINE_COMMENT",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'local'",
        (pANTLR3_UINT8) "'global'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'then'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'collect'",
        (pANTLR3_UINT8) "'to'",
        (pANTLR3_UINT8) "'by'",
        (pANTLR3_UINT8) "'where'",
        (pANTLR3_UINT8) "'exit'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "'of'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'struct'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'mapped'",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'fn'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'animate'",
        (pANTLR3_UINT8) "'at'",
        (pANTLR3_UINT8) "'level'",
        (pANTLR3_UINT8) "'time'",
        (pANTLR3_UINT8) "'coordsys'",
        (pANTLR3_UINT8) "'world'",
        (pANTLR3_UINT8) "'parent'",
        (pANTLR3_UINT8) "'about'",
        (pANTLR3_UINT8) "'pivot'",
        (pANTLR3_UINT8) "'selection'",
        (pANTLR3_UINT8) "'undo'",
        (pANTLR3_UINT8) "'set'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'#'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'",
        (pANTLR3_UINT8) "'on'",
        (pANTLR3_UINT8) "'off'",
        (pANTLR3_UINT8) "'ok'",
        (pANTLR3_UINT8) "'undefined'",
        (pANTLR3_UINT8) "'unsupplied'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "'..'",
        (pANTLR3_UINT8) "''"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static yatgWalker_program_return	program    (pyatgWalker ctx);
static yatgWalker_expr_return	expr    (pyatgWalker ctx);
static yatgWalker_variable_decls_return	variable_decls    (pyatgWalker ctx);
static yatgWalker_type_decl_return	type_decl    (pyatgWalker ctx);
static yatgWalker_decl_return	decl    (pyatgWalker ctx);
static yatgWalker_if_expr_return	if_expr    (pyatgWalker ctx);
static yatgWalker_while_loop_return	while_loop    (pyatgWalker ctx);
static yatgWalker_do_loop_return	do_loop    (pyatgWalker ctx);
static yatgWalker_for_loop_return	for_loop    (pyatgWalker ctx);
static yatgWalker_source_return	source    (pyatgWalker ctx);
static yatgWalker_loop_exit_return	loop_exit    (pyatgWalker ctx);
static yatgWalker_loop_continue_return	loop_continue    (pyatgWalker ctx);
static yatgWalker_case_expr_return	case_expr    (pyatgWalker ctx);
static yatgWalker_case_item_return	case_item    (pyatgWalker ctx);
static yatgWalker_struct_def_return	struct_def    (pyatgWalker ctx);
static yatgWalker_member_return	member    (pyatgWalker ctx);
static yatgWalker_try_expr_return	try_expr    (pyatgWalker ctx);
static yatgWalker_function_def_return	function_def    (pyatgWalker ctx);
static yatgWalker_fun_return	fun    (pyatgWalker ctx);
static yatgWalker_function_return_return	function_return    (pyatgWalker ctx);
static yatgWalker_context_expr_return	context_expr    (pyatgWalker ctx);
static yatgWalker_context_return	context    (pyatgWalker ctx);
static yatgWalker_set_context_return	set_context    (pyatgWalker ctx);
static yatgWalker_math_expression_return	math_expression    (pyatgWalker ctx);
static yatgWalker_additive_expression_return	additive_expression    (pyatgWalker ctx);
static yatgWalker_muSymbol1iplicative_expression_return	muSymbol1iplicative_expression    (pyatgWalker ctx);
static yatgWalker_argument_ex_return	argument_ex    (pyatgWalker ctx);
static yatgWalker_argument_expression_list_return	argument_expression_list    (pyatgWalker ctx);
static yatgWalker_unary_expression_return	unary_expression    (pyatgWalker ctx);
static yatgWalker_operand_return	operand    (pyatgWalker ctx);
static yatgWalker_operand_op_return	operand_op    (pyatgWalker ctx);
static yatgWalker_primary_expression_return	primary_expression    (pyatgWalker ctx);
static yatgWalker_constant_return	constant    (pyatgWalker ctx);
static yatgWalker_constant_expression_return	constant_expression    (pyatgWalker ctx);
static yatgWalker_assignment_expression_return	assignment_expression    (pyatgWalker ctx);
static yatgWalker_lvalue_return	lvalue    (pyatgWalker ctx);
static yatgWalker_assignment_operator_return	assignment_operator    (pyatgWalker ctx);
static yatgWalker_logical_expression_return	logical_expression    (pyatgWalker ctx);
static yatgWalker_logical_or_expression_return	logical_or_expression    (pyatgWalker ctx);
static yatgWalker_logical_and_expression_return	logical_and_expression    (pyatgWalker ctx);
static yatgWalker_equality_expression_return	equality_expression    (pyatgWalker ctx);
static yatgWalker_relational_expression_return	relational_expression    (pyatgWalker ctx);
static yatgWalker_expr_seq_return	expr_seq    (pyatgWalker ctx);
static yatgWalker_expr_g_return	expr_g    (pyatgWalker ctx);
static yatgWalker_number_return	number    (pyatgWalker ctx);
static yatgWalker_box2_return	box2    (pyatgWalker ctx);
static yatgWalker_point3_return	point3    (pyatgWalker ctx);
static yatgWalker_point2_return	point2    (pyatgWalker ctx);
static yatgWalker_array_return	array    (pyatgWalker ctx);
static yatgWalker_bitarray_return	bitarray    (pyatgWalker ctx);
static yatgWalker_arrrange_return	arrrange    (pyatgWalker ctx);
static ANTLR3_BOOLEAN	synpred2_yatgWalker    (pyatgWalker ctx);
static ANTLR3_BOOLEAN	synpred16_yatgWalker    (pyatgWalker ctx);
static ANTLR3_BOOLEAN	synpred45_yatgWalker    (pyatgWalker ctx);
static ANTLR3_BOOLEAN	synpred48_yatgWalker    (pyatgWalker ctx);
static ANTLR3_BOOLEAN	synpred57_yatgWalker    (pyatgWalker ctx);
static ANTLR3_BOOLEAN	synpred58_yatgWalker    (pyatgWalker ctx);
static ANTLR3_BOOLEAN	synpred74_yatgWalker    (pyatgWalker ctx);
static ANTLR3_BOOLEAN	synpred80_yatgWalker    (pyatgWalker ctx);
static ANTLR3_BOOLEAN	synpred81_yatgWalker    (pyatgWalker ctx);
static ANTLR3_BOOLEAN	synpred83_yatgWalker    (pyatgWalker ctx);
static ANTLR3_BOOLEAN	synpred87_yatgWalker    (pyatgWalker ctx);
static ANTLR3_BOOLEAN	synpred89_yatgWalker    (pyatgWalker ctx);
static void	yatgWalkerFree(pyatgWalker ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "yatgWalker.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new yatgWalker parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pyatgWalker
yatgWalkerNew   (pANTLR3_COMMON_TREE_NODE_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return yatgWalkerNewSSD(instream, NULL);
}

/** \brief Create a new yatgWalker parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pyatgWalker
yatgWalkerNewSSD   (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pyatgWalker ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pyatgWalker) ANTLR3_CALLOC(1, sizeof(yatgWalker));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in yatgWalker.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base Tree parser/recognizer, using the supplied tree node stream
     */
    ctx->pTreeParser		= antlr3TreeParserNewStream(ANTLR3_SIZE_HINT, instream, state);
    /* Install the implementation of our yatgWalker interface
     */
    ctx->program	= program;
    ctx->expr	= expr;
    ctx->variable_decls	= variable_decls;
    ctx->type_decl	= type_decl;
    ctx->decl	= decl;
    ctx->if_expr	= if_expr;
    ctx->while_loop	= while_loop;
    ctx->do_loop	= do_loop;
    ctx->for_loop	= for_loop;
    ctx->source	= source;
    ctx->loop_exit	= loop_exit;
    ctx->loop_continue	= loop_continue;
    ctx->case_expr	= case_expr;
    ctx->case_item	= case_item;
    ctx->struct_def	= struct_def;
    ctx->member	= member;
    ctx->try_expr	= try_expr;
    ctx->function_def	= function_def;
    ctx->fun	= fun;
    ctx->function_return	= function_return;
    ctx->context_expr	= context_expr;
    ctx->context	= context;
    ctx->set_context	= set_context;
    ctx->math_expression	= math_expression;
    ctx->additive_expression	= additive_expression;
    ctx->muSymbol1iplicative_expression	= muSymbol1iplicative_expression;
    ctx->argument_ex	= argument_ex;
    ctx->argument_expression_list	= argument_expression_list;
    ctx->unary_expression	= unary_expression;
    ctx->operand	= operand;
    ctx->operand_op	= operand_op;
    ctx->primary_expression	= primary_expression;
    ctx->constant	= constant;
    ctx->constant_expression	= constant_expression;
    ctx->assignment_expression	= assignment_expression;
    ctx->lvalue	= lvalue;
    ctx->assignment_operator	= assignment_operator;
    ctx->logical_expression	= logical_expression;
    ctx->logical_or_expression	= logical_or_expression;
    ctx->logical_and_expression	= logical_and_expression;
    ctx->equality_expression	= equality_expression;
    ctx->relational_expression	= relational_expression;
    ctx->expr_seq	= expr_seq;
    ctx->expr_g	= expr_g;
    ctx->number	= number;
    ctx->box2	= box2;
    ctx->point3	= point3;
    ctx->point2	= point2;
    ctx->array	= array;
    ctx->bitarray	= bitarray;
    ctx->arrrange	= arrrange;
    ctx->synpred2_yatgWalker	= synpred2_yatgWalker;
    ctx->synpred16_yatgWalker	= synpred16_yatgWalker;
    ctx->synpred45_yatgWalker	= synpred45_yatgWalker;
    ctx->synpred48_yatgWalker	= synpred48_yatgWalker;
    ctx->synpred57_yatgWalker	= synpred57_yatgWalker;
    ctx->synpred58_yatgWalker	= synpred58_yatgWalker;
    ctx->synpred74_yatgWalker	= synpred74_yatgWalker;
    ctx->synpred80_yatgWalker	= synpred80_yatgWalker;
    ctx->synpred81_yatgWalker	= synpred81_yatgWalker;
    ctx->synpred83_yatgWalker	= synpred83_yatgWalker;
    ctx->synpred87_yatgWalker	= synpred87_yatgWalker;
    ctx->synpred89_yatgWalker	= synpred89_yatgWalker;
    ctx->free			= yatgWalkerFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = yatgWalkerTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 yatgWalkerFree(pyatgWalker ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);

	// Free this parser
	//
    ctx->pTreeParser->free(ctx->pTreeParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this tree parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return yatgWalkerTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_program108  */
static	ANTLR3_BITWORD FOLLOW_expr_in_program108_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049192), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_program108	= { FOLLOW_expr_in_program108_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_expr125  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_expr125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_expr125	= { FOLLOW_assignment_expression_in_expr125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_decls_in_expr130  */
static	ANTLR3_BITWORD FOLLOW_variable_decls_in_expr130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_decls_in_expr130	= { FOLLOW_variable_decls_in_expr130_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_if_expr_in_expr139  */
static	ANTLR3_BITWORD FOLLOW_if_expr_in_expr139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_if_expr_in_expr139	= { FOLLOW_if_expr_in_expr139_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_while_loop_in_expr148  */
static	ANTLR3_BITWORD FOLLOW_while_loop_in_expr148_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_while_loop_in_expr148	= { FOLLOW_while_loop_in_expr148_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_do_loop_in_expr157  */
static	ANTLR3_BITWORD FOLLOW_do_loop_in_expr157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_do_loop_in_expr157	= { FOLLOW_do_loop_in_expr157_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_for_loop_in_expr166  */
static	ANTLR3_BITWORD FOLLOW_for_loop_in_expr166_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_for_loop_in_expr166	= { FOLLOW_for_loop_in_expr166_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_loop_exit_in_expr175  */
static	ANTLR3_BITWORD FOLLOW_loop_exit_in_expr175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_loop_exit_in_expr175	= { FOLLOW_loop_exit_in_expr175_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_loop_continue_in_expr184  */
static	ANTLR3_BITWORD FOLLOW_loop_continue_in_expr184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_loop_continue_in_expr184	= { FOLLOW_loop_continue_in_expr184_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_case_expr_in_expr193  */
static	ANTLR3_BITWORD FOLLOW_case_expr_in_expr193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_case_expr_in_expr193	= { FOLLOW_case_expr_in_expr193_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_struct_def_in_expr202  */
static	ANTLR3_BITWORD FOLLOW_struct_def_in_expr202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_struct_def_in_expr202	= { FOLLOW_struct_def_in_expr202_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_try_expr_in_expr211  */
static	ANTLR3_BITWORD FOLLOW_try_expr_in_expr211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_try_expr_in_expr211	= { FOLLOW_try_expr_in_expr211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_def_in_expr220  */
static	ANTLR3_BITWORD FOLLOW_function_def_in_expr220_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_def_in_expr220	= { FOLLOW_function_def_in_expr220_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_return_in_expr229  */
static	ANTLR3_BITWORD FOLLOW_function_return_in_expr229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_return_in_expr229	= { FOLLOW_function_return_in_expr229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_context_expr_in_expr238  */
static	ANTLR3_BITWORD FOLLOW_context_expr_in_expr238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_context_expr_in_expr238	= { FOLLOW_context_expr_in_expr238_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_expr247  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_expr247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_expr247	= { FOLLOW_expr_seq_in_expr247_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOL_in_expr256  */
static	ANTLR3_BITWORD FOLLOW_EOL_in_expr256_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOL_in_expr256	= { FOLLOW_EOL_in_expr256_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VDECL_in_variable_decls277  */
static	ANTLR3_BITWORD FOLLOW_VDECL_in_variable_decls277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VDECL_in_variable_decls277	= { FOLLOW_VDECL_in_variable_decls277_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_decl_in_variable_decls279  */
static	ANTLR3_BITWORD FOLLOW_type_decl_in_variable_decls279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_type_decl_in_variable_decls279	= { FOLLOW_type_decl_in_variable_decls279_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_decl_in_variable_decls281  */
static	ANTLR3_BITWORD FOLLOW_decl_in_variable_decls281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000028) };
static  ANTLR3_BITSET_LIST FOLLOW_decl_in_variable_decls281	= { FOLLOW_decl_in_variable_decls281_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type_decl0  */
static	ANTLR3_BITWORD FOLLOW_set_in_type_decl0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type_decl0	= { FOLLOW_set_in_type_decl0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VDEF_in_decl317  */
static	ANTLR3_BITWORD FOLLOW_VDEF_in_decl317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VDEF_in_decl317	= { FOLLOW_VDEF_in_decl317_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_decl321  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_decl321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_decl321	= { FOLLOW_IDENTIFIER_in_decl321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VVAL_in_decl325  */
static	ANTLR3_BITWORD FOLLOW_VVAL_in_decl325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VVAL_in_decl325	= { FOLLOW_VVAL_in_decl325_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_decl329  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_decl329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_decl329	= { FOLLOW_expr_g_in_decl329_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VDEF_in_decl349  */
static	ANTLR3_BITWORD FOLLOW_VDEF_in_decl349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VDEF_in_decl349	= { FOLLOW_VDEF_in_decl349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_decl351  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_decl351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_decl351	= { FOLLOW_IDENTIFIER_in_decl351_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EIF_in_if_expr372  */
static	ANTLR3_BITWORD FOLLOW_EIF_in_if_expr372_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EIF_in_if_expr372	= { FOLLOW_EIF_in_if_expr372_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EIF_COND_in_if_expr375  */
static	ANTLR3_BITWORD FOLLOW_EIF_COND_in_if_expr375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EIF_COND_in_if_expr375	= { FOLLOW_EIF_COND_in_if_expr375_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_if_expr380  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_if_expr380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_if_expr380	= { FOLLOW_expr_g_in_if_expr380_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EIF_THEN_in_if_expr384  */
static	ANTLR3_BITWORD FOLLOW_EIF_THEN_in_if_expr384_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EIF_THEN_in_if_expr384	= { FOLLOW_EIF_THEN_in_if_expr384_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_if_expr389  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_if_expr389_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_if_expr389	= { FOLLOW_expr_g_in_if_expr389_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EIF_ELSE_in_if_expr394  */
static	ANTLR3_BITWORD FOLLOW_EIF_ELSE_in_if_expr394_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EIF_ELSE_in_if_expr394	= { FOLLOW_EIF_ELSE_in_if_expr394_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_if_expr399  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_if_expr399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_if_expr399	= { FOLLOW_expr_g_in_if_expr399_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EWHILE_in_while_loop427  */
static	ANTLR3_BITWORD FOLLOW_EWHILE_in_while_loop427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EWHILE_in_while_loop427	= { FOLLOW_EWHILE_in_while_loop427_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EWHILE_CON_in_while_loop430  */
static	ANTLR3_BITWORD FOLLOW_EWHILE_CON_in_while_loop430_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EWHILE_CON_in_while_loop430	= { FOLLOW_EWHILE_CON_in_while_loop430_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_while_loop432  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_while_loop432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_while_loop432	= { FOLLOW_expr_g_in_while_loop432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EWHILE_EXP_in_while_loop436  */
static	ANTLR3_BITWORD FOLLOW_EWHILE_EXP_in_while_loop436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EWHILE_EXP_in_while_loop436	= { FOLLOW_EWHILE_EXP_in_while_loop436_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_while_loop438  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_while_loop438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_while_loop438	= { FOLLOW_expr_g_in_while_loop438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EDO_in_do_loop458  */
static	ANTLR3_BITWORD FOLLOW_EDO_in_do_loop458_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EDO_in_do_loop458	= { FOLLOW_EDO_in_do_loop458_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EDO_EXP_in_do_loop461  */
static	ANTLR3_BITWORD FOLLOW_EDO_EXP_in_do_loop461_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EDO_EXP_in_do_loop461	= { FOLLOW_EDO_EXP_in_do_loop461_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_do_loop463  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_do_loop463_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_do_loop463	= { FOLLOW_expr_g_in_do_loop463_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EDO_CON_in_do_loop467  */
static	ANTLR3_BITWORD FOLLOW_EDO_CON_in_do_loop467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EDO_CON_in_do_loop467	= { FOLLOW_EDO_CON_in_do_loop467_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_do_loop469  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_do_loop469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_do_loop469	= { FOLLOW_expr_g_in_do_loop469_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EFOR_in_for_loop489  */
static	ANTLR3_BITWORD FOLLOW_EFOR_in_for_loop489_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EFOR_in_for_loop489	= { FOLLOW_EFOR_in_for_loop489_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_for_loop491  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_for_loop491_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_for_loop491	= { FOLLOW_IDENTIFIER_in_for_loop491_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EFOR_SRC_in_for_loop494  */
static	ANTLR3_BITWORD FOLLOW_EFOR_SRC_in_for_loop494_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EFOR_SRC_in_for_loop494	= { FOLLOW_EFOR_SRC_in_for_loop494_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_source_in_for_loop496  */
static	ANTLR3_BITWORD FOLLOW_source_in_for_loop496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_source_in_for_loop496	= { FOLLOW_source_in_for_loop496_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EFOR_EXP_in_for_loop501  */
static	ANTLR3_BITWORD FOLLOW_EFOR_EXP_in_for_loop501_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EFOR_EXP_in_for_loop501	= { FOLLOW_EFOR_EXP_in_for_loop501_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_for_loop503  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_for_loop503_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_for_loop503	= { FOLLOW_expr_g_in_for_loop503_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ESRC_START_in_source523  */
static	ANTLR3_BITWORD FOLLOW_ESRC_START_in_source523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ESRC_START_in_source523	= { FOLLOW_ESRC_START_in_source523_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_source525  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_source525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_source525	= { FOLLOW_expr_g_in_source525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ESRC_TO_in_source530  */
static	ANTLR3_BITWORD FOLLOW_ESRC_TO_in_source530_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ESRC_TO_in_source530	= { FOLLOW_ESRC_TO_in_source530_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_source532  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_source532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_source532	= { FOLLOW_expr_g_in_source532_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ESRC_BY_in_source539  */
static	ANTLR3_BITWORD FOLLOW_ESRC_BY_in_source539_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ESRC_BY_in_source539	= { FOLLOW_ESRC_BY_in_source539_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_source541  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_source541_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_source541	= { FOLLOW_expr_g_in_source541_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ESRC_WHERE_in_source548  */
static	ANTLR3_BITWORD FOLLOW_ESRC_WHERE_in_source548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ESRC_WHERE_in_source548	= { FOLLOW_ESRC_WHERE_in_source548_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_source550  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_source550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_source550	= { FOLLOW_expr_g_in_source550_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LP_EXIT_in_loop_exit572  */
static	ANTLR3_BITWORD FOLLOW_LP_EXIT_in_loop_exit572_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LP_EXIT_in_loop_exit572	= { FOLLOW_LP_EXIT_in_loop_exit572_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LP_EXIT_WITH_in_loop_exit577  */
static	ANTLR3_BITWORD FOLLOW_LP_EXIT_WITH_in_loop_exit577_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LP_EXIT_WITH_in_loop_exit577	= { FOLLOW_LP_EXIT_WITH_in_loop_exit577_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_loop_exit579  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_loop_exit579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_loop_exit579	= { FOLLOW_expr_g_in_loop_exit579_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LP_CONT_in_loop_continue604  */
static	ANTLR3_BITWORD FOLLOW_LP_CONT_in_loop_continue604_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LP_CONT_in_loop_continue604	= { FOLLOW_LP_CONT_in_loop_continue604_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_loop_continue606  */
static	ANTLR3_BITWORD FOLLOW_152_in_loop_continue606_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_loop_continue606	= { FOLLOW_152_in_loop_continue606_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_case_expr625  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_case_expr625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_case_expr625	= { FOLLOW_CASE_in_case_expr625_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_Exp_in_case_expr629  */
static	ANTLR3_BITWORD FOLLOW_CASE_Exp_in_case_expr629_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_Exp_in_case_expr629	= { FOLLOW_CASE_Exp_in_case_expr629_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_case_expr631  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_case_expr631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_case_expr631	= { FOLLOW_expr_g_in_case_expr631_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_case_item_in_case_expr639  */
static	ANTLR3_BITWORD FOLLOW_case_item_in_case_expr639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_case_item_in_case_expr639	= { FOLLOW_case_item_in_case_expr639_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_case_expr641  */
static	ANTLR3_BITWORD FOLLOW_152_in_case_expr641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_case_expr641	= { FOLLOW_152_in_case_expr641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_Item_in_case_item660  */
static	ANTLR3_BITWORD FOLLOW_CASE_Item_in_case_item660_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_Item_in_case_item660	= { FOLLOW_CASE_Item_in_case_item660_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_in_case_item663  */
static	ANTLR3_BITWORD FOLLOW_constant_in_case_item663_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049190), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_in_case_item663	= { FOLLOW_constant_in_case_item663_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_case_item665  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_case_item665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_case_item665	= { FOLLOW_expr_g_in_case_item665_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_Item_in_case_item674  */
static	ANTLR3_BITWORD FOLLOW_CASE_Item_in_case_item674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_Item_in_case_item674	= { FOLLOW_CASE_Item_in_case_item674_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DEFAULT_in_case_item678  */
static	ANTLR3_BITWORD FOLLOW_DEFAULT_in_case_item678_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049190), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_DEFAULT_in_case_item678	= { FOLLOW_DEFAULT_in_case_item678_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_case_item680  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_case_item680_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_case_item680	= { FOLLOW_expr_g_in_case_item680_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRUCT_in_struct_def698  */
static	ANTLR3_BITWORD FOLLOW_STRUCT_in_struct_def698_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_STRUCT_in_struct_def698	= { FOLLOW_STRUCT_in_struct_def698_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_member_in_struct_def700  */
static	ANTLR3_BITWORD FOLLOW_member_in_struct_def700_bits[]	= { ANTLR3_UINT64_LIT(0x0000108000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_member_in_struct_def700	= { FOLLOW_member_in_struct_def700_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MEMBER_in_member722  */
static	ANTLR3_BITWORD FOLLOW_MEMBER_in_member722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MEMBER_in_member722	= { FOLLOW_MEMBER_in_member722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_member724  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_member724_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049190), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_member724	= { FOLLOW_IDENTIFIER_in_member724_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_member726  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_member726_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_member726	= { FOLLOW_expr_g_in_member726_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_def_in_member736  */
static	ANTLR3_BITWORD FOLLOW_function_def_in_member736_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_function_def_in_member736	= { FOLLOW_function_def_in_member736_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_member738  */
static	ANTLR3_BITWORD FOLLOW_152_in_member738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_member738	= { FOLLOW_152_in_member738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ETRY_in_try_expr756  */
static	ANTLR3_BITWORD FOLLOW_ETRY_in_try_expr756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ETRY_in_try_expr756	= { FOLLOW_ETRY_in_try_expr756_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ETRY_EXP_in_try_expr760  */
static	ANTLR3_BITWORD FOLLOW_ETRY_EXP_in_try_expr760_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ETRY_EXP_in_try_expr760	= { FOLLOW_ETRY_EXP_in_try_expr760_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_try_expr762  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_try_expr762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_try_expr762	= { FOLLOW_expr_g_in_try_expr762_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ECATCH_EXP_in_try_expr767  */
static	ANTLR3_BITWORD FOLLOW_ECATCH_EXP_in_try_expr767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ECATCH_EXP_in_try_expr767	= { FOLLOW_ECATCH_EXP_in_try_expr767_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_try_expr770  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_try_expr770_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_try_expr770	= { FOLLOW_expr_g_in_try_expr770_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUN_DEF_in_function_def790  */
static	ANTLR3_BITWORD FOLLOW_FUN_DEF_in_function_def790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUN_DEF_in_function_def790	= { FOLLOW_FUN_DEF_in_function_def790_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUN_NAME_in_function_def793  */
static	ANTLR3_BITWORD FOLLOW_FUN_NAME_in_function_def793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUN_NAME_in_function_def793	= { FOLLOW_FUN_NAME_in_function_def793_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_function_def795  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_function_def795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_function_def795	= { FOLLOW_IDENTIFIER_in_function_def795_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_argument_ex_in_function_def800  */
static	ANTLR3_BITWORD FOLLOW_argument_ex_in_function_def800_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_argument_ex_in_function_def800	= { FOLLOW_argument_ex_in_function_def800_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BODY_in_function_def806  */
static	ANTLR3_BITWORD FOLLOW_BODY_in_function_def806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_BODY_in_function_def806	= { FOLLOW_BODY_in_function_def806_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_function_def808  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_function_def808_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_function_def808	= { FOLLOW_expr_g_in_function_def808_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_fun0  */
static	ANTLR3_BITWORD FOLLOW_set_in_fun0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_fun0	= { FOLLOW_set_in_fun0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RETURN_in_function_return847  */
static	ANTLR3_BITWORD FOLLOW_RETURN_in_function_return847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_RETURN_in_function_return847	= { FOLLOW_RETURN_in_function_return847_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_function_return849  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_function_return849_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_function_return849	= { FOLLOW_expr_g_in_function_return849_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context_expr866  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context_expr866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context_expr866	= { FOLLOW_CONTEXT_in_context_expr866_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_context_in_context_expr868  */
static	ANTLR3_BITWORD FOLLOW_context_in_context_expr868_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049190), ANTLR3_UINT64_LIT(0xE120000020400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_context_in_context_expr868	= { FOLLOW_context_in_context_expr868_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_context_expr871  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_context_expr871_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_context_expr871	= { FOLLOW_expr_g_in_context_expr871_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context886  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context886	= { FOLLOW_CONTEXT_in_context886_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ANIMATE_in_context889  */
static	ANTLR3_BITWORD FOLLOW_ANIMATE_in_context889_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_ANIMATE_in_context889	= { FOLLOW_ANIMATE_in_context889_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_expression_in_context891  */
static	ANTLR3_BITWORD FOLLOW_logical_expression_in_context891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_expression_in_context891	= { FOLLOW_logical_expression_in_context891_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context900  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context900_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context900	= { FOLLOW_CONTEXT_in_context900_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AT_in_context902  */
static	ANTLR3_BITWORD FOLLOW_AT_in_context902_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_AT_in_context902	= { FOLLOW_AT_in_context902_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LEVEL_in_context904  */
static	ANTLR3_BITWORD FOLLOW_LEVEL_in_context904_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_LEVEL_in_context904	= { FOLLOW_LEVEL_in_context904_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context906  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context906	= { FOLLOW_operand_in_context906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context914  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context914	= { FOLLOW_CONTEXT_in_context914_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AT_in_context916  */
static	ANTLR3_BITWORD FOLLOW_AT_in_context916_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_AT_in_context916	= { FOLLOW_AT_in_context916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TIME_in_context918  */
static	ANTLR3_BITWORD FOLLOW_TIME_in_context918_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_TIME_in_context918	= { FOLLOW_TIME_in_context918_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context920  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context920	= { FOLLOW_operand_in_context920_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context928  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context928_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context928	= { FOLLOW_CONTEXT_in_context928_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EIN_in_context930  */
static	ANTLR3_BITWORD FOLLOW_EIN_in_context930_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_EIN_in_context930	= { FOLLOW_EIN_in_context930_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context932  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context932_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context932	= { FOLLOW_operand_in_context932_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_93_in_context939  */
static	ANTLR3_BITWORD FOLLOW_93_in_context939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_93_in_context939	= { FOLLOW_93_in_context939_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_117_in_context943  */
static	ANTLR3_BITWORD FOLLOW_117_in_context943_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_117_in_context943	= { FOLLOW_117_in_context943_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context957  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context957_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context957	= { FOLLOW_CONTEXT_in_context957_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COORDSYS_in_context960  */
static	ANTLR3_BITWORD FOLLOW_COORDSYS_in_context960_bits[]	= { ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COORDSYS_in_context960	= { FOLLOW_COORDSYS_in_context960_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LOCAL_in_context962  */
static	ANTLR3_BITWORD FOLLOW_LOCAL_in_context962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LOCAL_in_context962	= { FOLLOW_LOCAL_in_context962_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context972  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context972	= { FOLLOW_CONTEXT_in_context972_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COORDSYS_in_context975  */
static	ANTLR3_BITWORD FOLLOW_COORDSYS_in_context975_bits[]	= { ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COORDSYS_in_context975	= { FOLLOW_COORDSYS_in_context975_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WORLD_in_context977  */
static	ANTLR3_BITWORD FOLLOW_WORLD_in_context977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_WORLD_in_context977	= { FOLLOW_WORLD_in_context977_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context987  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context987	= { FOLLOW_CONTEXT_in_context987_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COORDSYS_in_context989  */
static	ANTLR3_BITWORD FOLLOW_COORDSYS_in_context989_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COORDSYS_in_context989	= { FOLLOW_COORDSYS_in_context989_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PARENT_in_context991  */
static	ANTLR3_BITWORD FOLLOW_PARENT_in_context991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_PARENT_in_context991	= { FOLLOW_PARENT_in_context991_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context1001  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context1001_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context1001	= { FOLLOW_CONTEXT_in_context1001_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COORDSYS_in_context1003  */
static	ANTLR3_BITWORD FOLLOW_COORDSYS_in_context1003_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_COORDSYS_in_context1003	= { FOLLOW_COORDSYS_in_context1003_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context1005  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context1005_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context1005	= { FOLLOW_operand_in_context1005_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_120_in_context1017  */
static	ANTLR3_BITWORD FOLLOW_120_in_context1017_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_120_in_context1017	= { FOLLOW_120_in_context1017_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context1026  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context1026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context1026	= { FOLLOW_CONTEXT_in_context1026_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ABOUT_in_context1028  */
static	ANTLR3_BITWORD FOLLOW_ABOUT_in_context1028_bits[]	= { ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ABOUT_in_context1028	= { FOLLOW_ABOUT_in_context1028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PIVOT_in_context1030  */
static	ANTLR3_BITWORD FOLLOW_PIVOT_in_context1030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_PIVOT_in_context1030	= { FOLLOW_PIVOT_in_context1030_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context1042  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context1042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context1042	= { FOLLOW_CONTEXT_in_context1042_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ABOUT_in_context1044  */
static	ANTLR3_BITWORD FOLLOW_ABOUT_in_context1044_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ABOUT_in_context1044	= { FOLLOW_ABOUT_in_context1044_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELECTION_in_context1046  */
static	ANTLR3_BITWORD FOLLOW_SELECTION_in_context1046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_SELECTION_in_context1046	= { FOLLOW_SELECTION_in_context1046_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context1056  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context1056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context1056	= { FOLLOW_CONTEXT_in_context1056_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ABOUT_in_context1058  */
static	ANTLR3_BITWORD FOLLOW_ABOUT_in_context1058_bits[]	= { ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ABOUT_in_context1058	= { FOLLOW_ABOUT_in_context1058_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COORDSYS_in_context1060  */
static	ANTLR3_BITWORD FOLLOW_COORDSYS_in_context1060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_COORDSYS_in_context1060	= { FOLLOW_COORDSYS_in_context1060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context1069  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context1069_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context1069	= { FOLLOW_CONTEXT_in_context1069_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ABOUT_in_context1071  */
static	ANTLR3_BITWORD FOLLOW_ABOUT_in_context1071_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_ABOUT_in_context1071	= { FOLLOW_ABOUT_in_context1071_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context1073  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context1073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context1073	= { FOLLOW_operand_in_context1073_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context1085  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context1085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context1085	= { FOLLOW_CONTEXT_in_context1085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNDO_in_context1088  */
static	ANTLR3_BITWORD FOLLOW_UNDO_in_context1088_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_UNDO_in_context1088	= { FOLLOW_UNDO_in_context1088_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_expression_in_context1092  */
static	ANTLR3_BITWORD FOLLOW_logical_expression_in_context1092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_expression_in_context1092	= { FOLLOW_logical_expression_in_context1092_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_context1094  */
static	ANTLR3_BITWORD FOLLOW_152_in_context1094_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_context1094	= { FOLLOW_152_in_context1094_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SET_in_set_context1112  */
static	ANTLR3_BITWORD FOLLOW_SET_in_set_context1112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SET_in_set_context1112	= { FOLLOW_SET_in_set_context1112_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_context_in_set_context1114  */
static	ANTLR3_BITWORD FOLLOW_context_in_set_context1114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_context_in_set_context1114	= { FOLLOW_context_in_set_context1114_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additive_expression_in_math_expression1130  */
static	ANTLR3_BITWORD FOLLOW_additive_expression_in_math_expression1130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additive_expression_in_math_expression1130	= { FOLLOW_additive_expression_in_math_expression1130_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_muSymbol1iplicative_expression_in_additive_expression1142  */
static	ANTLR3_BITWORD FOLLOW_muSymbol1iplicative_expression_in_additive_expression1142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x6000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_muSymbol1iplicative_expression_in_additive_expression1142	= { FOLLOW_muSymbol1iplicative_expression_in_additive_expression1142_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_additive_expression1146  */
static	ANTLR3_BITWORD FOLLOW_set_in_additive_expression1146_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_additive_expression1146	= { FOLLOW_set_in_additive_expression1146_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_muSymbol1iplicative_expression_in_additive_expression1153  */
static	ANTLR3_BITWORD FOLLOW_muSymbol1iplicative_expression_in_additive_expression1153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x6000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_muSymbol1iplicative_expression_in_additive_expression1153	= { FOLLOW_muSymbol1iplicative_expression_in_additive_expression1153_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_muSymbol1iplicative_expression1168  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_muSymbol1iplicative_expression1168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000000000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_muSymbol1iplicative_expression1168	= { FOLLOW_unary_expression_in_muSymbol1iplicative_expression1168_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_muSymbol1iplicative_expression1172  */
static	ANTLR3_BITWORD FOLLOW_set_in_muSymbol1iplicative_expression1172_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_muSymbol1iplicative_expression1172	= { FOLLOW_set_in_muSymbol1iplicative_expression1172_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_muSymbol1iplicative_expression1181  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_muSymbol1iplicative_expression1181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000000000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_muSymbol1iplicative_expression1181	= { FOLLOW_unary_expression_in_muSymbol1iplicative_expression1181_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_argument_expression_list_in_argument_ex1204  */
static	ANTLR3_BITWORD FOLLOW_argument_expression_list_in_argument_ex1204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_argument_expression_list_in_argument_ex1204	= { FOLLOW_argument_expression_list_in_argument_ex1204_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARG_EXPR_L_in_argument_expression_list1222  */
static	ANTLR3_BITWORD FOLLOW_ARG_EXPR_L_in_argument_expression_list1222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARG_EXPR_L_in_argument_expression_list1222	= { FOLLOW_ARG_EXPR_L_in_argument_expression_list1222_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_argument_expression_list1224  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_argument_expression_list1224_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000088), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_argument_expression_list1224	= { FOLLOW_IDENTIFIER_in_argument_expression_list1224_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_argument_expression_list1227  */
static	ANTLR3_BITWORD FOLLOW_operand_in_argument_expression_list1227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_argument_expression_list1227	= { FOLLOW_operand_in_argument_expression_list1227_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_unary_expression1249  */
static	ANTLR3_BITWORD FOLLOW_operand_in_unary_expression1249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_unary_expression1249	= { FOLLOW_operand_in_unary_expression1249_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPERAND_in_operand1265  */
static	ANTLR3_BITWORD FOLLOW_OPERAND_in_operand1265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OPERAND_in_operand1265	= { FOLLOW_OPERAND_in_operand1265_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_operand1267  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_operand1267_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049198), ANTLR3_UINT64_LIT(0xE000004000400727), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_operand1267	= { FOLLOW_IDENTIFIER_in_operand1267_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_op_in_operand1270  */
static	ANTLR3_BITWORD FOLLOW_operand_op_in_operand1270_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049198), ANTLR3_UINT64_LIT(0xE000004000400727), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_op_in_operand1270	= { FOLLOW_operand_op_in_operand1270_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_in_operand1285  */
static	ANTLR3_BITWORD FOLLOW_constant_in_operand1285_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_in_operand1285	= { FOLLOW_constant_in_operand1285_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_operand_op1308  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_operand_op1308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_operand_op1308	= { FOLLOW_DOT_in_operand_op1308_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_operand_op1310  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_operand_op1310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_operand_op1310	= { FOLLOW_IDENTIFIER_in_operand_op1310_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_operand_op1328  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_operand_op1328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_operand_op1328	= { FOLLOW_expr_g_in_operand_op1328_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_operand_op1330  */
static	ANTLR3_BITWORD FOLLOW_152_in_operand_op1330_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_operand_op1330	= { FOLLOW_152_in_operand_op1330_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_102_in_operand_op1344  */
static	ANTLR3_BITWORD FOLLOW_102_in_operand_op1344_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_102_in_operand_op1344	= { FOLLOW_102_in_operand_op1344_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_103_in_operand_op1346  */
static	ANTLR3_BITWORD FOLLOW_103_in_operand_op1346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_103_in_operand_op1346	= { FOLLOW_103_in_operand_op1346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_argument_expression_list_in_operand_op1359  */
static	ANTLR3_BITWORD FOLLOW_argument_expression_list_in_operand_op1359_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_argument_expression_list_in_operand_op1359	= { FOLLOW_argument_expression_list_in_operand_op1359_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_primary_expression1379  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_primary_expression1379_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_primary_expression1379	= { FOLLOW_IDENTIFIER_in_primary_expression1379_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_in_primary_expression1384  */
static	ANTLR3_BITWORD FOLLOW_constant_in_primary_expression1384_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_in_primary_expression1384	= { FOLLOW_constant_in_primary_expression1384_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_HEX_LITERAL_in_constant1399  */
static	ANTLR3_BITWORD FOLLOW_HEX_LITERAL_in_constant1399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_HEX_LITERAL_in_constant1399	= { FOLLOW_HEX_LITERAL_in_constant1399_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_number_in_constant1408  */
static	ANTLR3_BITWORD FOLLOW_number_in_constant1408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_number_in_constant1408	= { FOLLOW_number_in_constant1408_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_LITERAL_in_constant1417  */
static	ANTLR3_BITWORD FOLLOW_STRING_LITERAL_in_constant1417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_LITERAL_in_constant1417	= { FOLLOW_STRING_LITERAL_in_constant1417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_constant1426  */
static	ANTLR3_BITWORD FOLLOW_133_in_constant1426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_constant1426	= { FOLLOW_133_in_constant1426_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_constant1428  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_constant1428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_constant1428	= { FOLLOW_IDENTIFIER_in_constant1428_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_in_constant1436  */
static	ANTLR3_BITWORD FOLLOW_array_in_constant1436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_array_in_constant1436	= { FOLLOW_array_in_constant1436_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitarray_in_constant1445  */
static	ANTLR3_BITWORD FOLLOW_bitarray_in_constant1445_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitarray_in_constant1445	= { FOLLOW_bitarray_in_constant1445_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_box2_in_constant1454  */
static	ANTLR3_BITWORD FOLLOW_box2_in_constant1454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_box2_in_constant1454	= { FOLLOW_box2_in_constant1454_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_point3_in_constant1462  */
static	ANTLR3_BITWORD FOLLOW_point3_in_constant1462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_point3_in_constant1462	= { FOLLOW_point3_in_constant1462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_point2_in_constant1470  */
static	ANTLR3_BITWORD FOLLOW_point2_in_constant1470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_point2_in_constant1470	= { FOLLOW_point2_in_constant1470_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_constant1479  */
static	ANTLR3_BITWORD FOLLOW_134_in_constant1479_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_constant1479	= { FOLLOW_134_in_constant1479_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_constant1488  */
static	ANTLR3_BITWORD FOLLOW_135_in_constant1488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_constant1488	= { FOLLOW_135_in_constant1488_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_constant1497  */
static	ANTLR3_BITWORD FOLLOW_136_in_constant1497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_constant1497	= { FOLLOW_136_in_constant1497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_constant1506  */
static	ANTLR3_BITWORD FOLLOW_137_in_constant1506_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_constant1506	= { FOLLOW_137_in_constant1506_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_constant1515  */
static	ANTLR3_BITWORD FOLLOW_138_in_constant1515_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_constant1515	= { FOLLOW_138_in_constant1515_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_constant1524  */
static	ANTLR3_BITWORD FOLLOW_139_in_constant1524_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_constant1524	= { FOLLOW_139_in_constant1524_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_constant1533  */
static	ANTLR3_BITWORD FOLLOW_140_in_constant1533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_constant1533	= { FOLLOW_140_in_constant1533_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_constant1542  */
static	ANTLR3_BITWORD FOLLOW_126_in_constant1542_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049190), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_constant1542	= { FOLLOW_126_in_constant1542_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_constant1544  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_constant1544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_constant1544	= { FOLLOW_expr_g_in_constant1544_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_constant1552  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_constant1552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_constant1552	= { FOLLOW_expr_seq_in_constant1552_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_expression_in_constant_expression1568  */
static	ANTLR3_BITWORD FOLLOW_logical_expression_in_constant_expression1568_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_expression_in_constant_expression1568	= { FOLLOW_logical_expression_in_constant_expression1568_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_operator_in_assignment_expression1582  */
static	ANTLR3_BITWORD FOLLOW_assignment_operator_in_assignment_expression1582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_operator_in_assignment_expression1582	= { FOLLOW_assignment_operator_in_assignment_expression1582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_lvalue_in_assignment_expression1584  */
static	ANTLR3_BITWORD FOLLOW_lvalue_in_assignment_expression1584_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049198), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_lvalue_in_assignment_expression1584	= { FOLLOW_lvalue_in_assignment_expression1584_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_assignment_expression1586  */
static	ANTLR3_BITWORD FOLLOW_expr_in_assignment_expression1586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_assignment_expression1586	= { FOLLOW_expr_in_assignment_expression1586_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_expression_in_assignment_expression1595  */
static	ANTLR3_BITWORD FOLLOW_constant_expression_in_assignment_expression1595_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_expression_in_assignment_expression1595	= { FOLLOW_constant_expression_in_assignment_expression1595_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_lvalue1607  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_lvalue1607_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_lvalue1607	= { FOLLOW_unary_expression_in_lvalue1607_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_assignment_operator1618  */
static	ANTLR3_BITWORD FOLLOW_86_in_assignment_operator1618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_assignment_operator1618	= { FOLLOW_86_in_assignment_operator1618_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_assignment_operator1626  */
static	ANTLR3_BITWORD FOLLOW_127_in_assignment_operator1626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_assignment_operator1626	= { FOLLOW_127_in_assignment_operator1626_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_assignment_operator1628  */
static	ANTLR3_BITWORD FOLLOW_86_in_assignment_operator1628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_assignment_operator1628	= { FOLLOW_86_in_assignment_operator1628_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_assignment_operator1636  */
static	ANTLR3_BITWORD FOLLOW_128_in_assignment_operator1636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_assignment_operator1636	= { FOLLOW_128_in_assignment_operator1636_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_assignment_operator1638  */
static	ANTLR3_BITWORD FOLLOW_86_in_assignment_operator1638_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_assignment_operator1638	= { FOLLOW_86_in_assignment_operator1638_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_assignment_operator1646  */
static	ANTLR3_BITWORD FOLLOW_129_in_assignment_operator1646_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_assignment_operator1646	= { FOLLOW_129_in_assignment_operator1646_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_assignment_operator1648  */
static	ANTLR3_BITWORD FOLLOW_86_in_assignment_operator1648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_assignment_operator1648	= { FOLLOW_86_in_assignment_operator1648_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_assignment_operator1653  */
static	ANTLR3_BITWORD FOLLOW_125_in_assignment_operator1653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_assignment_operator1653	= { FOLLOW_125_in_assignment_operator1653_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_assignment_operator1655  */
static	ANTLR3_BITWORD FOLLOW_86_in_assignment_operator1655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_assignment_operator1655	= { FOLLOW_86_in_assignment_operator1655_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_assignment_operator1663  */
static	ANTLR3_BITWORD FOLLOW_126_in_assignment_operator1663_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_assignment_operator1663	= { FOLLOW_126_in_assignment_operator1663_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_assignment_operator1665  */
static	ANTLR3_BITWORD FOLLOW_86_in_assignment_operator1665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_assignment_operator1665	= { FOLLOW_86_in_assignment_operator1665_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_or_expression_in_logical_expression1679  */
static	ANTLR3_BITWORD FOLLOW_logical_or_expression_in_logical_expression1679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_or_expression_in_logical_expression1679	= { FOLLOW_logical_or_expression_in_logical_expression1679_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_and_expression_in_logical_or_expression1690  */
static	ANTLR3_BITWORD FOLLOW_logical_and_expression_in_logical_or_expression1690_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_and_expression_in_logical_or_expression1690	= { FOLLOW_logical_and_expression_in_logical_or_expression1690_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_logical_or_expression1693  */
static	ANTLR3_BITWORD FOLLOW_141_in_logical_or_expression1693_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_logical_or_expression1693	= { FOLLOW_141_in_logical_or_expression1693_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_and_expression_in_logical_or_expression1696  */
static	ANTLR3_BITWORD FOLLOW_logical_and_expression_in_logical_or_expression1696_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_and_expression_in_logical_or_expression1696	= { FOLLOW_logical_and_expression_in_logical_or_expression1696_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equality_expression_in_logical_and_expression1709  */
static	ANTLR3_BITWORD FOLLOW_equality_expression_in_logical_and_expression1709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_equality_expression_in_logical_and_expression1709	= { FOLLOW_equality_expression_in_logical_and_expression1709_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_logical_and_expression1712  */
static	ANTLR3_BITWORD FOLLOW_142_in_logical_and_expression1712_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_logical_and_expression1712	= { FOLLOW_142_in_logical_and_expression1712_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equality_expression_in_logical_and_expression1715  */
static	ANTLR3_BITWORD FOLLOW_equality_expression_in_logical_and_expression1715_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_equality_expression_in_logical_and_expression1715	= { FOLLOW_equality_expression_in_logical_and_expression1715_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relational_expression_in_equality_expression1728  */
static	ANTLR3_BITWORD FOLLOW_relational_expression_in_equality_expression1728_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000018000) };
static  ANTLR3_BITSET_LIST FOLLOW_relational_expression_in_equality_expression1728	= { FOLLOW_relational_expression_in_equality_expression1728_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_equality_expression1731  */
static	ANTLR3_BITWORD FOLLOW_set_in_equality_expression1731_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_equality_expression1731	= { FOLLOW_set_in_equality_expression1731_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relational_expression_in_equality_expression1738  */
static	ANTLR3_BITWORD FOLLOW_relational_expression_in_equality_expression1738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000018000) };
static  ANTLR3_BITSET_LIST FOLLOW_relational_expression_in_equality_expression1738	= { FOLLOW_relational_expression_in_equality_expression1738_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_math_expression_in_relational_expression1751  */
static	ANTLR3_BITWORD FOLLOW_math_expression_in_relational_expression1751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_math_expression_in_relational_expression1751	= { FOLLOW_math_expression_in_relational_expression1751_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_relational_expression1754  */
static	ANTLR3_BITWORD FOLLOW_set_in_relational_expression1754_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_relational_expression1754	= { FOLLOW_set_in_relational_expression1754_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_math_expression_in_relational_expression1765  */
static	ANTLR3_BITWORD FOLLOW_math_expression_in_relational_expression1765_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000001E0000) };
static  ANTLR3_BITSET_LIST FOLLOW_math_expression_in_relational_expression1765	= { FOLLOW_math_expression_in_relational_expression1765_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ESEQ_in_expr_seq1794  */
static	ANTLR3_BITWORD FOLLOW_ESEQ_in_expr_seq1794_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ESEQ_in_expr_seq1794	= { FOLLOW_ESEQ_in_expr_seq1794_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr_seq1796  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr_seq1796_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049198), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr_seq1796	= { FOLLOW_expr_in_expr_seq1796_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_expr_g1809  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_expr_g1809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_expr_g1809	= { FOLLOW_expr_seq_in_expr_g1809_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr_g1817  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr_g1817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr_g1817	= { FOLLOW_expr_in_expr_g1817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_number0  */
static	ANTLR3_BITWORD FOLLOW_set_in_number0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_number0	= { FOLLOW_set_in_number0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_P_BOX2_in_box21860  */
static	ANTLR3_BITWORD FOLLOW_P_BOX2_in_box21860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_P_BOX2_in_box21860	= { FOLLOW_P_BOX2_in_box21860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_box21863  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_box21863_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049190), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_box21863	= { FOLLOW_expr_g_in_box21863_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_box21866  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_box21866_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049190), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_box21866	= { FOLLOW_expr_g_in_box21866_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_box21869  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_box21869_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049190), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_box21869	= { FOLLOW_expr_g_in_box21869_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_box21872  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_box21872_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_box21872	= { FOLLOW_expr_g_in_box21872_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_P_P3_in_point31890  */
static	ANTLR3_BITWORD FOLLOW_P_P3_in_point31890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_P_P3_in_point31890	= { FOLLOW_P_P3_in_point31890_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point31893  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point31893_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049190), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point31893	= { FOLLOW_expr_g_in_point31893_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point31896  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point31896_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049190), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point31896	= { FOLLOW_expr_g_in_point31896_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point31899  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point31899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point31899	= { FOLLOW_expr_g_in_point31899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_P_P2_in_point21918  */
static	ANTLR3_BITWORD FOLLOW_P_P2_in_point21918_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_P_P2_in_point21918	= { FOLLOW_P_P2_in_point21918_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point21921  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point21921_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049190), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point21921	= { FOLLOW_expr_g_in_point21921_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point21924  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point21924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point21924	= { FOLLOW_expr_g_in_point21924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_A_in_array1943  */
static	ANTLR3_BITWORD FOLLOW_ARR_A_in_array1943_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_A_in_array1943	= { FOLLOW_ARR_A_in_array1943_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_array1945  */
static	ANTLR3_BITWORD FOLLOW_152_in_array1945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_array1945	= { FOLLOW_152_in_array1945_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_A_in_array1957  */
static	ANTLR3_BITWORD FOLLOW_ARR_A_in_array1957_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_A_in_array1957	= { FOLLOW_ARR_A_in_array1957_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_array1960  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_array1960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_array1960	= { FOLLOW_expr_g_in_array1960_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_BIT_in_bitarray1976  */
static	ANTLR3_BITWORD FOLLOW_ARR_BIT_in_bitarray1976_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_BIT_in_bitarray1976	= { FOLLOW_ARR_BIT_in_bitarray1976_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_bitarray1978  */
static	ANTLR3_BITWORD FOLLOW_152_in_bitarray1978_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_bitarray1978	= { FOLLOW_152_in_bitarray1978_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_BIT_in_bitarray1989  */
static	ANTLR3_BITWORD FOLLOW_ARR_BIT_in_bitarray1989_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_BIT_in_bitarray1989	= { FOLLOW_ARR_BIT_in_bitarray1989_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrrange_in_bitarray1991  */
static	ANTLR3_BITWORD FOLLOW_arrrange_in_bitarray1991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arrrange_in_bitarray1991	= { FOLLOW_arrrange_in_bitarray1991_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_BIT_RANGE_in_arrrange2008  */
static	ANTLR3_BITWORD FOLLOW_ARR_BIT_RANGE_in_arrrange2008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_BIT_RANGE_in_arrrange2008	= { FOLLOW_ARR_BIT_RANGE_in_arrrange2008_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrrange_in_arrrange2011  */
static	ANTLR3_BITWORD FOLLOW_arrrange_in_arrrange2011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arrrange_in_arrrange2011	= { FOLLOW_arrrange_in_arrrange2011_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrrange_in_arrrange2013  */
static	ANTLR3_BITWORD FOLLOW_arrrange_in_arrrange2013_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arrrange_in_arrrange2013	= { FOLLOW_arrrange_in_arrrange2013_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_synpred2_yatgWalker125  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_synpred2_yatgWalker125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_synpred2_yatgWalker125	= { FOLLOW_assignment_expression_in_synpred2_yatgWalker125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_synpred16_yatgWalker247  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_synpred16_yatgWalker247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_synpred16_yatgWalker247	= { FOLLOW_expr_seq_in_synpred16_yatgWalker247_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred45_yatgWalker1146  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred45_yatgWalker1146_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred45_yatgWalker1146	= { FOLLOW_set_in_synpred45_yatgWalker1146_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_muSymbol1iplicative_expression_in_synpred45_yatgWalker1153  */
static	ANTLR3_BITWORD FOLLOW_muSymbol1iplicative_expression_in_synpred45_yatgWalker1153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_muSymbol1iplicative_expression_in_synpred45_yatgWalker1153	= { FOLLOW_muSymbol1iplicative_expression_in_synpred45_yatgWalker1153_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred48_yatgWalker1172  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred48_yatgWalker1172_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred48_yatgWalker1172	= { FOLLOW_set_in_synpred48_yatgWalker1172_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_synpred48_yatgWalker1181  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_synpred48_yatgWalker1181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_synpred48_yatgWalker1181	= { FOLLOW_unary_expression_in_synpred48_yatgWalker1181_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_HEX_LITERAL_in_synpred57_yatgWalker1399  */
static	ANTLR3_BITWORD FOLLOW_HEX_LITERAL_in_synpred57_yatgWalker1399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_HEX_LITERAL_in_synpred57_yatgWalker1399	= { FOLLOW_HEX_LITERAL_in_synpred57_yatgWalker1399_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_number_in_synpred58_yatgWalker1408  */
static	ANTLR3_BITWORD FOLLOW_number_in_synpred58_yatgWalker1408_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_number_in_synpred58_yatgWalker1408	= { FOLLOW_number_in_synpred58_yatgWalker1408_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_operator_in_synpred74_yatgWalker1582  */
static	ANTLR3_BITWORD FOLLOW_assignment_operator_in_synpred74_yatgWalker1582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_operator_in_synpred74_yatgWalker1582	= { FOLLOW_assignment_operator_in_synpred74_yatgWalker1582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_lvalue_in_synpred74_yatgWalker1584  */
static	ANTLR3_BITWORD FOLLOW_lvalue_in_synpred74_yatgWalker1584_bits[]	= { ANTLR3_UINT64_LIT(0x00021946BE049198), ANTLR3_UINT64_LIT(0xE000000000400721), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_lvalue_in_synpred74_yatgWalker1584	= { FOLLOW_lvalue_in_synpred74_yatgWalker1584_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_synpred74_yatgWalker1586  */
static	ANTLR3_BITWORD FOLLOW_expr_in_synpred74_yatgWalker1586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_synpred74_yatgWalker1586	= { FOLLOW_expr_in_synpred74_yatgWalker1586_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_synpred80_yatgWalker1693  */
static	ANTLR3_BITWORD FOLLOW_141_in_synpred80_yatgWalker1693_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_synpred80_yatgWalker1693	= { FOLLOW_141_in_synpred80_yatgWalker1693_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_and_expression_in_synpred80_yatgWalker1696  */
static	ANTLR3_BITWORD FOLLOW_logical_and_expression_in_synpred80_yatgWalker1696_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_and_expression_in_synpred80_yatgWalker1696	= { FOLLOW_logical_and_expression_in_synpred80_yatgWalker1696_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_synpred81_yatgWalker1712  */
static	ANTLR3_BITWORD FOLLOW_142_in_synpred81_yatgWalker1712_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_synpred81_yatgWalker1712	= { FOLLOW_142_in_synpred81_yatgWalker1712_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equality_expression_in_synpred81_yatgWalker1715  */
static	ANTLR3_BITWORD FOLLOW_equality_expression_in_synpred81_yatgWalker1715_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equality_expression_in_synpred81_yatgWalker1715	= { FOLLOW_equality_expression_in_synpred81_yatgWalker1715_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred83_yatgWalker1731  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred83_yatgWalker1731_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred83_yatgWalker1731	= { FOLLOW_set_in_synpred83_yatgWalker1731_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relational_expression_in_synpred83_yatgWalker1738  */
static	ANTLR3_BITWORD FOLLOW_relational_expression_in_synpred83_yatgWalker1738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relational_expression_in_synpred83_yatgWalker1738	= { FOLLOW_relational_expression_in_synpred83_yatgWalker1738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred87_yatgWalker1754  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred87_yatgWalker1754_bits[]	= { ANTLR3_UINT64_LIT(0x000000003E000080), ANTLR3_UINT64_LIT(0xE000000000400701), ANTLR3_UINT64_LIT(0x0000000000001FE3) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred87_yatgWalker1754	= { FOLLOW_set_in_synpred87_yatgWalker1754_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_math_expression_in_synpred87_yatgWalker1765  */
static	ANTLR3_BITWORD FOLLOW_math_expression_in_synpred87_yatgWalker1765_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_math_expression_in_synpred87_yatgWalker1765	= { FOLLOW_math_expression_in_synpred87_yatgWalker1765_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_synpred89_yatgWalker1809  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_synpred89_yatgWalker1809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_synpred89_yatgWalker1809	= { FOLLOW_expr_seq_in_synpred89_yatgWalker1809_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    42:1: expr : ( assignment_expression | variable_decls | if_expr | while_loop | do_loop | for_loop | loop_exit | loop_continue | case_expr | struct_def | try_expr | function_def | function_return | context_expr | expr_seq | EOL );
 */
static const ANTLR3_INT32 dfa2_eot[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa2_eof[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa2_min[40] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa2_max[40] =
    {
	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa2_accept[40] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 
	16, 15
    };
static const ANTLR3_INT32 dfa2_special[40] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa2_T_empty	    NULL

static const ANTLR3_INT32 dfa2_T0[] =
    {
	25, -1, -1, 24, 26, -1, -1, -1, 27, -1, -1, 28, -1, -1, 29, -1, -1, -1, 
	-1, -1, -1, 1, 1, 1, 1, 1, -1, 30, -1, 31, 32, -1, -1, -1, 33, -1, 34, 
	-1, -1, 36, 35, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 38, -1, -1, 1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 
	1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa2_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa2_transitions[] =
{
    dfa2_T0, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, 
    dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, 
    dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, 
    dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, 
    dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T1, dfa2_T_empty, dfa2_T_empty, 
    dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, 
    dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, dfa2_T_empty, 
    dfa2_T_empty, dfa2_T_empty, dfa2_T_empty	
};

static ANTLR3_INT32 dfa2_sst(pyatgWalker ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA2_24;

    	    ANTLR3_MARKER index2_24;


    		LA2_24 = LA(1);

    	 
    	    index2_24 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred2_yatgWalker(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (synpred16_yatgWalker(ctx)) )
    	    {
    	        s = 39;
    	    }

    	 
    		SEEK(index2_24);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"42:1: expr : ( assignment_expression | variable_decls | if_expr | while_loop | do_loop | for_loop | loop_exit | loop_continue | case_expr | struct_def | try_expr | function_def | function_return | context_expr | expr_seq | EOL );";
    EXCEPTION->decisionNum  = 2;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 2
 */
static
ANTLR3_CYCLIC_DFA cdfa2
    =	{
	    2,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"42:1: expr : ( assignment_expression | variable_decls | if_expr | while_loop | do_loop | for_loop | loop_exit | loop_continue | case_expr | struct_def | try_expr | function_def | function_return | context_expr | expr_seq | EOL );",	
	    (CDFA_SPECIAL_FUNC) dfa2_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa2_eot,	    /* EOT table			    */
	    dfa2_eof,	    /* EOF table			    */
	    dfa2_min,	    /* Minimum tokens for each state    */
	    dfa2_max,	    /* Maximum tokens for each state    */
	    dfa2_accept,	/* Accept table			    */
	    dfa2_special,	/* Special transition states	    */
	    dfa2_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 2
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    176:1: context : ( ^( CONTEXT ANIMATE logical_expression ) | ^( CONTEXT AT LEVEL operand ) | ^( CONTEXT AT TIME operand ) | ^( CONTEXT EIN operand ) | ( 'in' )? 'coordsys' ( ^( CONTEXT COORDSYS LOCAL ) | ^( CONTEXT COORDSYS WORLD ) | ^( CONTEXT COORDSYS PARENT ) | ^( CONTEXT COORDSYS operand ) ) | 'about' ( ^( CONTEXT ABOUT PIVOT ) | ^( CONTEXT ABOUT SELECTION ) | ^( CONTEXT ABOUT COORDSYS ) | ^( CONTEXT ABOUT operand ) ) | ^( CONTEXT UNDO ^( logical_expression '' ) ) );
 */
static const ANTLR3_INT32 dfa18_eot[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa18_eof[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa18_min[11] =
    {
	49, 2, -1, -1, 58, -1, 57, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa18_max[11] =
    {
	120, 2, -1, -1, 63, -1, 59, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa18_accept[11] =
    {
	-1, -1, 5, 6, -1, 1, -1, 4, 7, 2, 3
    };
static const ANTLR3_INT32 dfa18_special[11] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa18_T_empty	    NULL

static const ANTLR3_INT32 dfa18_T0[] =
    {
	4
    };static const ANTLR3_INT32 dfa18_T1[] =
    {
	5, -1, -1, 8, 7, 6
    };static const ANTLR3_INT32 dfa18_T2[] =
    {
	9, -1, 10
    };static const ANTLR3_INT32 dfa18_T3[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa18_transitions[] =
{
    dfa18_T3, dfa18_T0, dfa18_T_empty, dfa18_T_empty, dfa18_T1, dfa18_T_empty, 
    dfa18_T2, dfa18_T_empty, dfa18_T_empty, dfa18_T_empty, dfa18_T_empty	
};


/* Declare tracking structure for Cyclic DFA 18
 */
static
ANTLR3_CYCLIC_DFA cdfa18
    =	{
	    18,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"176:1: context : ( ^( CONTEXT ANIMATE logical_expression ) | ^( CONTEXT AT LEVEL operand ) | ^( CONTEXT AT TIME operand ) | ^( CONTEXT EIN operand ) | ( 'in' )? 'coordsys' ( ^( CONTEXT COORDSYS LOCAL ) | ^( CONTEXT COORDSYS WORLD ) | ^( CONTEXT COORDSYS PARENT ) | ^( CONTEXT COORDSYS operand ) ) | 'about' ( ^( CONTEXT ABOUT PIVOT ) | ^( CONTEXT ABOUT SELECTION ) | ^( CONTEXT ABOUT COORDSYS ) | ^( CONTEXT ABOUT operand ) ) | ^( CONTEXT UNDO ^( logical_expression '' ) ) );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa18_eot,	    /* EOT table			    */
	    dfa18_eof,	    /* EOF table			    */
	    dfa18_min,	    /* Minimum tokens for each state    */
	    dfa18_max,	    /* Maximum tokens for each state    */
	    dfa18_accept,	/* Accept table			    */
	    dfa18_special,	/* Special transition states	    */
	    dfa18_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 18
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    257:1: constant : ( HEX_LITERAL | number | STRING_LITERAL | '#' IDENTIFIER | array | bitarray | box2 | point3 | point2 | 'true' | 'false' | 'on' | 'off' | 'ok' | 'undefined' | 'unsupplied' | '-' expr_g | expr_seq );
 */
static const ANTLR3_INT32 dfa27_eot[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa27_eof[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa27_min[20] =
    {
	7, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa27_max[20] =
    {
	140, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa27_accept[20] =
    {
	-1, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1
    };
static const ANTLR3_INT32 dfa27_special[20] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa27_T_empty	    NULL

static const ANTLR3_INT32 dfa27_T0[] =
    {
	-1
    };static const ANTLR3_INT32 dfa27_T1[] =
    {
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	7, 9, 8, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, 4, 10, 
	11, 12, 13, 14, 15, 16
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa27_transitions[] =
{
    dfa27_T1, dfa27_T0, dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, 
    dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, 
    dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, 
    dfa27_T_empty, dfa27_T_empty, dfa27_T_empty, dfa27_T_empty	
};

static ANTLR3_INT32 dfa27_sst(pyatgWalker ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA27_1;

    	    ANTLR3_MARKER index27_1;


    		LA27_1 = LA(1);

    	 
    	    index27_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred57_yatgWalker(ctx)) )
    	    {
    	        s = 19;
    	    }

    	    else if ( (synpred58_yatgWalker(ctx)) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index27_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"257:1: constant : ( HEX_LITERAL | number | STRING_LITERAL | '#' IDENTIFIER | array | bitarray | box2 | point3 | point2 | 'true' | 'false' | 'on' | 'off' | 'ok' | 'undefined' | 'unsupplied' | '-' expr_g | expr_seq );";
    EXCEPTION->decisionNum  = 27;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 27
 */
static
ANTLR3_CYCLIC_DFA cdfa27
    =	{
	    27,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"257:1: constant : ( HEX_LITERAL | number | STRING_LITERAL | '#' IDENTIFIER | array | bitarray | box2 | point3 | point2 | 'true' | 'false' | 'on' | 'off' | 'ok' | 'undefined' | 'unsupplied' | '-' expr_g | expr_seq );",	
	    (CDFA_SPECIAL_FUNC) dfa27_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa27_eot,	    /* EOT table			    */
	    dfa27_eof,	    /* EOF table			    */
	    dfa27_min,	    /* Minimum tokens for each state    */
	    dfa27_max,	    /* Maximum tokens for each state    */
	    dfa27_accept,	/* Accept table			    */
	    dfa27_special,	/* Special transition states	    */
	    dfa27_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 27
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    354:1: expr_g : ( expr_seq | expr );
 */
static const ANTLR3_INT32 dfa35_eot[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa35_eof[40] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa35_min[40] =
    {
	4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa35_max[40] =
    {
	140, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa35_accept[40] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa35_special[40] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa35_T_empty	    NULL

static const ANTLR3_INT32 dfa35_T0[] =
    {
	2, -1, -1, 1, 2, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, -1, -1, -1, -1, 
	-1, -1, 2, 2, 2, 2, 2, -1, 2, -1, 2, 2, -1, -1, -1, 2, -1, 2, -1, -1, 2, 
	2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2
    };static const ANTLR3_INT32 dfa35_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa35_transitions[] =
{
    dfa35_T0, dfa35_T1, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, 
    dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, 
    dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, 
    dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, 
    dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, 
    dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, 
    dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, 
    dfa35_T_empty, dfa35_T_empty, dfa35_T_empty, dfa35_T_empty	
};

static ANTLR3_INT32 dfa35_sst(pyatgWalker ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA35_1;

    	    ANTLR3_MARKER index35_1;


    		LA35_1 = LA(1);

    	 
    	    index35_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred89_yatgWalker(ctx)) )
    	    {
    	        s = 39;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index35_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"354:1: expr_g : ( expr_seq | expr );";
    EXCEPTION->decisionNum  = 35;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 35
 */
static
ANTLR3_CYCLIC_DFA cdfa35
    =	{
	    35,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"354:1: expr_g : ( expr_seq | expr );",	
	    (CDFA_SPECIAL_FUNC) dfa35_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa35_eot,	    /* EOT table			    */
	    dfa35_eof,	    /* EOF table			    */
	    dfa35_min,	    /* Minimum tokens for each state    */
	    dfa35_max,	    /* Maximum tokens for each state    */
	    dfa35_accept,	/* Accept table			    */
	    dfa35_special,	/* Special transition states	    */
	    dfa35_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 35
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * yatgWalker.g:33:1: program : ( expr )+ ;
 */
static yatgWalker_program_return
program(pyatgWalker ctx)
{   
    yatgWalker_program_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    yatgWalker_expr_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 yatgWalker_expr_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    expr1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // yatgWalker.g:34:2: ( ( expr )+ )
        // yatgWalker.g:35:2: ( expr )+
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            if ( BACKTRACKING==0 ) 
            {

                	zym.InitScope();
                	
            }
            // yatgWalker.g:38:3: ( expr )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA1_0 = LA(1);
            	    if ( (LA1_0 == VDECL || ((LA1_0 >= ESEQ) && (LA1_0 <= EIF)) || LA1_0 == EWHILE || LA1_0 == EDO || LA1_0 == EFOR || ((LA1_0 >= P_BOX2) && (LA1_0 <= ARR_BIT)) || LA1_0 == LP_EXIT || ((LA1_0 >= LP_CONT) && (LA1_0 <= CASE)) || LA1_0 == STRUCT || LA1_0 == ETRY || ((LA1_0 >= RETURN) && (LA1_0 <= FUN_DEF)) || LA1_0 == CONTEXT || LA1_0 == OPERAND || LA1_0 == EOL || ((LA1_0 >= HEX_LITERAL) && (LA1_0 <= DIGIT)) || LA1_0 == 86 || ((LA1_0 >= 125) && (LA1_0 <= 129)) || ((LA1_0 >= 133) && (LA1_0 <= 140))) ) 
            	    {
            	        alt1=1;
            	    }

            	}
            	switch (alt1) 
            	{
            	    case 1:
            	        // yatgWalker.g:38:5: expr
            	        {
            	            _last = (pANTLR3_BASE_TREE)LT(1);
            	            FOLLOWPUSH(FOLLOW_expr_in_program108);
            	            expr1=expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleprogramEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING == 0 ) 
            	            {	ADAPTOR->addChild(ADAPTOR, root_0, expr1.tree);}

            	            if ( BACKTRACKING ==0 ) {
            	            }
            	        }
            	        break;

            	    default:
            	    
            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return retval;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleprogramEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start expr
 * yatgWalker.g:42:1: expr : ( assignment_expression | variable_decls | if_expr | while_loop | do_loop | for_loop | loop_exit | loop_continue | case_expr | struct_def | try_expr | function_def | function_return | context_expr | expr_seq | EOL );
 */
static yatgWalker_expr_return
expr(pyatgWalker ctx)
{   
    yatgWalker_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    EOL17;
    yatgWalker_assignment_expression_return assignment_expression2;
    #undef	RETURN_TYPE_assignment_expression2
    #define	RETURN_TYPE_assignment_expression2 yatgWalker_assignment_expression_return

    yatgWalker_variable_decls_return variable_decls3;
    #undef	RETURN_TYPE_variable_decls3
    #define	RETURN_TYPE_variable_decls3 yatgWalker_variable_decls_return

    yatgWalker_if_expr_return if_expr4;
    #undef	RETURN_TYPE_if_expr4
    #define	RETURN_TYPE_if_expr4 yatgWalker_if_expr_return

    yatgWalker_while_loop_return while_loop5;
    #undef	RETURN_TYPE_while_loop5
    #define	RETURN_TYPE_while_loop5 yatgWalker_while_loop_return

    yatgWalker_do_loop_return do_loop6;
    #undef	RETURN_TYPE_do_loop6
    #define	RETURN_TYPE_do_loop6 yatgWalker_do_loop_return

    yatgWalker_for_loop_return for_loop7;
    #undef	RETURN_TYPE_for_loop7
    #define	RETURN_TYPE_for_loop7 yatgWalker_for_loop_return

    yatgWalker_loop_exit_return loop_exit8;
    #undef	RETURN_TYPE_loop_exit8
    #define	RETURN_TYPE_loop_exit8 yatgWalker_loop_exit_return

    yatgWalker_loop_continue_return loop_continue9;
    #undef	RETURN_TYPE_loop_continue9
    #define	RETURN_TYPE_loop_continue9 yatgWalker_loop_continue_return

    yatgWalker_case_expr_return case_expr10;
    #undef	RETURN_TYPE_case_expr10
    #define	RETURN_TYPE_case_expr10 yatgWalker_case_expr_return

    yatgWalker_struct_def_return struct_def11;
    #undef	RETURN_TYPE_struct_def11
    #define	RETURN_TYPE_struct_def11 yatgWalker_struct_def_return

    yatgWalker_try_expr_return try_expr12;
    #undef	RETURN_TYPE_try_expr12
    #define	RETURN_TYPE_try_expr12 yatgWalker_try_expr_return

    yatgWalker_function_def_return function_def13;
    #undef	RETURN_TYPE_function_def13
    #define	RETURN_TYPE_function_def13 yatgWalker_function_def_return

    yatgWalker_function_return_return function_return14;
    #undef	RETURN_TYPE_function_return14
    #define	RETURN_TYPE_function_return14 yatgWalker_function_return_return

    yatgWalker_context_expr_return context_expr15;
    #undef	RETURN_TYPE_context_expr15
    #define	RETURN_TYPE_context_expr15 yatgWalker_context_expr_return

    yatgWalker_expr_seq_return expr_seq16;
    #undef	RETURN_TYPE_expr_seq16
    #define	RETURN_TYPE_expr_seq16 yatgWalker_expr_seq_return

    pANTLR3_BASE_TREE EOL17_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    EOL17       = NULL;
    assignment_expression2.tree = NULL;

    variable_decls3.tree = NULL;

    if_expr4.tree = NULL;

    while_loop5.tree = NULL;

    do_loop6.tree = NULL;

    for_loop7.tree = NULL;

    loop_exit8.tree = NULL;

    loop_continue9.tree = NULL;

    case_expr10.tree = NULL;

    struct_def11.tree = NULL;

    try_expr12.tree = NULL;

    function_def13.tree = NULL;

    function_return14.tree = NULL;

    context_expr15.tree = NULL;

    expr_seq16.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    EOL17_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:43:2: ( assignment_expression | variable_decls | if_expr | while_loop | do_loop | for_loop | loop_exit | loop_continue | case_expr | struct_def | try_expr | function_def | function_return | context_expr | expr_seq | EOL )
            
            ANTLR3_UINT32 alt2;

            alt2=16;

            alt2 = cdfa2.predict(ctx, RECOGNIZER, ISTREAM, &cdfa2);
            if  (HASEXCEPTION())
            {
                goto ruleexprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt2) 
            {
        	case 1:
        	    // yatgWalker.g:43:4: assignment_expression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_assignment_expression_in_expr125);
        	        assignment_expression2=assignment_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, assignment_expression2.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:44:4: variable_decls
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_variable_decls_in_expr130);
        	        variable_decls3=variable_decls(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, variable_decls3.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 3:
        	    // yatgWalker.g:45:8: if_expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_if_expr_in_expr139);
        	        if_expr4=if_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, if_expr4.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 4:
        	    // yatgWalker.g:46:8: while_loop
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_while_loop_in_expr148);
        	        while_loop5=while_loop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, while_loop5.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 5:
        	    // yatgWalker.g:47:8: do_loop
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_do_loop_in_expr157);
        	        do_loop6=do_loop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, do_loop6.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 6:
        	    // yatgWalker.g:48:8: for_loop
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_for_loop_in_expr166);
        	        for_loop7=for_loop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, for_loop7.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 7:
        	    // yatgWalker.g:49:8: loop_exit
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_loop_exit_in_expr175);
        	        loop_exit8=loop_exit(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, loop_exit8.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 8:
        	    // yatgWalker.g:50:8: loop_continue
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_loop_continue_in_expr184);
        	        loop_continue9=loop_continue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, loop_continue9.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 9:
        	    // yatgWalker.g:51:8: case_expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_case_expr_in_expr193);
        	        case_expr10=case_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, case_expr10.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 10:
        	    // yatgWalker.g:52:8: struct_def
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_struct_def_in_expr202);
        	        struct_def11=struct_def(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, struct_def11.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 11:
        	    // yatgWalker.g:53:8: try_expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_try_expr_in_expr211);
        	        try_expr12=try_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, try_expr12.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 12:
        	    // yatgWalker.g:54:8: function_def
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_function_def_in_expr220);
        	        function_def13=function_def(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, function_def13.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 13:
        	    // yatgWalker.g:55:8: function_return
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_function_return_in_expr229);
        	        function_return14=function_return(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, function_return14.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 14:
        	    // yatgWalker.g:56:8: context_expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_context_expr_in_expr238);
        	        context_expr15=context_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, context_expr15.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 15:
        	    // yatgWalker.g:57:8: expr_seq
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expr_seq_in_expr247);
        	        expr_seq16=expr_seq(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, expr_seq16.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 16:
        	    // yatgWalker.g:58:8: EOL
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        EOL17 = (pANTLR3_BASE_TREE) MATCHT(EOL, &FOLLOW_EOL_in_expr256); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        EOL17_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EOL17);ADAPTOR->addChild(ADAPTOR, root_0, EOL17_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end expr */

/** 
 * $ANTLR start variable_decls
 * yatgWalker.g:60:1: variable_decls : ^( VDECL type_decl ( decl )+ ) ;
 */
static yatgWalker_variable_decls_return
variable_decls(pyatgWalker ctx)
{   
    yatgWalker_variable_decls_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    VDECL18;
    yatgWalker_type_decl_return type_decl19;
    #undef	RETURN_TYPE_type_decl19
    #define	RETURN_TYPE_type_decl19 yatgWalker_type_decl_return

    yatgWalker_decl_return decl20;
    #undef	RETURN_TYPE_decl20
    #define	RETURN_TYPE_decl20 yatgWalker_decl_return

    pANTLR3_BASE_TREE VDECL18_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    VDECL18       = NULL;
    type_decl19.tree = NULL;

    decl20.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    VDECL18_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:61:2: ( ^( VDECL type_decl ( decl )+ ) )
        // yatgWalker.g:62:5: ^( VDECL type_decl ( decl )+ )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            VDECL18 = (pANTLR3_BASE_TREE) MATCHT(VDECL, &FOLLOW_VDECL_in_variable_decls277); 
            if  (HASEXCEPTION())
            {
                goto rulevariable_declsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            VDECL18_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, VDECL18);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, VDECL18_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_type_decl_in_variable_decls279);
            type_decl19=type_decl(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariable_declsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, type_decl19.tree);}
            // yatgWalker.g:62:24: ( decl )+
            {
                int cnt3=0;

                for (;;)
                {
                    int alt3=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA3_0 = LA(1);
            	    if ( (LA3_0 == VDEF) ) 
            	    {
            	        alt3=1;
            	    }

            	}
            	switch (alt3) 
            	{
            	    case 1:
            	        // yatgWalker.g:0:0: decl
            	        {
            	            _last = (pANTLR3_BASE_TREE)LT(1);
            	            FOLLOWPUSH(FOLLOW_decl_in_variable_decls281);
            	            decl20=decl(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulevariable_declsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING == 0 ) 
            	            {	ADAPTOR->addChild(ADAPTOR, root_1, decl20.tree);}

            	            if ( BACKTRACKING ==0 ) {
            	            }
            	        }
            	        break;

            	    default:
            	    
            		if ( cnt3 >= 1 )
            		{
            		    goto loop3;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return retval;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulevariable_declsEx;
            	}
            	cnt3++;
                }
                loop3: ;	/* Jump to here if this rule does not match */
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariable_declsEx; /* Prevent compiler warnings */
    rulevariable_declsEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end variable_decls */

/** 
 * $ANTLR start type_decl
 * yatgWalker.g:65:1: type_decl : ( 'local' | 'global' );
 */
static yatgWalker_type_decl_return
type_decl(pyatgWalker ctx)
{   
    yatgWalker_type_decl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set21;

    pANTLR3_BASE_TREE set21_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set21       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set21_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:66:2: ( 'local' | 'global' )
        // yatgWalker.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set21=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= 84) && (LA(1) <= 85)) )
            {
                CONSUME();

                if ( BACKTRACKING == 0 ) {
                set21_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set21);

                ADAPTOR->addChild(ADAPTOR, root_0, set21_tree);
                }
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_type_decl0);    goto ruletype_declEx;
            }

            if ( BACKTRACKING ==0 ) {
            } 

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletype_declEx; /* Prevent compiler warnings */
    ruletype_declEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end type_decl */

/** 
 * $ANTLR start decl
 * yatgWalker.g:68:1: decl : ( ^( VDEF k= IDENTIFIER ( ^( VVAL y= expr_g ) ) ) | ^( VDEF IDENTIFIER ) );
 */
static yatgWalker_decl_return
decl(pyatgWalker ctx)
{   
    yatgWalker_decl_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    k;
    pANTLR3_BASE_TREE    VDEF22;
    pANTLR3_BASE_TREE    VVAL23;
    pANTLR3_BASE_TREE    VDEF24;
    pANTLR3_BASE_TREE    IDENTIFIER25;
    yatgWalker_expr_g_return y;
    #undef	RETURN_TYPE_y
    #define	RETURN_TYPE_y yatgWalker_expr_g_return

    pANTLR3_BASE_TREE k_tree;
    pANTLR3_BASE_TREE VDEF22_tree;
    pANTLR3_BASE_TREE VVAL23_tree;
    pANTLR3_BASE_TREE VDEF24_tree;
    pANTLR3_BASE_TREE IDENTIFIER25_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    k       = NULL;
    VDEF22       = NULL;
    VVAL23       = NULL;
    VDEF24       = NULL;
    IDENTIFIER25       = NULL;
    y.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    k_tree   = NULL;
    VDEF22_tree   = NULL;
    VVAL23_tree   = NULL;
    VDEF24_tree   = NULL;
    IDENTIFIER25_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:70:2: ( ^( VDEF k= IDENTIFIER ( ^( VVAL y= expr_g ) ) ) | ^( VDEF IDENTIFIER ) )
            
            ANTLR3_UINT32 alt4;

            alt4=2;


            {
                int LA4_0 = LA(1);
                if ( (LA4_0 == VDEF) ) 
                {

                    {
                        int LA4_1 = LA(2);
                        if ( (LA4_1 == DOWN) ) 
                        {

                            {
                                int LA4_2 = LA(3);
                                if ( (LA4_2 == IDENTIFIER) ) 
                                {

                                    {
                                        int LA4_3 = LA(4);
                                        if ( (LA4_3 == UP) ) 
                                        {
                                            alt4=2;
                                        }
                                        else if ( (LA4_3 == VVAL) ) 
                                        {
                                            alt4=1;
                                        }
                                        else 
                                        {
                                            if (BACKTRACKING>0)
                                            {
                                                FAILEDFLAG = ANTLR3_TRUE; 
                                                return retval;
                                            }
                                        
                                            CONSTRUCTEX();
                                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                            EXCEPTION->message      = (void *)"";
                                            EXCEPTION->decisionNum  = 4;
                                            EXCEPTION->state        = 3;


                                            goto ruledeclEx;
                                        }
                                    }
                                }
                                else 
                                {
                                    if (BACKTRACKING>0)
                                    {
                                        FAILEDFLAG = ANTLR3_TRUE; 
                                        return retval;
                                    }
                                
                                    CONSTRUCTEX();
                                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                    EXCEPTION->message      = (void *)"";
                                    EXCEPTION->decisionNum  = 4;
                                    EXCEPTION->state        = 2;


                                    goto ruledeclEx;
                                }
                            }
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 4;
                            EXCEPTION->state        = 1;


                            goto ruledeclEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 4;
                    EXCEPTION->state        = 0;


                    goto ruledeclEx;
                }
            }
            switch (alt4) 
            {
        	case 1:
        	    // yatgWalker.g:71:4: ^( VDEF k= IDENTIFIER ( ^( VVAL y= expr_g ) ) )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        VDEF22 = (pANTLR3_BASE_TREE) MATCHT(VDEF, &FOLLOW_VDEF_in_decl317); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        VDEF22_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, VDEF22);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, VDEF22_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        k = (pANTLR3_BASE_TREE) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_decl321); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        k_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, k);ADAPTOR->addChild(ADAPTOR, root_1, k_tree);
        	        }
        	        // yatgWalker.g:71:25: ( ^( VVAL y= expr_g ) )
        	        // yatgWalker.g:71:26: ^( VVAL y= expr_g )
        	        {
        	            _last = (pANTLR3_BASE_TREE)LT(1);
        	            {
        	            pANTLR3_BASE_TREE _save_last_2;
        	            pANTLR3_BASE_TREE _first_last_2;
        	            pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
        	            _first_last_2 = NULL;
        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	            VVAL23 = (pANTLR3_BASE_TREE) MATCHT(VVAL, &FOLLOW_VVAL_in_decl325); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruledeclEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING == 0 ) {
        	            VVAL23_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, VVAL23);

        	            root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, VVAL23_tree, root_2);
        	            }


        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            _last = (pANTLR3_BASE_TREE)LT(1);
        	            FOLLOWPUSH(FOLLOW_expr_g_in_decl329);
        	            y=expr_g(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruledeclEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING == 0 ) 
        	            {	ADAPTOR->addChild(ADAPTOR, root_2, y.tree);}

        	            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
        	            }


        	            if ( BACKTRACKING ==0 ) {
        	            }
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {
						
						pANTLR3_COMMON_TREE s=(pANTLR3_COMMON_TREE)(k->super);
						
						cout<<"Index "<<s->token->index<<" "<<k->getToken(k)->index<<endl;
        	            		int asd=0;
								char* key=(char*)k->getText(k)->chars;
        	            		if(zym.currentScope->VarTable.ZIHash[key]==NULL)
        	            		{
        	            			zym.currentScope->VarTable.Insert(&asd,key);
        	            			cout<<"New var "<<key<<endl;
        	            		}
        	            		else
        	            			cout<<key<<" variable aleardy defined "<<*(zym.currentScope->VarTable.ZIHash[key])<<endl;
        	            	  
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:85:4: ^( VDEF IDENTIFIER )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        VDEF24 = (pANTLR3_BASE_TREE) MATCHT(VDEF, &FOLLOW_VDEF_in_decl349); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        VDEF24_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, VDEF24);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, VDEF24_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        IDENTIFIER25 = (pANTLR3_BASE_TREE) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_decl351); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        IDENTIFIER25_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, IDENTIFIER25);ADAPTOR->addChild(ADAPTOR, root_1, IDENTIFIER25_tree);
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	            	  	
        	            	  
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruledeclEx; /* Prevent compiler warnings */
    ruledeclEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end decl */

/** 
 * $ANTLR start if_expr
 * yatgWalker.g:91:1: if_expr : ^( EIF ^( EIF_COND c= expr_g ) ^( EIF_THEN c1= expr_g ) ( ^( EIF_ELSE c2= expr_g ) )? ) ;
 */
static yatgWalker_if_expr_return
if_expr(pyatgWalker ctx)
{   
    yatgWalker_if_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    EIF26;
    pANTLR3_BASE_TREE    EIF_COND27;
    pANTLR3_BASE_TREE    EIF_THEN28;
    pANTLR3_BASE_TREE    EIF_ELSE29;
    yatgWalker_expr_g_return c;
    #undef	RETURN_TYPE_c
    #define	RETURN_TYPE_c yatgWalker_expr_g_return

    yatgWalker_expr_g_return c1;
    #undef	RETURN_TYPE_c1
    #define	RETURN_TYPE_c1 yatgWalker_expr_g_return

    yatgWalker_expr_g_return c2;
    #undef	RETURN_TYPE_c2
    #define	RETURN_TYPE_c2 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE EIF26_tree;
    pANTLR3_BASE_TREE EIF_COND27_tree;
    pANTLR3_BASE_TREE EIF_THEN28_tree;
    pANTLR3_BASE_TREE EIF_ELSE29_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    EIF26       = NULL;
    EIF_COND27       = NULL;
    EIF_THEN28       = NULL;
    EIF_ELSE29       = NULL;
    c.tree = NULL;

    c1.tree = NULL;

    c2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    EIF26_tree   = NULL;
    EIF_COND27_tree   = NULL;
    EIF_THEN28_tree   = NULL;
    EIF_ELSE29_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:92:2: ( ^( EIF ^( EIF_COND c= expr_g ) ^( EIF_THEN c1= expr_g ) ( ^( EIF_ELSE c2= expr_g ) )? ) )
        // yatgWalker.g:93:4: ^( EIF ^( EIF_COND c= expr_g ) ^( EIF_THEN c1= expr_g ) ( ^( EIF_ELSE c2= expr_g ) )? )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            EIF26 = (pANTLR3_BASE_TREE) MATCHT(EIF, &FOLLOW_EIF_in_if_expr372); 
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            EIF26_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EIF26);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EIF26_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_2;
            pANTLR3_BASE_TREE _first_last_2;
            pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
            _first_last_2 = NULL;
            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            EIF_COND27 = (pANTLR3_BASE_TREE) MATCHT(EIF_COND, &FOLLOW_EIF_COND_in_if_expr375); 
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            EIF_COND27_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EIF_COND27);

            root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EIF_COND27_tree, root_2);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_if_expr380);
            c=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_2, c.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
            }

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_2;
            pANTLR3_BASE_TREE _first_last_2;
            pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
            _first_last_2 = NULL;
            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            EIF_THEN28 = (pANTLR3_BASE_TREE) MATCHT(EIF_THEN, &FOLLOW_EIF_THEN_in_if_expr384); 
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            EIF_THEN28_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EIF_THEN28);

            root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EIF_THEN28_tree, root_2);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_if_expr389);
            c1=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_2, c1.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
            }


            // yatgWalker.g:93:55: ( ^( EIF_ELSE c2= expr_g ) )?
            {
                int alt5=2;
                {
                    int LA5_0 = LA(1);
                    if ( (LA5_0 == EIF_ELSE) ) 
                    {
                        alt5=1;
                    }
                }
                switch (alt5) 
                {
            	case 1:
            	    // yatgWalker.g:93:56: ^( EIF_ELSE c2= expr_g )
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        {
            	        pANTLR3_BASE_TREE _save_last_2;
            	        pANTLR3_BASE_TREE _first_last_2;
            	        pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
            	        _first_last_2 = NULL;
            	        root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            	        EIF_ELSE29 = (pANTLR3_BASE_TREE) MATCHT(EIF_ELSE, &FOLLOW_EIF_ELSE_in_if_expr394); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleif_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) {
            	        EIF_ELSE29_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EIF_ELSE29);

            	        root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EIF_ELSE29_tree, root_2);
            	        }


            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_expr_g_in_if_expr399);
            	        c2=expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleif_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_2, c2.tree);}

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
            	        }


            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }

            if ( BACKTRACKING==0 ) 
            {

                	  
            }

            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleif_exprEx; /* Prevent compiler warnings */
    ruleif_exprEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end if_expr */

/** 
 * $ANTLR start while_loop
 * yatgWalker.g:98:1: while_loop : ^( EWHILE ^( EWHILE_CON expr_g ) ^( EWHILE_EXP expr_g ) ) ;
 */
static yatgWalker_while_loop_return
while_loop(pyatgWalker ctx)
{   
    yatgWalker_while_loop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    EWHILE30;
    pANTLR3_BASE_TREE    EWHILE_CON31;
    pANTLR3_BASE_TREE    EWHILE_EXP33;
    yatgWalker_expr_g_return expr_g32;
    #undef	RETURN_TYPE_expr_g32
    #define	RETURN_TYPE_expr_g32 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g34;
    #undef	RETURN_TYPE_expr_g34
    #define	RETURN_TYPE_expr_g34 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE EWHILE30_tree;
    pANTLR3_BASE_TREE EWHILE_CON31_tree;
    pANTLR3_BASE_TREE EWHILE_EXP33_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    EWHILE30       = NULL;
    EWHILE_CON31       = NULL;
    EWHILE_EXP33       = NULL;
    expr_g32.tree = NULL;

    expr_g34.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    EWHILE30_tree   = NULL;
    EWHILE_CON31_tree   = NULL;
    EWHILE_EXP33_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:99:2: ( ^( EWHILE ^( EWHILE_CON expr_g ) ^( EWHILE_EXP expr_g ) ) )
        // yatgWalker.g:100:4: ^( EWHILE ^( EWHILE_CON expr_g ) ^( EWHILE_EXP expr_g ) )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            EWHILE30 = (pANTLR3_BASE_TREE) MATCHT(EWHILE, &FOLLOW_EWHILE_in_while_loop427); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            EWHILE30_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EWHILE30);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EWHILE30_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_2;
            pANTLR3_BASE_TREE _first_last_2;
            pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
            _first_last_2 = NULL;
            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            EWHILE_CON31 = (pANTLR3_BASE_TREE) MATCHT(EWHILE_CON, &FOLLOW_EWHILE_CON_in_while_loop430); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            EWHILE_CON31_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EWHILE_CON31);

            root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EWHILE_CON31_tree, root_2);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_while_loop432);
            expr_g32=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_2, expr_g32.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
            }

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_2;
            pANTLR3_BASE_TREE _first_last_2;
            pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
            _first_last_2 = NULL;
            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            EWHILE_EXP33 = (pANTLR3_BASE_TREE) MATCHT(EWHILE_EXP, &FOLLOW_EWHILE_EXP_in_while_loop436); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            EWHILE_EXP33_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EWHILE_EXP33);

            root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EWHILE_EXP33_tree, root_2);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_while_loop438);
            expr_g34=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_2, expr_g34.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
            }


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhile_loopEx; /* Prevent compiler warnings */
    rulewhile_loopEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end while_loop */

/** 
 * $ANTLR start do_loop
 * yatgWalker.g:103:1: do_loop : ^( EDO ^( EDO_EXP expr_g ) ^( EDO_CON expr_g ) ) ;
 */
static yatgWalker_do_loop_return
do_loop(pyatgWalker ctx)
{   
    yatgWalker_do_loop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    EDO35;
    pANTLR3_BASE_TREE    EDO_EXP36;
    pANTLR3_BASE_TREE    EDO_CON38;
    yatgWalker_expr_g_return expr_g37;
    #undef	RETURN_TYPE_expr_g37
    #define	RETURN_TYPE_expr_g37 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g39;
    #undef	RETURN_TYPE_expr_g39
    #define	RETURN_TYPE_expr_g39 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE EDO35_tree;
    pANTLR3_BASE_TREE EDO_EXP36_tree;
    pANTLR3_BASE_TREE EDO_CON38_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    EDO35       = NULL;
    EDO_EXP36       = NULL;
    EDO_CON38       = NULL;
    expr_g37.tree = NULL;

    expr_g39.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    EDO35_tree   = NULL;
    EDO_EXP36_tree   = NULL;
    EDO_CON38_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:104:2: ( ^( EDO ^( EDO_EXP expr_g ) ^( EDO_CON expr_g ) ) )
        // yatgWalker.g:105:4: ^( EDO ^( EDO_EXP expr_g ) ^( EDO_CON expr_g ) )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            EDO35 = (pANTLR3_BASE_TREE) MATCHT(EDO, &FOLLOW_EDO_in_do_loop458); 
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            EDO35_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EDO35);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EDO35_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_2;
            pANTLR3_BASE_TREE _first_last_2;
            pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
            _first_last_2 = NULL;
            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            EDO_EXP36 = (pANTLR3_BASE_TREE) MATCHT(EDO_EXP, &FOLLOW_EDO_EXP_in_do_loop461); 
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            EDO_EXP36_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EDO_EXP36);

            root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EDO_EXP36_tree, root_2);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_do_loop463);
            expr_g37=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_2, expr_g37.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
            }

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_2;
            pANTLR3_BASE_TREE _first_last_2;
            pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
            _first_last_2 = NULL;
            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            EDO_CON38 = (pANTLR3_BASE_TREE) MATCHT(EDO_CON, &FOLLOW_EDO_CON_in_do_loop467); 
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            EDO_CON38_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EDO_CON38);

            root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EDO_CON38_tree, root_2);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_do_loop469);
            expr_g39=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_2, expr_g39.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
            }


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledo_loopEx; /* Prevent compiler warnings */
    ruledo_loopEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end do_loop */

/** 
 * $ANTLR start for_loop
 * yatgWalker.g:108:1: for_loop : ^( EFOR IDENTIFIER ^( EFOR_SRC source ) ^( EFOR_EXP expr_g ) ) ;
 */
static yatgWalker_for_loop_return
for_loop(pyatgWalker ctx)
{   
    yatgWalker_for_loop_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    EFOR40;
    pANTLR3_BASE_TREE    IDENTIFIER41;
    pANTLR3_BASE_TREE    EFOR_SRC42;
    pANTLR3_BASE_TREE    EFOR_EXP44;
    yatgWalker_source_return source43;
    #undef	RETURN_TYPE_source43
    #define	RETURN_TYPE_source43 yatgWalker_source_return

    yatgWalker_expr_g_return expr_g45;
    #undef	RETURN_TYPE_expr_g45
    #define	RETURN_TYPE_expr_g45 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE EFOR40_tree;
    pANTLR3_BASE_TREE IDENTIFIER41_tree;
    pANTLR3_BASE_TREE EFOR_SRC42_tree;
    pANTLR3_BASE_TREE EFOR_EXP44_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    EFOR40       = NULL;
    IDENTIFIER41       = NULL;
    EFOR_SRC42       = NULL;
    EFOR_EXP44       = NULL;
    source43.tree = NULL;

    expr_g45.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    EFOR40_tree   = NULL;
    IDENTIFIER41_tree   = NULL;
    EFOR_SRC42_tree   = NULL;
    EFOR_EXP44_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:109:2: ( ^( EFOR IDENTIFIER ^( EFOR_SRC source ) ^( EFOR_EXP expr_g ) ) )
        // yatgWalker.g:110:4: ^( EFOR IDENTIFIER ^( EFOR_SRC source ) ^( EFOR_EXP expr_g ) )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            EFOR40 = (pANTLR3_BASE_TREE) MATCHT(EFOR, &FOLLOW_EFOR_in_for_loop489); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            EFOR40_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EFOR40);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EFOR40_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            IDENTIFIER41 = (pANTLR3_BASE_TREE) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_for_loop491); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING ==0 ) {
            IDENTIFIER41_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, IDENTIFIER41);ADAPTOR->addChild(ADAPTOR, root_1, IDENTIFIER41_tree);
            }
            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_2;
            pANTLR3_BASE_TREE _first_last_2;
            pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
            _first_last_2 = NULL;
            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            EFOR_SRC42 = (pANTLR3_BASE_TREE) MATCHT(EFOR_SRC, &FOLLOW_EFOR_SRC_in_for_loop494); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            EFOR_SRC42_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EFOR_SRC42);

            root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EFOR_SRC42_tree, root_2);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_source_in_for_loop496);
            source43=source(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_2, source43.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
            }

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_2;
            pANTLR3_BASE_TREE _first_last_2;
            pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
            _first_last_2 = NULL;
            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            EFOR_EXP44 = (pANTLR3_BASE_TREE) MATCHT(EFOR_EXP, &FOLLOW_EFOR_EXP_in_for_loop501); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            EFOR_EXP44_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EFOR_EXP44);

            root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, EFOR_EXP44_tree, root_2);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_for_loop503);
            expr_g45=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_2, expr_g45.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
            }


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefor_loopEx; /* Prevent compiler warnings */
    rulefor_loopEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end for_loop */

/** 
 * $ANTLR start source
 * yatgWalker.g:113:1: source : ^( ESRC_START expr_g ) ( ^( ESRC_TO expr_g ) )? ( ^( ESRC_BY expr_g ) )? ( ^( ESRC_WHERE expr_g ) )? ;
 */
static yatgWalker_source_return
source(pyatgWalker ctx)
{   
    yatgWalker_source_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    ESRC_START46;
    pANTLR3_BASE_TREE    ESRC_TO48;
    pANTLR3_BASE_TREE    ESRC_BY50;
    pANTLR3_BASE_TREE    ESRC_WHERE52;
    yatgWalker_expr_g_return expr_g47;
    #undef	RETURN_TYPE_expr_g47
    #define	RETURN_TYPE_expr_g47 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g49;
    #undef	RETURN_TYPE_expr_g49
    #define	RETURN_TYPE_expr_g49 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g51;
    #undef	RETURN_TYPE_expr_g51
    #define	RETURN_TYPE_expr_g51 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g53;
    #undef	RETURN_TYPE_expr_g53
    #define	RETURN_TYPE_expr_g53 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE ESRC_START46_tree;
    pANTLR3_BASE_TREE ESRC_TO48_tree;
    pANTLR3_BASE_TREE ESRC_BY50_tree;
    pANTLR3_BASE_TREE ESRC_WHERE52_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    ESRC_START46       = NULL;
    ESRC_TO48       = NULL;
    ESRC_BY50       = NULL;
    ESRC_WHERE52       = NULL;
    expr_g47.tree = NULL;

    expr_g49.tree = NULL;

    expr_g51.tree = NULL;

    expr_g53.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ESRC_START46_tree   = NULL;
    ESRC_TO48_tree   = NULL;
    ESRC_BY50_tree   = NULL;
    ESRC_WHERE52_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:114:2: ( ^( ESRC_START expr_g ) ( ^( ESRC_TO expr_g ) )? ( ^( ESRC_BY expr_g ) )? ( ^( ESRC_WHERE expr_g ) )? )
        // yatgWalker.g:115:4: ^( ESRC_START expr_g ) ( ^( ESRC_TO expr_g ) )? ( ^( ESRC_BY expr_g ) )? ( ^( ESRC_WHERE expr_g ) )?
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            ESRC_START46 = (pANTLR3_BASE_TREE) MATCHT(ESRC_START, &FOLLOW_ESRC_START_in_source523); 
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            ESRC_START46_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ESRC_START46);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ESRC_START46_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_source525);
            expr_g47=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g47.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            // yatgWalker.g:115:25: ( ^( ESRC_TO expr_g ) )?
            {
                int alt6=2;
                {
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == ESRC_TO) ) 
                    {
                        alt6=1;
                    }
                }
                switch (alt6) 
                {
            	case 1:
            	    // yatgWalker.g:115:26: ^( ESRC_TO expr_g )
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        {
            	        pANTLR3_BASE_TREE _save_last_1;
            	        pANTLR3_BASE_TREE _first_last_1;
            	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            	        _first_last_1 = NULL;
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            	        ESRC_TO48 = (pANTLR3_BASE_TREE) MATCHT(ESRC_TO, &FOLLOW_ESRC_TO_in_source530); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) {
            	        ESRC_TO48_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ESRC_TO48);

            	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ESRC_TO48_tree, root_1);
            	        }


            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_expr_g_in_source532);
            	        expr_g49=expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g49.tree);}

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            	        }


            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

                }
            }

            // yatgWalker.g:115:46: ( ^( ESRC_BY expr_g ) )?
            {
                int alt7=2;
                {
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == ESRC_BY) ) 
                    {
                        alt7=1;
                    }
                }
                switch (alt7) 
                {
            	case 1:
            	    // yatgWalker.g:115:47: ^( ESRC_BY expr_g )
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        {
            	        pANTLR3_BASE_TREE _save_last_1;
            	        pANTLR3_BASE_TREE _first_last_1;
            	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            	        _first_last_1 = NULL;
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            	        ESRC_BY50 = (pANTLR3_BASE_TREE) MATCHT(ESRC_BY, &FOLLOW_ESRC_BY_in_source539); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) {
            	        ESRC_BY50_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ESRC_BY50);

            	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ESRC_BY50_tree, root_1);
            	        }


            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_expr_g_in_source541);
            	        expr_g51=expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g51.tree);}

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            	        }


            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

                }
            }

            // yatgWalker.g:115:67: ( ^( ESRC_WHERE expr_g ) )?
            {
                int alt8=2;
                {
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == ESRC_WHERE) ) 
                    {
                        alt8=1;
                    }
                }
                switch (alt8) 
                {
            	case 1:
            	    // yatgWalker.g:115:68: ^( ESRC_WHERE expr_g )
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        {
            	        pANTLR3_BASE_TREE _save_last_1;
            	        pANTLR3_BASE_TREE _first_last_1;
            	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            	        _first_last_1 = NULL;
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            	        ESRC_WHERE52 = (pANTLR3_BASE_TREE) MATCHT(ESRC_WHERE, &FOLLOW_ESRC_WHERE_in_source548); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) {
            	        ESRC_WHERE52_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ESRC_WHERE52);

            	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ESRC_WHERE52_tree, root_1);
            	        }


            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_expr_g_in_source550);
            	        expr_g53=expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g53.tree);}

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            	        }


            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

                }
            }

            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceEx; /* Prevent compiler warnings */
    rulesourceEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end source */

/** 
 * $ANTLR start loop_exit
 * yatgWalker.g:118:1: loop_exit : ^( LP_EXIT ( ^( LP_EXIT_WITH expr_g ) )? ) ;
 */
static yatgWalker_loop_exit_return
loop_exit(pyatgWalker ctx)
{   
    yatgWalker_loop_exit_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    LP_EXIT54;
    pANTLR3_BASE_TREE    LP_EXIT_WITH55;
    yatgWalker_expr_g_return expr_g56;
    #undef	RETURN_TYPE_expr_g56
    #define	RETURN_TYPE_expr_g56 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE LP_EXIT54_tree;
    pANTLR3_BASE_TREE LP_EXIT_WITH55_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    LP_EXIT54       = NULL;
    LP_EXIT_WITH55       = NULL;
    expr_g56.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LP_EXIT54_tree   = NULL;
    LP_EXIT_WITH55_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:119:2: ( ^( LP_EXIT ( ^( LP_EXIT_WITH expr_g ) )? ) )
        // yatgWalker.g:120:4: ^( LP_EXIT ( ^( LP_EXIT_WITH expr_g ) )? )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            LP_EXIT54 = (pANTLR3_BASE_TREE) MATCHT(LP_EXIT, &FOLLOW_LP_EXIT_in_loop_exit572); 
            if  (HASEXCEPTION())
            {
                goto ruleloop_exitEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            LP_EXIT54_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LP_EXIT54);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, LP_EXIT54_tree, root_1);
            }


            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 

                // yatgWalker.g:120:15: ( ^( LP_EXIT_WITH expr_g ) )?
                {
                    int alt9=2;
                    {
                        int LA9_0 = LA(1);
                        if ( (LA9_0 == LP_EXIT_WITH) ) 
                        {
                            alt9=1;
                        }
                    }
                    switch (alt9) 
                    {
                	case 1:
                	    // yatgWalker.g:120:17: ^( LP_EXIT_WITH expr_g )
                	    {
                	        _last = (pANTLR3_BASE_TREE)LT(1);
                	        {
                	        pANTLR3_BASE_TREE _save_last_2;
                	        pANTLR3_BASE_TREE _first_last_2;
                	        pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
                	        _first_last_2 = NULL;
                	        root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
                	        LP_EXIT_WITH55 = (pANTLR3_BASE_TREE) MATCHT(LP_EXIT_WITH, &FOLLOW_LP_EXIT_WITH_in_loop_exit577); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleloop_exitEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        }
                	        if ( BACKTRACKING == 0 ) {
                	        LP_EXIT_WITH55_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LP_EXIT_WITH55);

                	        root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, LP_EXIT_WITH55_tree, root_2);
                	        }


                	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                	        _last = (pANTLR3_BASE_TREE)LT(1);
                	        FOLLOWPUSH(FOLLOW_expr_g_in_loop_exit579);
                	        expr_g56=expr_g(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleloop_exitEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        }
                	        if ( BACKTRACKING == 0 ) 
                	        {	ADAPTOR->addChild(ADAPTOR, root_2, expr_g56.tree);}

                	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
                	        }


                	        if ( BACKTRACKING ==0 ) {
                	        }
                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
            }ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleloop_exitEx; /* Prevent compiler warnings */
    ruleloop_exitEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end loop_exit */

/** 
 * $ANTLR start loop_continue
 * yatgWalker.g:123:1: loop_continue : ^( LP_CONT '' ) ;
 */
static yatgWalker_loop_continue_return
loop_continue(pyatgWalker ctx)
{   
    yatgWalker_loop_continue_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    LP_CONT57;
    pANTLR3_BASE_TREE    char_literal58;

    pANTLR3_BASE_TREE LP_CONT57_tree;
    pANTLR3_BASE_TREE char_literal58_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    LP_CONT57       = NULL;
    char_literal58       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    LP_CONT57_tree   = NULL;
    char_literal58_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:124:3: ( ^( LP_CONT '' ) )
        // yatgWalker.g:125:5: ^( LP_CONT '' )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            LP_CONT57 = (pANTLR3_BASE_TREE) MATCHT(LP_CONT, &FOLLOW_LP_CONT_in_loop_continue604); 
            if  (HASEXCEPTION())
            {
                goto ruleloop_continueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            LP_CONT57_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LP_CONT57);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, LP_CONT57_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            char_literal58 = (pANTLR3_BASE_TREE) MATCHT(152, &FOLLOW_152_in_loop_continue606); 
            if  (HASEXCEPTION())
            {
                goto ruleloop_continueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING ==0 ) {
            char_literal58_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal58);ADAPTOR->addChild(ADAPTOR, root_1, char_literal58_tree);
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleloop_continueEx; /* Prevent compiler warnings */
    ruleloop_continueEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end loop_continue */

/** 
 * $ANTLR start case_expr
 * yatgWalker.g:128:1: case_expr : ^( CASE ( ^( CASE_Exp expr_g ) )? ( ^( case_item '' ) ) ) ;
 */
static yatgWalker_case_expr_return
case_expr(pyatgWalker ctx)
{   
    yatgWalker_case_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    CASE59;
    pANTLR3_BASE_TREE    CASE_Exp60;
    pANTLR3_BASE_TREE    char_literal63;
    yatgWalker_expr_g_return expr_g61;
    #undef	RETURN_TYPE_expr_g61
    #define	RETURN_TYPE_expr_g61 yatgWalker_expr_g_return

    yatgWalker_case_item_return case_item62;
    #undef	RETURN_TYPE_case_item62
    #define	RETURN_TYPE_case_item62 yatgWalker_case_item_return

    pANTLR3_BASE_TREE CASE59_tree;
    pANTLR3_BASE_TREE CASE_Exp60_tree;
    pANTLR3_BASE_TREE char_literal63_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    CASE59       = NULL;
    CASE_Exp60       = NULL;
    char_literal63       = NULL;
    expr_g61.tree = NULL;

    case_item62.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    CASE59_tree   = NULL;
    CASE_Exp60_tree   = NULL;
    char_literal63_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:129:3: ( ^( CASE ( ^( CASE_Exp expr_g ) )? ( ^( case_item '' ) ) ) )
        // yatgWalker.g:130:4: ^( CASE ( ^( CASE_Exp expr_g ) )? ( ^( case_item '' ) ) )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            CASE59 = (pANTLR3_BASE_TREE) MATCHT(CASE, &FOLLOW_CASE_in_case_expr625); 
            if  (HASEXCEPTION())
            {
                goto rulecase_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            CASE59_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CASE59);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CASE59_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 

            // yatgWalker.g:130:11: ( ^( CASE_Exp expr_g ) )?
            {
                int alt10=2;
                {
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == CASE_Exp) ) 
                    {
                        alt10=1;
                    }
                }
                switch (alt10) 
                {
            	case 1:
            	    // yatgWalker.g:130:12: ^( CASE_Exp expr_g )
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        {
            	        pANTLR3_BASE_TREE _save_last_2;
            	        pANTLR3_BASE_TREE _first_last_2;
            	        pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
            	        _first_last_2 = NULL;
            	        root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            	        CASE_Exp60 = (pANTLR3_BASE_TREE) MATCHT(CASE_Exp, &FOLLOW_CASE_Exp_in_case_expr629); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecase_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) {
            	        CASE_Exp60_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CASE_Exp60);

            	        root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CASE_Exp60_tree, root_2);
            	        }


            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_expr_g_in_case_expr631);
            	        expr_g61=expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecase_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_2, expr_g61.tree);}

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
            	        }


            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

                }
            }
            // yatgWalker.g:130:33: ( ^( case_item '' ) )
            // yatgWalker.g:130:34: ^( case_item '' )
            {
                _last = (pANTLR3_BASE_TREE)LT(1);
                {
                pANTLR3_BASE_TREE _save_last_2;
                pANTLR3_BASE_TREE _first_last_2;
                pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
                _first_last_2 = NULL;
                root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
                FOLLOWPUSH(FOLLOW_case_item_in_case_expr639);
                case_item62=case_item(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecase_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING == 0 ) root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, case_item62.tree, root_2));


                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                _last = (pANTLR3_BASE_TREE)LT(1);
                char_literal63 = (pANTLR3_BASE_TREE) MATCHT(152, &FOLLOW_152_in_case_expr641); 
                if  (HASEXCEPTION())
                {
                    goto rulecase_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING ==0 ) {
                char_literal63_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal63);ADAPTOR->addChild(ADAPTOR, root_2, char_literal63_tree);
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
                }


                if ( BACKTRACKING ==0 ) {
                }
            }


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecase_exprEx; /* Prevent compiler warnings */
    rulecase_exprEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end case_expr */

/** 
 * $ANTLR start case_item
 * yatgWalker.g:133:1: case_item : ( ^( CASE_Item constant expr_g ) | ^( CASE_Item DEFAULT expr_g ) );
 */
static yatgWalker_case_item_return
case_item(pyatgWalker ctx)
{   
    yatgWalker_case_item_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    CASE_Item64;
    pANTLR3_BASE_TREE    CASE_Item67;
    pANTLR3_BASE_TREE    DEFAULT68;
    yatgWalker_constant_return constant65;
    #undef	RETURN_TYPE_constant65
    #define	RETURN_TYPE_constant65 yatgWalker_constant_return

    yatgWalker_expr_g_return expr_g66;
    #undef	RETURN_TYPE_expr_g66
    #define	RETURN_TYPE_expr_g66 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g69;
    #undef	RETURN_TYPE_expr_g69
    #define	RETURN_TYPE_expr_g69 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE CASE_Item64_tree;
    pANTLR3_BASE_TREE CASE_Item67_tree;
    pANTLR3_BASE_TREE DEFAULT68_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    CASE_Item64       = NULL;
    CASE_Item67       = NULL;
    DEFAULT68       = NULL;
    constant65.tree = NULL;

    expr_g66.tree = NULL;

    expr_g69.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    CASE_Item64_tree   = NULL;
    CASE_Item67_tree   = NULL;
    DEFAULT68_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:134:2: ( ^( CASE_Item constant expr_g ) | ^( CASE_Item DEFAULT expr_g ) )
            
            ANTLR3_UINT32 alt11;

            alt11=2;


            {
                int LA11_0 = LA(1);
                if ( (LA11_0 == CASE_Item) ) 
                {

                    {
                        int LA11_1 = LA(2);
                        if ( (LA11_1 == DOWN) ) 
                        {

                            {
                                int LA11_2 = LA(3);
                                if ( (LA11_2 == DEFAULT) ) 
                                {
                                    alt11=2;
                                }
                                else if ( (LA11_2 == ESEQ || ((LA11_2 >= P_BOX2) && (LA11_2 <= ARR_BIT)) || ((LA11_2 >= HEX_LITERAL) && (LA11_2 <= DIGIT)) || LA11_2 == 126 || ((LA11_2 >= 133) && (LA11_2 <= 140))) ) 
                                {
                                    alt11=1;
                                }
                                else 
                                {
                                    if (BACKTRACKING>0)
                                    {
                                        FAILEDFLAG = ANTLR3_TRUE; 
                                        return retval;
                                    }
                                
                                    CONSTRUCTEX();
                                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                    EXCEPTION->message      = (void *)"";
                                    EXCEPTION->decisionNum  = 11;
                                    EXCEPTION->state        = 2;


                                    goto rulecase_itemEx;
                                }
                            }
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 11;
                            EXCEPTION->state        = 1;


                            goto rulecase_itemEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 11;
                    EXCEPTION->state        = 0;


                    goto rulecase_itemEx;
                }
            }
            switch (alt11) 
            {
        	case 1:
        	    // yatgWalker.g:134:6: ^( CASE_Item constant expr_g )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        CASE_Item64 = (pANTLR3_BASE_TREE) MATCHT(CASE_Item, &FOLLOW_CASE_Item_in_case_item660); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        CASE_Item64_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CASE_Item64);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CASE_Item64_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_constant_in_case_item663);
        	        constant65=constant(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_1, constant65.tree);}
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expr_g_in_case_item665);
        	        expr_g66=expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g66.tree);}

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:135:6: ^( CASE_Item DEFAULT expr_g )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        CASE_Item67 = (pANTLR3_BASE_TREE) MATCHT(CASE_Item, &FOLLOW_CASE_Item_in_case_item674); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        CASE_Item67_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CASE_Item67);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CASE_Item67_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        DEFAULT68 = (pANTLR3_BASE_TREE) MATCHT(DEFAULT, &FOLLOW_DEFAULT_in_case_item678); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        DEFAULT68_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, DEFAULT68);ADAPTOR->addChild(ADAPTOR, root_1, DEFAULT68_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expr_g_in_case_item680);
        	        expr_g69=expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g69.tree);}

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecase_itemEx; /* Prevent compiler warnings */
    rulecase_itemEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end case_item */

/** 
 * $ANTLR start struct_def
 * yatgWalker.g:138:1: struct_def : ^( STRUCT ( member )+ ) ;
 */
static yatgWalker_struct_def_return
struct_def(pyatgWalker ctx)
{   
    yatgWalker_struct_def_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    STRUCT70;
    yatgWalker_member_return member71;
    #undef	RETURN_TYPE_member71
    #define	RETURN_TYPE_member71 yatgWalker_member_return

    pANTLR3_BASE_TREE STRUCT70_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    STRUCT70       = NULL;
    member71.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    STRUCT70_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:139:2: ( ^( STRUCT ( member )+ ) )
        // yatgWalker.g:140:3: ^( STRUCT ( member )+ )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            STRUCT70 = (pANTLR3_BASE_TREE) MATCHT(STRUCT, &FOLLOW_STRUCT_in_struct_def698); 
            if  (HASEXCEPTION())
            {
                goto rulestruct_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            STRUCT70_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, STRUCT70);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, STRUCT70_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            // yatgWalker.g:140:13: ( member )+
            {
                int cnt12=0;

                for (;;)
                {
                    int alt12=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA12_0 = LA(1);
            	    if ( (LA12_0 == MEMBER || LA12_0 == FUN_DEF) ) 
            	    {
            	        alt12=1;
            	    }

            	}
            	switch (alt12) 
            	{
            	    case 1:
            	        // yatgWalker.g:0:0: member
            	        {
            	            _last = (pANTLR3_BASE_TREE)LT(1);
            	            FOLLOWPUSH(FOLLOW_member_in_struct_def700);
            	            member71=member(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulestruct_defEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING == 0 ) 
            	            {	ADAPTOR->addChild(ADAPTOR, root_1, member71.tree);}

            	            if ( BACKTRACKING ==0 ) {
            	            }
            	        }
            	        break;

            	    default:
            	    
            		if ( cnt12 >= 1 )
            		{
            		    goto loop12;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return retval;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulestruct_defEx;
            	}
            	cnt12++;
                }
                loop12: ;	/* Jump to here if this rule does not match */
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestruct_defEx; /* Prevent compiler warnings */
    rulestruct_defEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end struct_def */

/** 
 * $ANTLR start member
 * yatgWalker.g:144:1: member : ( ^( MEMBER IDENTIFIER expr_g ) | ^( function_def '' ) );
 */
static yatgWalker_member_return
member(pyatgWalker ctx)
{   
    yatgWalker_member_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    MEMBER72;
    pANTLR3_BASE_TREE    IDENTIFIER73;
    pANTLR3_BASE_TREE    char_literal76;
    yatgWalker_expr_g_return expr_g74;
    #undef	RETURN_TYPE_expr_g74
    #define	RETURN_TYPE_expr_g74 yatgWalker_expr_g_return

    yatgWalker_function_def_return function_def75;
    #undef	RETURN_TYPE_function_def75
    #define	RETURN_TYPE_function_def75 yatgWalker_function_def_return

    pANTLR3_BASE_TREE MEMBER72_tree;
    pANTLR3_BASE_TREE IDENTIFIER73_tree;
    pANTLR3_BASE_TREE char_literal76_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    MEMBER72       = NULL;
    IDENTIFIER73       = NULL;
    char_literal76       = NULL;
    expr_g74.tree = NULL;

    function_def75.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    MEMBER72_tree   = NULL;
    IDENTIFIER73_tree   = NULL;
    char_literal76_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:145:2: ( ^( MEMBER IDENTIFIER expr_g ) | ^( function_def '' ) )
            
            ANTLR3_UINT32 alt13;

            alt13=2;


            {
                int LA13_0 = LA(1);
                if ( (LA13_0 == MEMBER) ) 
                {
                    alt13=1;
                }
                else if ( (LA13_0 == FUN_DEF) ) 
                {
                    alt13=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 13;
                    EXCEPTION->state        = 0;


                    goto rulememberEx;
                }
            }
            switch (alt13) 
            {
        	case 1:
        	    // yatgWalker.g:145:6: ^( MEMBER IDENTIFIER expr_g )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        MEMBER72 = (pANTLR3_BASE_TREE) MATCHT(MEMBER, &FOLLOW_MEMBER_in_member722); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        MEMBER72_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, MEMBER72);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, MEMBER72_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        IDENTIFIER73 = (pANTLR3_BASE_TREE) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_member724); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        IDENTIFIER73_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, IDENTIFIER73);ADAPTOR->addChild(ADAPTOR, root_1, IDENTIFIER73_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expr_g_in_member726);
        	        expr_g74=expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g74.tree);}

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:146:6: ^( function_def '' )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_function_def_in_member736);
        	        function_def75=function_def(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, function_def75.tree, root_1));


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal76 = (pANTLR3_BASE_TREE) MATCHT(152, &FOLLOW_152_in_member738); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal76_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal76);ADAPTOR->addChild(ADAPTOR, root_1, char_literal76_tree);
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberEx; /* Prevent compiler warnings */
    rulememberEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end member */

/** 
 * $ANTLR start try_expr
 * yatgWalker.g:149:1: try_expr : ^( ETRY ( ^( ETRY_EXP expr_g ) ) ( ^( ECATCH_EXP expr_g ) ) ) ;
 */
static yatgWalker_try_expr_return
try_expr(pyatgWalker ctx)
{   
    yatgWalker_try_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    ETRY77;
    pANTLR3_BASE_TREE    ETRY_EXP78;
    pANTLR3_BASE_TREE    ECATCH_EXP80;
    yatgWalker_expr_g_return expr_g79;
    #undef	RETURN_TYPE_expr_g79
    #define	RETURN_TYPE_expr_g79 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g81;
    #undef	RETURN_TYPE_expr_g81
    #define	RETURN_TYPE_expr_g81 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE ETRY77_tree;
    pANTLR3_BASE_TREE ETRY_EXP78_tree;
    pANTLR3_BASE_TREE ECATCH_EXP80_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    ETRY77       = NULL;
    ETRY_EXP78       = NULL;
    ECATCH_EXP80       = NULL;
    expr_g79.tree = NULL;

    expr_g81.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ETRY77_tree   = NULL;
    ETRY_EXP78_tree   = NULL;
    ECATCH_EXP80_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:150:2: ( ^( ETRY ( ^( ETRY_EXP expr_g ) ) ( ^( ECATCH_EXP expr_g ) ) ) )
        // yatgWalker.g:151:3: ^( ETRY ( ^( ETRY_EXP expr_g ) ) ( ^( ECATCH_EXP expr_g ) ) )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            ETRY77 = (pANTLR3_BASE_TREE) MATCHT(ETRY, &FOLLOW_ETRY_in_try_expr756); 
            if  (HASEXCEPTION())
            {
                goto ruletry_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            ETRY77_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ETRY77);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ETRY77_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            // yatgWalker.g:151:10: ( ^( ETRY_EXP expr_g ) )
            // yatgWalker.g:151:11: ^( ETRY_EXP expr_g )
            {
                _last = (pANTLR3_BASE_TREE)LT(1);
                {
                pANTLR3_BASE_TREE _save_last_2;
                pANTLR3_BASE_TREE _first_last_2;
                pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
                _first_last_2 = NULL;
                root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
                ETRY_EXP78 = (pANTLR3_BASE_TREE) MATCHT(ETRY_EXP, &FOLLOW_ETRY_EXP_in_try_expr760); 
                if  (HASEXCEPTION())
                {
                    goto ruletry_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING == 0 ) {
                ETRY_EXP78_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ETRY_EXP78);

                root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ETRY_EXP78_tree, root_2);
                }


                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                _last = (pANTLR3_BASE_TREE)LT(1);
                FOLLOWPUSH(FOLLOW_expr_g_in_try_expr762);
                expr_g79=expr_g(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletry_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING == 0 ) 
                {	ADAPTOR->addChild(ADAPTOR, root_2, expr_g79.tree);}

                MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
                }


                if ( BACKTRACKING ==0 ) {
                }
            }

            // yatgWalker.g:151:30: ( ^( ECATCH_EXP expr_g ) )
            // yatgWalker.g:151:31: ^( ECATCH_EXP expr_g )
            {
                _last = (pANTLR3_BASE_TREE)LT(1);
                {
                pANTLR3_BASE_TREE _save_last_2;
                pANTLR3_BASE_TREE _first_last_2;
                pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
                _first_last_2 = NULL;
                root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
                ECATCH_EXP80 = (pANTLR3_BASE_TREE) MATCHT(ECATCH_EXP, &FOLLOW_ECATCH_EXP_in_try_expr767); 
                if  (HASEXCEPTION())
                {
                    goto ruletry_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING == 0 ) {
                ECATCH_EXP80_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ECATCH_EXP80);

                root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ECATCH_EXP80_tree, root_2);
                }


                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                _last = (pANTLR3_BASE_TREE)LT(1);
                FOLLOWPUSH(FOLLOW_expr_g_in_try_expr770);
                expr_g81=expr_g(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletry_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING == 0 ) 
                {	ADAPTOR->addChild(ADAPTOR, root_2, expr_g81.tree);}

                MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
                }


                if ( BACKTRACKING ==0 ) {
                }
            }


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletry_exprEx; /* Prevent compiler warnings */
    ruletry_exprEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end try_expr */

/** 
 * $ANTLR start function_def
 * yatgWalker.g:153:1: function_def : ^( FUN_DEF ^( FUN_NAME IDENTIFIER ) ( argument_ex ) ^( BODY expr_g ) ) ;
 */
static yatgWalker_function_def_return
function_def(pyatgWalker ctx)
{   
    yatgWalker_function_def_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    FUN_DEF82;
    pANTLR3_BASE_TREE    FUN_NAME83;
    pANTLR3_BASE_TREE    IDENTIFIER84;
    pANTLR3_BASE_TREE    BODY86;
    yatgWalker_argument_ex_return argument_ex85;
    #undef	RETURN_TYPE_argument_ex85
    #define	RETURN_TYPE_argument_ex85 yatgWalker_argument_ex_return

    yatgWalker_expr_g_return expr_g87;
    #undef	RETURN_TYPE_expr_g87
    #define	RETURN_TYPE_expr_g87 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE FUN_DEF82_tree;
    pANTLR3_BASE_TREE FUN_NAME83_tree;
    pANTLR3_BASE_TREE IDENTIFIER84_tree;
    pANTLR3_BASE_TREE BODY86_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    FUN_DEF82       = NULL;
    FUN_NAME83       = NULL;
    IDENTIFIER84       = NULL;
    BODY86       = NULL;
    argument_ex85.tree = NULL;

    expr_g87.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    FUN_DEF82_tree   = NULL;
    FUN_NAME83_tree   = NULL;
    IDENTIFIER84_tree   = NULL;
    BODY86_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:154:2: ( ^( FUN_DEF ^( FUN_NAME IDENTIFIER ) ( argument_ex ) ^( BODY expr_g ) ) )
        // yatgWalker.g:155:2: ^( FUN_DEF ^( FUN_NAME IDENTIFIER ) ( argument_ex ) ^( BODY expr_g ) )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            if ( BACKTRACKING==0 ) 
            {

                	
            }
            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            FUN_DEF82 = (pANTLR3_BASE_TREE) MATCHT(FUN_DEF, &FOLLOW_FUN_DEF_in_function_def790); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            FUN_DEF82_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, FUN_DEF82);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, FUN_DEF82_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_2;
            pANTLR3_BASE_TREE _first_last_2;
            pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
            _first_last_2 = NULL;
            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            FUN_NAME83 = (pANTLR3_BASE_TREE) MATCHT(FUN_NAME, &FOLLOW_FUN_NAME_in_function_def793); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            FUN_NAME83_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, FUN_NAME83);

            root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, FUN_NAME83_tree, root_2);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            IDENTIFIER84 = (pANTLR3_BASE_TREE) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_function_def795); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING ==0 ) {
            IDENTIFIER84_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, IDENTIFIER84);ADAPTOR->addChild(ADAPTOR, root_2, IDENTIFIER84_tree);
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
            }

            // yatgWalker.g:157:36: ( argument_ex )
            // yatgWalker.g:157:38: argument_ex
            {
                _last = (pANTLR3_BASE_TREE)LT(1);
                FOLLOWPUSH(FOLLOW_argument_ex_in_function_def800);
                argument_ex85=argument_ex(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefunction_defEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING == 0 ) 
                {	ADAPTOR->addChild(ADAPTOR, root_1, argument_ex85.tree);}

                if ( BACKTRACKING ==0 ) {
                }
            }

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_2;
            pANTLR3_BASE_TREE _first_last_2;
            pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
            _first_last_2 = NULL;
            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            BODY86 = (pANTLR3_BASE_TREE) MATCHT(BODY, &FOLLOW_BODY_in_function_def806); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            BODY86_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, BODY86);

            root_2 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, BODY86_tree, root_2);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_function_def808);
            expr_g87=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_2, expr_g87.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
            }


            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }

            if ( BACKTRACKING==0 ) 
            {

                	
            }

            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunction_defEx; /* Prevent compiler warnings */
    rulefunction_defEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end function_def */

/** 
 * $ANTLR start fun
 * yatgWalker.g:162:1: fun : ( 'function' | 'fn' );
 */
static yatgWalker_fun_return
fun(pyatgWalker ctx)
{   
    yatgWalker_fun_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set88;

    pANTLR3_BASE_TREE set88_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set88       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set88_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:163:2: ( 'function' | 'fn' )
        // yatgWalker.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set88=(pANTLR3_BASE_TREE)LT(1);
            if ( ((LA(1) >= 110) && (LA(1) <= 111)) )
            {
                CONSUME();

                if ( BACKTRACKING == 0 ) {
                set88_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set88);

                ADAPTOR->addChild(ADAPTOR, root_0, set88_tree);
                }
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_fun0);    goto rulefunEx;
            }

            if ( BACKTRACKING ==0 ) {
            } 

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunEx; /* Prevent compiler warnings */
    rulefunEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end fun */

/** 
 * $ANTLR start function_return
 * yatgWalker.g:166:1: function_return : ^( RETURN expr_g ) ;
 */
static yatgWalker_function_return_return
function_return(pyatgWalker ctx)
{   
    yatgWalker_function_return_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    RETURN89;
    yatgWalker_expr_g_return expr_g90;
    #undef	RETURN_TYPE_expr_g90
    #define	RETURN_TYPE_expr_g90 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE RETURN89_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    RETURN89       = NULL;
    expr_g90.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    RETURN89_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:167:2: ( ^( RETURN expr_g ) )
        // yatgWalker.g:168:3: ^( RETURN expr_g )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            RETURN89 = (pANTLR3_BASE_TREE) MATCHT(RETURN, &FOLLOW_RETURN_in_function_return847); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_returnEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            RETURN89_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, RETURN89);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, RETURN89_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_function_return849);
            expr_g90=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunction_returnEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g90.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunction_returnEx; /* Prevent compiler warnings */
    rulefunction_returnEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end function_return */

/** 
 * $ANTLR start context_expr
 * yatgWalker.g:171:1: context_expr : ^( CONTEXT ( context )+ expr_g ) ;
 */
static yatgWalker_context_expr_return
context_expr(pyatgWalker ctx)
{   
    yatgWalker_context_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    CONTEXT91;
    yatgWalker_context_return context92;
    #undef	RETURN_TYPE_context92
    #define	RETURN_TYPE_context92 yatgWalker_context_return

    yatgWalker_expr_g_return expr_g93;
    #undef	RETURN_TYPE_expr_g93
    #define	RETURN_TYPE_expr_g93 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE CONTEXT91_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    CONTEXT91       = NULL;
    context92.tree = NULL;

    expr_g93.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    CONTEXT91_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:172:2: ( ^( CONTEXT ( context )+ expr_g ) )
        // yatgWalker.g:173:3: ^( CONTEXT ( context )+ expr_g )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            CONTEXT91 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context_expr866); 
            if  (HASEXCEPTION())
            {
                goto rulecontext_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            CONTEXT91_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT91);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT91_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            // yatgWalker.g:173:13: ( context )+
            {
                int cnt14=0;

                for (;;)
                {
                    int alt14=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA14_0 = LA(1);
            	    if ( (LA14_0 == CONTEXT) ) 
            	    {
            	        {
            	           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	            */
            	            int LA14_2 = LA(2);
            	            if ( (LA14_2 == DOWN) ) 
            	            {
            	                {
            	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                    */
            	                    int LA14_4 = LA(3);
            	                    if ( (LA14_4 == ANIMATE || ((LA14_4 >= UNDO) && (LA14_4 <= AT))) ) 
            	                    {
            	                        alt14=1;
            	                    }

            	                }
            	            }

            	        }
            	    }
            	    else if ( (LA14_0 == 93 || LA14_0 == 117 || LA14_0 == 120) ) 
            	    {
            	        alt14=1;
            	    }

            	}
            	switch (alt14) 
            	{
            	    case 1:
            	        // yatgWalker.g:0:0: context
            	        {
            	            _last = (pANTLR3_BASE_TREE)LT(1);
            	            FOLLOWPUSH(FOLLOW_context_in_context_expr868);
            	            context92=context(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulecontext_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING == 0 ) 
            	            {	ADAPTOR->addChild(ADAPTOR, root_1, context92.tree);}

            	            if ( BACKTRACKING ==0 ) {
            	            }
            	        }
            	        break;

            	    default:
            	    
            		if ( cnt14 >= 1 )
            		{
            		    goto loop14;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return retval;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulecontext_exprEx;
            	}
            	cnt14++;
                }
                loop14: ;	/* Jump to here if this rule does not match */
            }
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_context_expr871);
            expr_g93=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecontext_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g93.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontext_exprEx; /* Prevent compiler warnings */
    rulecontext_exprEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end context_expr */

/** 
 * $ANTLR start context
 * yatgWalker.g:176:1: context : ( ^( CONTEXT ANIMATE logical_expression ) | ^( CONTEXT AT LEVEL operand ) | ^( CONTEXT AT TIME operand ) | ^( CONTEXT EIN operand ) | ( 'in' )? 'coordsys' ( ^( CONTEXT COORDSYS LOCAL ) | ^( CONTEXT COORDSYS WORLD ) | ^( CONTEXT COORDSYS PARENT ) | ^( CONTEXT COORDSYS operand ) ) | 'about' ( ^( CONTEXT ABOUT PIVOT ) | ^( CONTEXT ABOUT SELECTION ) | ^( CONTEXT ABOUT COORDSYS ) | ^( CONTEXT ABOUT operand ) ) | ^( CONTEXT UNDO ^( logical_expression '' ) ) );
 */
static yatgWalker_context_return
context(pyatgWalker ctx)
{   
    yatgWalker_context_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    CONTEXT94;
    pANTLR3_BASE_TREE    ANIMATE95;
    pANTLR3_BASE_TREE    CONTEXT97;
    pANTLR3_BASE_TREE    AT98;
    pANTLR3_BASE_TREE    LEVEL99;
    pANTLR3_BASE_TREE    CONTEXT101;
    pANTLR3_BASE_TREE    AT102;
    pANTLR3_BASE_TREE    TIME103;
    pANTLR3_BASE_TREE    CONTEXT105;
    pANTLR3_BASE_TREE    EIN106;
    pANTLR3_BASE_TREE    string_literal108;
    pANTLR3_BASE_TREE    string_literal109;
    pANTLR3_BASE_TREE    CONTEXT110;
    pANTLR3_BASE_TREE    COORDSYS111;
    pANTLR3_BASE_TREE    LOCAL112;
    pANTLR3_BASE_TREE    CONTEXT113;
    pANTLR3_BASE_TREE    COORDSYS114;
    pANTLR3_BASE_TREE    WORLD115;
    pANTLR3_BASE_TREE    CONTEXT116;
    pANTLR3_BASE_TREE    COORDSYS117;
    pANTLR3_BASE_TREE    PARENT118;
    pANTLR3_BASE_TREE    CONTEXT119;
    pANTLR3_BASE_TREE    COORDSYS120;
    pANTLR3_BASE_TREE    string_literal122;
    pANTLR3_BASE_TREE    CONTEXT123;
    pANTLR3_BASE_TREE    ABOUT124;
    pANTLR3_BASE_TREE    PIVOT125;
    pANTLR3_BASE_TREE    CONTEXT126;
    pANTLR3_BASE_TREE    ABOUT127;
    pANTLR3_BASE_TREE    SELECTION128;
    pANTLR3_BASE_TREE    CONTEXT129;
    pANTLR3_BASE_TREE    ABOUT130;
    pANTLR3_BASE_TREE    COORDSYS131;
    pANTLR3_BASE_TREE    CONTEXT132;
    pANTLR3_BASE_TREE    ABOUT133;
    pANTLR3_BASE_TREE    CONTEXT135;
    pANTLR3_BASE_TREE    UNDO136;
    pANTLR3_BASE_TREE    char_literal138;
    yatgWalker_logical_expression_return logical_expression96;
    #undef	RETURN_TYPE_logical_expression96
    #define	RETURN_TYPE_logical_expression96 yatgWalker_logical_expression_return

    yatgWalker_operand_return operand100;
    #undef	RETURN_TYPE_operand100
    #define	RETURN_TYPE_operand100 yatgWalker_operand_return

    yatgWalker_operand_return operand104;
    #undef	RETURN_TYPE_operand104
    #define	RETURN_TYPE_operand104 yatgWalker_operand_return

    yatgWalker_operand_return operand107;
    #undef	RETURN_TYPE_operand107
    #define	RETURN_TYPE_operand107 yatgWalker_operand_return

    yatgWalker_operand_return operand121;
    #undef	RETURN_TYPE_operand121
    #define	RETURN_TYPE_operand121 yatgWalker_operand_return

    yatgWalker_operand_return operand134;
    #undef	RETURN_TYPE_operand134
    #define	RETURN_TYPE_operand134 yatgWalker_operand_return

    yatgWalker_logical_expression_return logical_expression137;
    #undef	RETURN_TYPE_logical_expression137
    #define	RETURN_TYPE_logical_expression137 yatgWalker_logical_expression_return

    pANTLR3_BASE_TREE CONTEXT94_tree;
    pANTLR3_BASE_TREE ANIMATE95_tree;
    pANTLR3_BASE_TREE CONTEXT97_tree;
    pANTLR3_BASE_TREE AT98_tree;
    pANTLR3_BASE_TREE LEVEL99_tree;
    pANTLR3_BASE_TREE CONTEXT101_tree;
    pANTLR3_BASE_TREE AT102_tree;
    pANTLR3_BASE_TREE TIME103_tree;
    pANTLR3_BASE_TREE CONTEXT105_tree;
    pANTLR3_BASE_TREE EIN106_tree;
    pANTLR3_BASE_TREE string_literal108_tree;
    pANTLR3_BASE_TREE string_literal109_tree;
    pANTLR3_BASE_TREE CONTEXT110_tree;
    pANTLR3_BASE_TREE COORDSYS111_tree;
    pANTLR3_BASE_TREE LOCAL112_tree;
    pANTLR3_BASE_TREE CONTEXT113_tree;
    pANTLR3_BASE_TREE COORDSYS114_tree;
    pANTLR3_BASE_TREE WORLD115_tree;
    pANTLR3_BASE_TREE CONTEXT116_tree;
    pANTLR3_BASE_TREE COORDSYS117_tree;
    pANTLR3_BASE_TREE PARENT118_tree;
    pANTLR3_BASE_TREE CONTEXT119_tree;
    pANTLR3_BASE_TREE COORDSYS120_tree;
    pANTLR3_BASE_TREE string_literal122_tree;
    pANTLR3_BASE_TREE CONTEXT123_tree;
    pANTLR3_BASE_TREE ABOUT124_tree;
    pANTLR3_BASE_TREE PIVOT125_tree;
    pANTLR3_BASE_TREE CONTEXT126_tree;
    pANTLR3_BASE_TREE ABOUT127_tree;
    pANTLR3_BASE_TREE SELECTION128_tree;
    pANTLR3_BASE_TREE CONTEXT129_tree;
    pANTLR3_BASE_TREE ABOUT130_tree;
    pANTLR3_BASE_TREE COORDSYS131_tree;
    pANTLR3_BASE_TREE CONTEXT132_tree;
    pANTLR3_BASE_TREE ABOUT133_tree;
    pANTLR3_BASE_TREE CONTEXT135_tree;
    pANTLR3_BASE_TREE UNDO136_tree;
    pANTLR3_BASE_TREE char_literal138_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    CONTEXT94       = NULL;
    ANIMATE95       = NULL;
    CONTEXT97       = NULL;
    AT98       = NULL;
    LEVEL99       = NULL;
    CONTEXT101       = NULL;
    AT102       = NULL;
    TIME103       = NULL;
    CONTEXT105       = NULL;
    EIN106       = NULL;
    string_literal108       = NULL;
    string_literal109       = NULL;
    CONTEXT110       = NULL;
    COORDSYS111       = NULL;
    LOCAL112       = NULL;
    CONTEXT113       = NULL;
    COORDSYS114       = NULL;
    WORLD115       = NULL;
    CONTEXT116       = NULL;
    COORDSYS117       = NULL;
    PARENT118       = NULL;
    CONTEXT119       = NULL;
    COORDSYS120       = NULL;
    string_literal122       = NULL;
    CONTEXT123       = NULL;
    ABOUT124       = NULL;
    PIVOT125       = NULL;
    CONTEXT126       = NULL;
    ABOUT127       = NULL;
    SELECTION128       = NULL;
    CONTEXT129       = NULL;
    ABOUT130       = NULL;
    COORDSYS131       = NULL;
    CONTEXT132       = NULL;
    ABOUT133       = NULL;
    CONTEXT135       = NULL;
    UNDO136       = NULL;
    char_literal138       = NULL;
    logical_expression96.tree = NULL;

    operand100.tree = NULL;

    operand104.tree = NULL;

    operand107.tree = NULL;

    operand121.tree = NULL;

    operand134.tree = NULL;

    logical_expression137.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    CONTEXT94_tree   = NULL;
    ANIMATE95_tree   = NULL;
    CONTEXT97_tree   = NULL;
    AT98_tree   = NULL;
    LEVEL99_tree   = NULL;
    CONTEXT101_tree   = NULL;
    AT102_tree   = NULL;
    TIME103_tree   = NULL;
    CONTEXT105_tree   = NULL;
    EIN106_tree   = NULL;
    string_literal108_tree   = NULL;
    string_literal109_tree   = NULL;
    CONTEXT110_tree   = NULL;
    COORDSYS111_tree   = NULL;
    LOCAL112_tree   = NULL;
    CONTEXT113_tree   = NULL;
    COORDSYS114_tree   = NULL;
    WORLD115_tree   = NULL;
    CONTEXT116_tree   = NULL;
    COORDSYS117_tree   = NULL;
    PARENT118_tree   = NULL;
    CONTEXT119_tree   = NULL;
    COORDSYS120_tree   = NULL;
    string_literal122_tree   = NULL;
    CONTEXT123_tree   = NULL;
    ABOUT124_tree   = NULL;
    PIVOT125_tree   = NULL;
    CONTEXT126_tree   = NULL;
    ABOUT127_tree   = NULL;
    SELECTION128_tree   = NULL;
    CONTEXT129_tree   = NULL;
    ABOUT130_tree   = NULL;
    COORDSYS131_tree   = NULL;
    CONTEXT132_tree   = NULL;
    ABOUT133_tree   = NULL;
    CONTEXT135_tree   = NULL;
    UNDO136_tree   = NULL;
    char_literal138_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:177:2: ( ^( CONTEXT ANIMATE logical_expression ) | ^( CONTEXT AT LEVEL operand ) | ^( CONTEXT AT TIME operand ) | ^( CONTEXT EIN operand ) | ( 'in' )? 'coordsys' ( ^( CONTEXT COORDSYS LOCAL ) | ^( CONTEXT COORDSYS WORLD ) | ^( CONTEXT COORDSYS PARENT ) | ^( CONTEXT COORDSYS operand ) ) | 'about' ( ^( CONTEXT ABOUT PIVOT ) | ^( CONTEXT ABOUT SELECTION ) | ^( CONTEXT ABOUT COORDSYS ) | ^( CONTEXT ABOUT operand ) ) | ^( CONTEXT UNDO ^( logical_expression '' ) ) )
            
            ANTLR3_UINT32 alt18;

            alt18=7;

            alt18 = cdfa18.predict(ctx, RECOGNIZER, ISTREAM, &cdfa18);
            if  (HASEXCEPTION())
            {
                goto rulecontextEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt18) 
            {
        	case 1:
        	    // yatgWalker.g:177:5: ^( CONTEXT ANIMATE logical_expression )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        CONTEXT94 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context886); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        CONTEXT94_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT94);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT94_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        ANIMATE95 = (pANTLR3_BASE_TREE) MATCHT(ANIMATE, &FOLLOW_ANIMATE_in_context889); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        ANIMATE95_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ANIMATE95);ADAPTOR->addChild(ADAPTOR, root_1, ANIMATE95_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_logical_expression_in_context891);
        	        logical_expression96=logical_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_1, logical_expression96.tree);}

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:178:6: ^( CONTEXT AT LEVEL operand )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        CONTEXT97 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context900); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        CONTEXT97_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT97);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT97_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        AT98 = (pANTLR3_BASE_TREE) MATCHT(AT, &FOLLOW_AT_in_context902); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        AT98_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, AT98);ADAPTOR->addChild(ADAPTOR, root_1, AT98_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        LEVEL99 = (pANTLR3_BASE_TREE) MATCHT(LEVEL, &FOLLOW_LEVEL_in_context904); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        LEVEL99_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LEVEL99);ADAPTOR->addChild(ADAPTOR, root_1, LEVEL99_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_operand_in_context906);
        	        operand100=operand(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_1, operand100.tree);}

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 3:
        	    // yatgWalker.g:179:5: ^( CONTEXT AT TIME operand )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        CONTEXT101 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context914); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        CONTEXT101_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT101);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT101_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        AT102 = (pANTLR3_BASE_TREE) MATCHT(AT, &FOLLOW_AT_in_context916); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        AT102_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, AT102);ADAPTOR->addChild(ADAPTOR, root_1, AT102_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        TIME103 = (pANTLR3_BASE_TREE) MATCHT(TIME, &FOLLOW_TIME_in_context918); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        TIME103_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, TIME103);ADAPTOR->addChild(ADAPTOR, root_1, TIME103_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_operand_in_context920);
        	        operand104=operand(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_1, operand104.tree);}

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 4:
        	    // yatgWalker.g:180:5: ^( CONTEXT EIN operand )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        CONTEXT105 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context928); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        CONTEXT105_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT105);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT105_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        EIN106 = (pANTLR3_BASE_TREE) MATCHT(EIN, &FOLLOW_EIN_in_context930); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        EIN106_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, EIN106);ADAPTOR->addChild(ADAPTOR, root_1, EIN106_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_operand_in_context932);
        	        operand107=operand(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_1, operand107.tree);}

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 5:
        	    // yatgWalker.g:181:4: ( 'in' )? 'coordsys' ( ^( CONTEXT COORDSYS LOCAL ) | ^( CONTEXT COORDSYS WORLD ) | ^( CONTEXT COORDSYS PARENT ) | ^( CONTEXT COORDSYS operand ) )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // yatgWalker.g:181:4: ( 'in' )?
        	        {
        	            int alt15=2;
        	            {
        	                int LA15_0 = LA(1);
        	                if ( (LA15_0 == 93) ) 
        	                {
        	                    alt15=1;
        	                }
        	            }
        	            switch (alt15) 
        	            {
        	        	case 1:
        	        	    // yatgWalker.g:181:5: 'in'
        	        	    {
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        string_literal108 = (pANTLR3_BASE_TREE) MATCHT(93, &FOLLOW_93_in_context939); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        string_literal108_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, string_literal108);ADAPTOR->addChild(ADAPTOR, root_0, string_literal108_tree);
        	        	        }

        	        	        if ( BACKTRACKING ==0 ) {
        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        string_literal109 = (pANTLR3_BASE_TREE) MATCHT(117, &FOLLOW_117_in_context943); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        string_literal109_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, string_literal109);ADAPTOR->addChild(ADAPTOR, root_0, string_literal109_tree);
        	        }

        	        // yatgWalker.g:182:3: ( ^( CONTEXT COORDSYS LOCAL ) | ^( CONTEXT COORDSYS WORLD ) | ^( CONTEXT COORDSYS PARENT ) | ^( CONTEXT COORDSYS operand ) )
        	        {
        	            int alt16=4;

        	            {
        	                int LA16_0 = LA(1);
        	                if ( (LA16_0 == CONTEXT) ) 
        	                {

        	                    {
        	                        int LA16_1 = LA(2);
        	                        if ( (LA16_1 == DOWN) ) 
        	                        {

        	                            {
        	                                int LA16_2 = LA(3);
        	                                if ( (LA16_2 == COORDSYS) ) 
        	                                {
        	                                    switch ( LA(4) ) 
        	                                    {
        	                                    case LOCAL:
        	                                    	{
        	                                    		alt16=1;
        	                                    	}
        	                                        break;
        	                                    case WORLD:
        	                                    	{
        	                                    		alt16=2;
        	                                    	}
        	                                        break;
        	                                    case PARENT:
        	                                    	{
        	                                    		alt16=3;
        	                                    	}
        	                                        break;
        	                                    case ESEQ:
        	                                    case P_BOX2:
        	                                    case P_P2:
        	                                    case P_P3:
        	                                    case ARR_A:
        	                                    case ARR_BIT:
        	                                    case OPERAND:
        	                                    case HEX_LITERAL:
        	                                    case STRING_LITERAL:
        	                                    case DIGIT:
        	                                    case 126:
        	                                    case 133:
        	                                    case 134:
        	                                    case 135:
        	                                    case 136:
        	                                    case 137:
        	                                    case 138:
        	                                    case 139:
        	                                    case 140:
        	                                    	{
        	                                    		alt16=4;
        	                                    	}
        	                                        break;

        	                                    default:
        	                                        if (BACKTRACKING>0)
        	                                        {
        	                                            FAILEDFLAG = ANTLR3_TRUE; 
        	                                            return retval;
        	                                        }
        	                                        CONSTRUCTEX();
        	                                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                                        EXCEPTION->message      = (void *)"";
        	                                        EXCEPTION->decisionNum  = 16;
        	                                        EXCEPTION->state        = 3;


        	                                        goto rulecontextEx;
        	                                    }

        	                                }
        	                                else 
        	                                {
        	                                    if (BACKTRACKING>0)
        	                                    {
        	                                        FAILEDFLAG = ANTLR3_TRUE; 
        	                                        return retval;
        	                                    }
        	                                
        	                                    CONSTRUCTEX();
        	                                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                                    EXCEPTION->message      = (void *)"";
        	                                    EXCEPTION->decisionNum  = 16;
        	                                    EXCEPTION->state        = 2;


        	                                    goto rulecontextEx;
        	                                }
        	                            }
        	                        }
        	                        else 
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE; 
        	                                return retval;
        	                            }
        	                        
        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 16;
        	                            EXCEPTION->state        = 1;


        	                            goto rulecontextEx;
        	                        }
        	                    }
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 16;
        	                    EXCEPTION->state        = 0;


        	                    goto rulecontextEx;
        	                }
        	            }
        	            switch (alt16) 
        	            {
        	        	case 1:
        	        	    // yatgWalker.g:183:7: ^( CONTEXT COORDSYS LOCAL )
        	        	    {
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        {
        	        	        pANTLR3_BASE_TREE _save_last_1;
        	        	        pANTLR3_BASE_TREE _first_last_1;
        	        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        	        _first_last_1 = NULL;
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        	        CONTEXT110 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context957); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING == 0 ) {
        	        	        CONTEXT110_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT110);

        	        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT110_tree, root_1);
        	        	        }


        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        COORDSYS111 = (pANTLR3_BASE_TREE) MATCHT(COORDSYS, &FOLLOW_COORDSYS_in_context960); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        COORDSYS111_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, COORDSYS111);ADAPTOR->addChild(ADAPTOR, root_1, COORDSYS111_tree);
        	        	        }
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        LOCAL112 = (pANTLR3_BASE_TREE) MATCHT(LOCAL, &FOLLOW_LOCAL_in_context962); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        LOCAL112_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, LOCAL112);ADAPTOR->addChild(ADAPTOR, root_1, LOCAL112_tree);
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        	        }


        	        	        if ( BACKTRACKING ==0 ) {
        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // yatgWalker.g:184:7: ^( CONTEXT COORDSYS WORLD )
        	        	    {
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        {
        	        	        pANTLR3_BASE_TREE _save_last_1;
        	        	        pANTLR3_BASE_TREE _first_last_1;
        	        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        	        _first_last_1 = NULL;
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        	        CONTEXT113 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context972); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING == 0 ) {
        	        	        CONTEXT113_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT113);

        	        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT113_tree, root_1);
        	        	        }


        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        COORDSYS114 = (pANTLR3_BASE_TREE) MATCHT(COORDSYS, &FOLLOW_COORDSYS_in_context975); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        COORDSYS114_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, COORDSYS114);ADAPTOR->addChild(ADAPTOR, root_1, COORDSYS114_tree);
        	        	        }
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        WORLD115 = (pANTLR3_BASE_TREE) MATCHT(WORLD, &FOLLOW_WORLD_in_context977); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        WORLD115_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, WORLD115);ADAPTOR->addChild(ADAPTOR, root_1, WORLD115_tree);
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        	        }


        	        	        if ( BACKTRACKING ==0 ) {
        	        	        }
        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // yatgWalker.g:185:7: ^( CONTEXT COORDSYS PARENT )
        	        	    {
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        {
        	        	        pANTLR3_BASE_TREE _save_last_1;
        	        	        pANTLR3_BASE_TREE _first_last_1;
        	        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        	        _first_last_1 = NULL;
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        	        CONTEXT116 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context987); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING == 0 ) {
        	        	        CONTEXT116_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT116);

        	        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT116_tree, root_1);
        	        	        }


        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        COORDSYS117 = (pANTLR3_BASE_TREE) MATCHT(COORDSYS, &FOLLOW_COORDSYS_in_context989); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        COORDSYS117_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, COORDSYS117);ADAPTOR->addChild(ADAPTOR, root_1, COORDSYS117_tree);
        	        	        }
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        PARENT118 = (pANTLR3_BASE_TREE) MATCHT(PARENT, &FOLLOW_PARENT_in_context991); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        PARENT118_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, PARENT118);ADAPTOR->addChild(ADAPTOR, root_1, PARENT118_tree);
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        	        }


        	        	        if ( BACKTRACKING ==0 ) {
        	        	        }
        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // yatgWalker.g:186:7: ^( CONTEXT COORDSYS operand )
        	        	    {
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        {
        	        	        pANTLR3_BASE_TREE _save_last_1;
        	        	        pANTLR3_BASE_TREE _first_last_1;
        	        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        	        _first_last_1 = NULL;
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        	        CONTEXT119 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context1001); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING == 0 ) {
        	        	        CONTEXT119_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT119);

        	        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT119_tree, root_1);
        	        	        }


        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        COORDSYS120 = (pANTLR3_BASE_TREE) MATCHT(COORDSYS, &FOLLOW_COORDSYS_in_context1003); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        COORDSYS120_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, COORDSYS120);ADAPTOR->addChild(ADAPTOR, root_1, COORDSYS120_tree);
        	        	        }
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        FOLLOWPUSH(FOLLOW_operand_in_context1005);
        	        	        operand121=operand(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING == 0 ) 
        	        	        {	ADAPTOR->addChild(ADAPTOR, root_1, operand121.tree);}

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        	        }


        	        	        if ( BACKTRACKING ==0 ) {
        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 6:
        	    // yatgWalker.g:188:4: 'about' ( ^( CONTEXT ABOUT PIVOT ) | ^( CONTEXT ABOUT SELECTION ) | ^( CONTEXT ABOUT COORDSYS ) | ^( CONTEXT ABOUT operand ) )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        string_literal122 = (pANTLR3_BASE_TREE) MATCHT(120, &FOLLOW_120_in_context1017); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        string_literal122_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, string_literal122);ADAPTOR->addChild(ADAPTOR, root_0, string_literal122_tree);
        	        }

        	        // yatgWalker.g:189:3: ( ^( CONTEXT ABOUT PIVOT ) | ^( CONTEXT ABOUT SELECTION ) | ^( CONTEXT ABOUT COORDSYS ) | ^( CONTEXT ABOUT operand ) )
        	        {
        	            int alt17=4;

        	            {
        	                int LA17_0 = LA(1);
        	                if ( (LA17_0 == CONTEXT) ) 
        	                {

        	                    {
        	                        int LA17_1 = LA(2);
        	                        if ( (LA17_1 == DOWN) ) 
        	                        {

        	                            {
        	                                int LA17_2 = LA(3);
        	                                if ( (LA17_2 == ABOUT) ) 
        	                                {
        	                                    switch ( LA(4) ) 
        	                                    {
        	                                    case PIVOT:
        	                                    	{
        	                                    		alt17=1;
        	                                    	}
        	                                        break;
        	                                    case SELECTION:
        	                                    	{
        	                                    		alt17=2;
        	                                    	}
        	                                        break;
        	                                    case COORDSYS:
        	                                    	{
        	                                    		alt17=3;
        	                                    	}
        	                                        break;
        	                                    case ESEQ:
        	                                    case P_BOX2:
        	                                    case P_P2:
        	                                    case P_P3:
        	                                    case ARR_A:
        	                                    case ARR_BIT:
        	                                    case OPERAND:
        	                                    case HEX_LITERAL:
        	                                    case STRING_LITERAL:
        	                                    case DIGIT:
        	                                    case 126:
        	                                    case 133:
        	                                    case 134:
        	                                    case 135:
        	                                    case 136:
        	                                    case 137:
        	                                    case 138:
        	                                    case 139:
        	                                    case 140:
        	                                    	{
        	                                    		alt17=4;
        	                                    	}
        	                                        break;

        	                                    default:
        	                                        if (BACKTRACKING>0)
        	                                        {
        	                                            FAILEDFLAG = ANTLR3_TRUE; 
        	                                            return retval;
        	                                        }
        	                                        CONSTRUCTEX();
        	                                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                                        EXCEPTION->message      = (void *)"";
        	                                        EXCEPTION->decisionNum  = 17;
        	                                        EXCEPTION->state        = 3;


        	                                        goto rulecontextEx;
        	                                    }

        	                                }
        	                                else 
        	                                {
        	                                    if (BACKTRACKING>0)
        	                                    {
        	                                        FAILEDFLAG = ANTLR3_TRUE; 
        	                                        return retval;
        	                                    }
        	                                
        	                                    CONSTRUCTEX();
        	                                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                                    EXCEPTION->message      = (void *)"";
        	                                    EXCEPTION->decisionNum  = 17;
        	                                    EXCEPTION->state        = 2;


        	                                    goto rulecontextEx;
        	                                }
        	                            }
        	                        }
        	                        else 
        	                        {
        	                            if (BACKTRACKING>0)
        	                            {
        	                                FAILEDFLAG = ANTLR3_TRUE; 
        	                                return retval;
        	                            }
        	                        
        	                            CONSTRUCTEX();
        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                            EXCEPTION->message      = (void *)"";
        	                            EXCEPTION->decisionNum  = 17;
        	                            EXCEPTION->state        = 1;


        	                            goto rulecontextEx;
        	                        }
        	                    }
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 17;
        	                    EXCEPTION->state        = 0;


        	                    goto rulecontextEx;
        	                }
        	            }
        	            switch (alt17) 
        	            {
        	        	case 1:
        	        	    // yatgWalker.g:189:6: ^( CONTEXT ABOUT PIVOT )
        	        	    {
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        {
        	        	        pANTLR3_BASE_TREE _save_last_1;
        	        	        pANTLR3_BASE_TREE _first_last_1;
        	        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        	        _first_last_1 = NULL;
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        	        CONTEXT123 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context1026); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING == 0 ) {
        	        	        CONTEXT123_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT123);

        	        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT123_tree, root_1);
        	        	        }


        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        ABOUT124 = (pANTLR3_BASE_TREE) MATCHT(ABOUT, &FOLLOW_ABOUT_in_context1028); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        ABOUT124_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ABOUT124);ADAPTOR->addChild(ADAPTOR, root_1, ABOUT124_tree);
        	        	        }
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        PIVOT125 = (pANTLR3_BASE_TREE) MATCHT(PIVOT, &FOLLOW_PIVOT_in_context1030); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        PIVOT125_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, PIVOT125);ADAPTOR->addChild(ADAPTOR, root_1, PIVOT125_tree);
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        	        }


        	        	        if ( BACKTRACKING ==0 ) {
        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // yatgWalker.g:190:8: ^( CONTEXT ABOUT SELECTION )
        	        	    {
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        {
        	        	        pANTLR3_BASE_TREE _save_last_1;
        	        	        pANTLR3_BASE_TREE _first_last_1;
        	        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        	        _first_last_1 = NULL;
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        	        CONTEXT126 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context1042); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING == 0 ) {
        	        	        CONTEXT126_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT126);

        	        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT126_tree, root_1);
        	        	        }


        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        ABOUT127 = (pANTLR3_BASE_TREE) MATCHT(ABOUT, &FOLLOW_ABOUT_in_context1044); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        ABOUT127_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ABOUT127);ADAPTOR->addChild(ADAPTOR, root_1, ABOUT127_tree);
        	        	        }
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        SELECTION128 = (pANTLR3_BASE_TREE) MATCHT(SELECTION, &FOLLOW_SELECTION_in_context1046); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        SELECTION128_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, SELECTION128);ADAPTOR->addChild(ADAPTOR, root_1, SELECTION128_tree);
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        	        }


        	        	        if ( BACKTRACKING ==0 ) {
        	        	        }
        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // yatgWalker.g:191:7: ^( CONTEXT ABOUT COORDSYS )
        	        	    {
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        {
        	        	        pANTLR3_BASE_TREE _save_last_1;
        	        	        pANTLR3_BASE_TREE _first_last_1;
        	        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        	        _first_last_1 = NULL;
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        	        CONTEXT129 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context1056); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING == 0 ) {
        	        	        CONTEXT129_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT129);

        	        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT129_tree, root_1);
        	        	        }


        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        ABOUT130 = (pANTLR3_BASE_TREE) MATCHT(ABOUT, &FOLLOW_ABOUT_in_context1058); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        ABOUT130_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ABOUT130);ADAPTOR->addChild(ADAPTOR, root_1, ABOUT130_tree);
        	        	        }
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        COORDSYS131 = (pANTLR3_BASE_TREE) MATCHT(COORDSYS, &FOLLOW_COORDSYS_in_context1060); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        COORDSYS131_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, COORDSYS131);ADAPTOR->addChild(ADAPTOR, root_1, COORDSYS131_tree);
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        	        }


        	        	        if ( BACKTRACKING ==0 ) {
        	        	        }
        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // yatgWalker.g:192:6: ^( CONTEXT ABOUT operand )
        	        	    {
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        {
        	        	        pANTLR3_BASE_TREE _save_last_1;
        	        	        pANTLR3_BASE_TREE _first_last_1;
        	        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        	        _first_last_1 = NULL;
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        	        CONTEXT132 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context1069); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING == 0 ) {
        	        	        CONTEXT132_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT132);

        	        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT132_tree, root_1);
        	        	        }


        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        ABOUT133 = (pANTLR3_BASE_TREE) MATCHT(ABOUT, &FOLLOW_ABOUT_in_context1071); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING ==0 ) {
        	        	        ABOUT133_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ABOUT133);ADAPTOR->addChild(ADAPTOR, root_1, ABOUT133_tree);
        	        	        }
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        FOLLOWPUSH(FOLLOW_operand_in_context1073);
        	        	        operand134=operand(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING == 0 ) 
        	        	        {	ADAPTOR->addChild(ADAPTOR, root_1, operand134.tree);}

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        	        }


        	        	        if ( BACKTRACKING ==0 ) {
        	        	        }
        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 7:
        	    // yatgWalker.g:194:5: ^( CONTEXT UNDO ^( logical_expression '' ) )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        CONTEXT135 = (pANTLR3_BASE_TREE) MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context1085); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        CONTEXT135_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, CONTEXT135);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, CONTEXT135_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        UNDO136 = (pANTLR3_BASE_TREE) MATCHT(UNDO, &FOLLOW_UNDO_in_context1088); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        UNDO136_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, UNDO136);ADAPTOR->addChild(ADAPTOR, root_1, UNDO136_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_2;
        	        pANTLR3_BASE_TREE _first_last_2;
        	        pANTLR3_BASE_TREE root_2;_save_last_2 = _last;
        	        _first_last_2 = NULL;
        	        root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_logical_expression_in_context1092);
        	        logical_expression137=logical_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, logical_expression137.tree, root_2));


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal138 = (pANTLR3_BASE_TREE) MATCHT(152, &FOLLOW_152_in_context1094); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal138_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal138);ADAPTOR->addChild(ADAPTOR, root_2, char_literal138_tree);
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_1, root_2);_last = _save_last_2;
        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecontextEx; /* Prevent compiler warnings */
    rulecontextEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end context */

/** 
 * $ANTLR start set_context
 * yatgWalker.g:197:1: set_context : ^( SET context ) ;
 */
static yatgWalker_set_context_return
set_context(pyatgWalker ctx)
{   
    yatgWalker_set_context_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    SET139;
    yatgWalker_context_return context140;
    #undef	RETURN_TYPE_context140
    #define	RETURN_TYPE_context140 yatgWalker_context_return

    pANTLR3_BASE_TREE SET139_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    SET139       = NULL;
    context140.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SET139_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:198:2: ( ^( SET context ) )
        // yatgWalker.g:199:3: ^( SET context )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            SET139 = (pANTLR3_BASE_TREE) MATCHT(SET, &FOLLOW_SET_in_set_context1112); 
            if  (HASEXCEPTION())
            {
                goto ruleset_contextEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            SET139_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, SET139);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, SET139_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_context_in_set_context1114);
            context140=context(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleset_contextEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, context140.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleset_contextEx; /* Prevent compiler warnings */
    ruleset_contextEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end set_context */

/** 
 * $ANTLR start math_expression
 * yatgWalker.g:205:1: math_expression : additive_expression ;
 */
static yatgWalker_math_expression_return
math_expression(pyatgWalker ctx)
{   
    yatgWalker_math_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    yatgWalker_additive_expression_return additive_expression141;
    #undef	RETURN_TYPE_additive_expression141
    #define	RETURN_TYPE_additive_expression141 yatgWalker_additive_expression_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    additive_expression141.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // yatgWalker.g:206:2: ( additive_expression )
        // yatgWalker.g:206:4: additive_expression
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_additive_expression_in_math_expression1130);
            additive_expression141=additive_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemath_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_0, additive_expression141.tree);}

            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemath_expressionEx; /* Prevent compiler warnings */
    rulemath_expressionEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end math_expression */

/** 
 * $ANTLR start additive_expression
 * yatgWalker.g:209:1: additive_expression : ( muSymbol1iplicative_expression ) ( ( '+' | '-' ) muSymbol1iplicative_expression )* ;
 */
static yatgWalker_additive_expression_return
additive_expression(pyatgWalker ctx)
{   
    yatgWalker_additive_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set143;
    yatgWalker_muSymbol1iplicative_expression_return muSymbol1iplicative_expression142;
    #undef	RETURN_TYPE_muSymbol1iplicative_expression142
    #define	RETURN_TYPE_muSymbol1iplicative_expression142 yatgWalker_muSymbol1iplicative_expression_return

    yatgWalker_muSymbol1iplicative_expression_return muSymbol1iplicative_expression144;
    #undef	RETURN_TYPE_muSymbol1iplicative_expression144
    #define	RETURN_TYPE_muSymbol1iplicative_expression144 yatgWalker_muSymbol1iplicative_expression_return

    pANTLR3_BASE_TREE set143_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set143       = NULL;
    muSymbol1iplicative_expression142.tree = NULL;

    muSymbol1iplicative_expression144.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    set143_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:210:2: ( ( muSymbol1iplicative_expression ) ( ( '+' | '-' ) muSymbol1iplicative_expression )* )
        // yatgWalker.g:210:4: ( muSymbol1iplicative_expression ) ( ( '+' | '-' ) muSymbol1iplicative_expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            // yatgWalker.g:210:4: ( muSymbol1iplicative_expression )
            // yatgWalker.g:210:5: muSymbol1iplicative_expression
            {
                _last = (pANTLR3_BASE_TREE)LT(1);
                FOLLOWPUSH(FOLLOW_muSymbol1iplicative_expression_in_additive_expression1142);
                muSymbol1iplicative_expression142=muSymbol1iplicative_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadditive_expressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING == 0 ) 
                {	ADAPTOR->addChild(ADAPTOR, root_0, muSymbol1iplicative_expression142.tree);}

                if ( BACKTRACKING ==0 ) {
                }
            }


            // yatgWalker.g:210:37: ( ( '+' | '-' ) muSymbol1iplicative_expression )*

            for (;;)
            {
                int alt19=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA19_0 = LA(1);
                    if ( (LA19_0 == 125) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA19_2 = LA(2);
                            if ( (synpred45_yatgWalker(ctx)) ) 
                            {
                                alt19=1;
                            }

                        }
                    }
                    else if ( (LA19_0 == 126) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA19_3 = LA(2);
                            if ( (synpred45_yatgWalker(ctx)) ) 
                            {
                                alt19=1;
                            }

                        }
                    }

                }
                switch (alt19) 
                {
            	case 1:
            	    // yatgWalker.g:210:38: ( '+' | '-' ) muSymbol1iplicative_expression
            	    {
            	        set143=(pANTLR3_BASE_TREE)LT(1);
            	        if ( ((LA(1) >= 125) && (LA(1) <= 126)) )
            	        {
            	            CONSUME();

            	            if ( BACKTRACKING == 0 ) {
            	            set143_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set143);root_0 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, set143_tree, root_0);
            	            }
            	            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else 
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE; 
            	                return retval;
            	            }
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_additive_expression1146);    goto ruleadditive_expressionEx;
            	        }

            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_muSymbol1iplicative_expression_in_additive_expression1153);
            	        muSymbol1iplicative_expression144=muSymbol1iplicative_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditive_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_0, muSymbol1iplicative_expression144.tree);}

            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditive_expressionEx; /* Prevent compiler warnings */
    ruleadditive_expressionEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end additive_expression */

/** 
 * $ANTLR start muSymbol1iplicative_expression
 * yatgWalker.g:213:1: muSymbol1iplicative_expression : ( unary_expression ) ( ( '*' | '/' | '%' ) unary_expression )* ;
 */
static yatgWalker_muSymbol1iplicative_expression_return
muSymbol1iplicative_expression(pyatgWalker ctx)
{   
    yatgWalker_muSymbol1iplicative_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set146;
    yatgWalker_unary_expression_return unary_expression145;
    #undef	RETURN_TYPE_unary_expression145
    #define	RETURN_TYPE_unary_expression145 yatgWalker_unary_expression_return

    yatgWalker_unary_expression_return unary_expression147;
    #undef	RETURN_TYPE_unary_expression147
    #define	RETURN_TYPE_unary_expression147 yatgWalker_unary_expression_return

    pANTLR3_BASE_TREE set146_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set146       = NULL;
    unary_expression145.tree = NULL;

    unary_expression147.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    set146_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:214:2: ( ( unary_expression ) ( ( '*' | '/' | '%' ) unary_expression )* )
        // yatgWalker.g:214:4: ( unary_expression ) ( ( '*' | '/' | '%' ) unary_expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            // yatgWalker.g:214:4: ( unary_expression )
            // yatgWalker.g:214:5: unary_expression
            {
                _last = (pANTLR3_BASE_TREE)LT(1);
                FOLLOWPUSH(FOLLOW_unary_expression_in_muSymbol1iplicative_expression1168);
                unary_expression145=unary_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemuSymbol1iplicative_expressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING == 0 ) 
                {	ADAPTOR->addChild(ADAPTOR, root_0, unary_expression145.tree);}

                if ( BACKTRACKING ==0 ) {
                }
            }


            // yatgWalker.g:214:23: ( ( '*' | '/' | '%' ) unary_expression )*

            for (;;)
            {
                int alt20=2;
                switch ( LA(1) ) 
                {
                case 127:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA20_2 = LA(2);
                		    if ( (synpred48_yatgWalker(ctx)) ) 
                		    {
                		        alt20=1;
                		    }

                		}
                	}
                    break;
                case 128:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA20_3 = LA(2);
                		    if ( (synpred48_yatgWalker(ctx)) ) 
                		    {
                		        alt20=1;
                		    }

                		}
                	}
                    break;
                case 129:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    int LA20_4 = LA(2);
                		    if ( (synpred48_yatgWalker(ctx)) ) 
                		    {
                		        alt20=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt20) 
                {
            	case 1:
            	    // yatgWalker.g:214:24: ( '*' | '/' | '%' ) unary_expression
            	    {
            	        set146=(pANTLR3_BASE_TREE)LT(1);
            	        if ( ((LA(1) >= 127) && (LA(1) <= 129)) )
            	        {
            	            CONSUME();

            	            if ( BACKTRACKING == 0 ) {
            	            set146_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set146);root_0 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, set146_tree, root_0);
            	            }
            	            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else 
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE; 
            	                return retval;
            	            }
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_muSymbol1iplicative_expression1172);    goto rulemuSymbol1iplicative_expressionEx;
            	        }

            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_unary_expression_in_muSymbol1iplicative_expression1181);
            	        unary_expression147=unary_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemuSymbol1iplicative_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_0, unary_expression147.tree);}

            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

            	default:
            	    goto loop20;	/* break out of the loop */
            	    break;
                }
            }
            loop20: ; /* Jump out to here if this rule does not match */


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemuSymbol1iplicative_expressionEx; /* Prevent compiler warnings */
    rulemuSymbol1iplicative_expressionEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end muSymbol1iplicative_expression */

/** 
 * $ANTLR start argument_ex
 * yatgWalker.g:217:1: argument_ex : ( argument_expression_list )* ;
 */
static yatgWalker_argument_ex_return
argument_ex(pyatgWalker ctx)
{   
    yatgWalker_argument_ex_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    yatgWalker_argument_expression_list_return argument_expression_list148;
    #undef	RETURN_TYPE_argument_expression_list148
    #define	RETURN_TYPE_argument_expression_list148 yatgWalker_argument_expression_list_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    argument_expression_list148.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // yatgWalker.g:223:2: ( ( argument_expression_list )* )
        // yatgWalker.g:224:2: ( argument_expression_list )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // yatgWalker.g:224:2: ( argument_expression_list )*

            for (;;)
            {
                int alt21=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA21_0 = LA(1);
                    if ( (LA21_0 == ARG_EXPR_L) ) 
                    {
                        alt21=1;
                    }

                }
                switch (alt21) 
                {
            	case 1:
            	    // yatgWalker.g:224:3: argument_expression_list
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_argument_expression_list_in_argument_ex1204);
            	        argument_expression_list148=argument_expression_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargument_exEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_0, argument_expression_list148.tree);}

            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

            	default:
            	    goto loop21;	/* break out of the loop */
            	    break;
                }
            }
            loop21: ; /* Jump out to here if this rule does not match */


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargument_exEx; /* Prevent compiler warnings */
    ruleargument_exEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }
    else
    {
	if ( BACKTRACKING==0 ) 
	{

	    		
	    	  	
	    	
	}
    }

    return retval;
}
/* $ANTLR end argument_ex */

/** 
 * $ANTLR start argument_expression_list
 * yatgWalker.g:227:1: argument_expression_list : ^( ARG_EXPR_L IDENTIFIER ( operand )? ) ;
 */
static yatgWalker_argument_expression_list_return
argument_expression_list(pyatgWalker ctx)
{   
    yatgWalker_argument_expression_list_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    ARG_EXPR_L149;
    pANTLR3_BASE_TREE    IDENTIFIER150;
    yatgWalker_operand_return operand151;
    #undef	RETURN_TYPE_operand151
    #define	RETURN_TYPE_operand151 yatgWalker_operand_return

    pANTLR3_BASE_TREE ARG_EXPR_L149_tree;
    pANTLR3_BASE_TREE IDENTIFIER150_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    ARG_EXPR_L149       = NULL;
    IDENTIFIER150       = NULL;
    operand151.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ARG_EXPR_L149_tree   = NULL;
    IDENTIFIER150_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:228:2: ( ^( ARG_EXPR_L IDENTIFIER ( operand )? ) )
        // yatgWalker.g:229:3: ^( ARG_EXPR_L IDENTIFIER ( operand )? )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            ARG_EXPR_L149 = (pANTLR3_BASE_TREE) MATCHT(ARG_EXPR_L, &FOLLOW_ARG_EXPR_L_in_argument_expression_list1222); 
            if  (HASEXCEPTION())
            {
                goto ruleargument_expression_listEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            ARG_EXPR_L149_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ARG_EXPR_L149);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ARG_EXPR_L149_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            IDENTIFIER150 = (pANTLR3_BASE_TREE) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_argument_expression_list1224); 
            if  (HASEXCEPTION())
            {
                goto ruleargument_expression_listEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING ==0 ) {
            IDENTIFIER150_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, IDENTIFIER150);ADAPTOR->addChild(ADAPTOR, root_1, IDENTIFIER150_tree);
            }

            // yatgWalker.g:229:27: ( operand )?
            {
                int alt22=2;
                {
                    int LA22_0 = LA(1);
                    if ( (LA22_0 == ESEQ || ((LA22_0 >= P_BOX2) && (LA22_0 <= ARR_BIT)) || LA22_0 == OPERAND || ((LA22_0 >= HEX_LITERAL) && (LA22_0 <= DIGIT)) || LA22_0 == 126 || ((LA22_0 >= 133) && (LA22_0 <= 140))) ) 
                    {
                        alt22=1;
                    }
                }
                switch (alt22) 
                {
            	case 1:
            	    // yatgWalker.g:229:28: operand
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_operand_in_argument_expression_list1227);
            	        operand151=operand(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargument_expression_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_1, operand151.tree);}

            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }

            if ( BACKTRACKING==0 ) 
            {

                	 	
                	 
            }

            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargument_expression_listEx; /* Prevent compiler warnings */
    ruleargument_expression_listEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end argument_expression_list */

/** 
 * $ANTLR start unary_expression
 * yatgWalker.g:236:1: unary_expression : operand ;
 */
static yatgWalker_unary_expression_return
unary_expression(pyatgWalker ctx)
{   
    yatgWalker_unary_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    yatgWalker_operand_return operand152;
    #undef	RETURN_TYPE_operand152
    #define	RETURN_TYPE_operand152 yatgWalker_operand_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    operand152.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // yatgWalker.g:237:2: ( operand )
        // yatgWalker.g:237:4: operand
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_operand_in_unary_expression1249);
            operand152=operand(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleunary_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_0, operand152.tree);}

            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunary_expressionEx; /* Prevent compiler warnings */
    ruleunary_expressionEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end unary_expression */

/** 
 * $ANTLR start operand
 * yatgWalker.g:239:1: operand : ( ^( OPERAND IDENTIFIER ( operand_op )* ) | constant );
 */
static yatgWalker_operand_return
operand(pyatgWalker ctx)
{   
    yatgWalker_operand_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    OPERAND153;
    pANTLR3_BASE_TREE    IDENTIFIER154;
    yatgWalker_operand_op_return operand_op155;
    #undef	RETURN_TYPE_operand_op155
    #define	RETURN_TYPE_operand_op155 yatgWalker_operand_op_return

    yatgWalker_constant_return constant156;
    #undef	RETURN_TYPE_constant156
    #define	RETURN_TYPE_constant156 yatgWalker_constant_return

    pANTLR3_BASE_TREE OPERAND153_tree;
    pANTLR3_BASE_TREE IDENTIFIER154_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    OPERAND153       = NULL;
    IDENTIFIER154       = NULL;
    operand_op155.tree = NULL;

    constant156.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    OPERAND153_tree   = NULL;
    IDENTIFIER154_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:240:2: ( ^( OPERAND IDENTIFIER ( operand_op )* ) | constant )
            
            ANTLR3_UINT32 alt24;

            alt24=2;


            {
                int LA24_0 = LA(1);
                if ( (LA24_0 == OPERAND) ) 
                {
                    alt24=1;
                }
                else if ( (LA24_0 == ESEQ || ((LA24_0 >= P_BOX2) && (LA24_0 <= ARR_BIT)) || ((LA24_0 >= HEX_LITERAL) && (LA24_0 <= DIGIT)) || LA24_0 == 126 || ((LA24_0 >= 133) && (LA24_0 <= 140))) ) 
                {
                    alt24=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 24;
                    EXCEPTION->state        = 0;


                    goto ruleoperandEx;
                }
            }
            switch (alt24) 
            {
        	case 1:
        	    // yatgWalker.g:241:2: ^( OPERAND IDENTIFIER ( operand_op )* )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        OPERAND153 = (pANTLR3_BASE_TREE) MATCHT(OPERAND, &FOLLOW_OPERAND_in_operand1265); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperandEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        OPERAND153_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, OPERAND153);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, OPERAND153_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        IDENTIFIER154 = (pANTLR3_BASE_TREE) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_operand1267); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperandEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        IDENTIFIER154_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, IDENTIFIER154);ADAPTOR->addChild(ADAPTOR, root_1, IDENTIFIER154_tree);
        	        }

        	        // yatgWalker.g:241:23: ( operand_op )*

        	        for (;;)
        	        {
        	            int alt23=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA23_0 = LA(1);
        	                if ( (LA23_0 == VDECL || ((LA23_0 >= ESEQ) && (LA23_0 <= EIF)) || LA23_0 == EWHILE || LA23_0 == EDO || LA23_0 == EFOR || ((LA23_0 >= P_BOX2) && (LA23_0 <= ARR_BIT)) || LA23_0 == LP_EXIT || ((LA23_0 >= LP_CONT) && (LA23_0 <= CASE)) || LA23_0 == STRUCT || LA23_0 == ETRY || ((LA23_0 >= RETURN) && (LA23_0 <= FUN_DEF)) || LA23_0 == CONTEXT || ((LA23_0 >= OPERAND) && (LA23_0 <= ARG_EXPR_L)) || LA23_0 == EOL || ((LA23_0 >= HEX_LITERAL) && (LA23_0 <= DIGIT)) || LA23_0 == 86 || LA23_0 == 102 || ((LA23_0 >= 125) && (LA23_0 <= 129)) || ((LA23_0 >= 133) && (LA23_0 <= 140))) ) 
        	                {
        	                    alt23=1;
        	                }

        	            }
        	            switch (alt23) 
        	            {
        	        	case 1:
        	        	    // yatgWalker.g:241:24: operand_op
        	        	    {
        	        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        	        FOLLOWPUSH(FOLLOW_operand_op_in_operand1270);
        	        	        operand_op155=operand_op(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoperandEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING == 0 ) 
        	        	        {	ADAPTOR->addChild(ADAPTOR, root_1, operand_op155.tree);}

        	        	        if ( BACKTRACKING ==0 ) {
        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop23;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop23: ; /* Jump out to here if this rule does not match */


        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:242:11: constant
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_constant_in_operand1285);
        	        constant156=constant(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperandEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, constant156.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleoperandEx; /* Prevent compiler warnings */
    ruleoperandEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end operand */

/** 
 * $ANTLR start operand_op
 * yatgWalker.g:245:1: operand_op : ( ^( DOT IDENTIFIER ) | ^( expr_g '' ) | '(' ')' | argument_expression_list );
 */
static yatgWalker_operand_op_return
operand_op(pyatgWalker ctx)
{   
    yatgWalker_operand_op_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    DOT157;
    pANTLR3_BASE_TREE    IDENTIFIER158;
    pANTLR3_BASE_TREE    char_literal160;
    pANTLR3_BASE_TREE    char_literal161;
    pANTLR3_BASE_TREE    char_literal162;
    yatgWalker_expr_g_return expr_g159;
    #undef	RETURN_TYPE_expr_g159
    #define	RETURN_TYPE_expr_g159 yatgWalker_expr_g_return

    yatgWalker_argument_expression_list_return argument_expression_list163;
    #undef	RETURN_TYPE_argument_expression_list163
    #define	RETURN_TYPE_argument_expression_list163 yatgWalker_argument_expression_list_return

    pANTLR3_BASE_TREE DOT157_tree;
    pANTLR3_BASE_TREE IDENTIFIER158_tree;
    pANTLR3_BASE_TREE char_literal160_tree;
    pANTLR3_BASE_TREE char_literal161_tree;
    pANTLR3_BASE_TREE char_literal162_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    DOT157       = NULL;
    IDENTIFIER158       = NULL;
    char_literal160       = NULL;
    char_literal161       = NULL;
    char_literal162       = NULL;
    expr_g159.tree = NULL;

    argument_expression_list163.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    DOT157_tree   = NULL;
    IDENTIFIER158_tree   = NULL;
    char_literal160_tree   = NULL;
    char_literal161_tree   = NULL;
    char_literal162_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:246:2: ( ^( DOT IDENTIFIER ) | ^( expr_g '' ) | '(' ')' | argument_expression_list )
            
            ANTLR3_UINT32 alt25;

            alt25=4;

            switch ( LA(1) ) 
            {
            case DOT:
            	{
            		alt25=1;
            	}
                break;
            case VDECL:
            case ESEQ:
            case EIF:
            case EWHILE:
            case EDO:
            case EFOR:
            case P_BOX2:
            case P_P2:
            case P_P3:
            case ARR_A:
            case ARR_BIT:
            case LP_EXIT:
            case LP_CONT:
            case CASE:
            case STRUCT:
            case ETRY:
            case RETURN:
            case FUN_DEF:
            case CONTEXT:
            case OPERAND:
            case EOL:
            case HEX_LITERAL:
            case STRING_LITERAL:
            case DIGIT:
            case 86:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            	{
            		alt25=2;
            	}
                break;
            case 102:
            	{
            		alt25=3;
            	}
                break;
            case ARG_EXPR_L:
            	{
            		alt25=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 25;
                EXCEPTION->state        = 0;


                goto ruleoperand_opEx;
            }

            switch (alt25) 
            {
        	case 1:
        	    // yatgWalker.g:246:7: ^( DOT IDENTIFIER )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        DOT157 = (pANTLR3_BASE_TREE) MATCHT(DOT, &FOLLOW_DOT_in_operand_op1308); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        DOT157_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, DOT157);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, DOT157_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        IDENTIFIER158 = (pANTLR3_BASE_TREE) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_operand_op1310); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        IDENTIFIER158_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, IDENTIFIER158);ADAPTOR->addChild(ADAPTOR, root_1, IDENTIFIER158_tree);
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:247:15: ^( expr_g '' )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expr_g_in_operand_op1328);
        	        expr_g159=expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, expr_g159.tree, root_1));


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal160 = (pANTLR3_BASE_TREE) MATCHT(152, &FOLLOW_152_in_operand_op1330); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal160_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal160);ADAPTOR->addChild(ADAPTOR, root_1, char_literal160_tree);
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 3:
        	    // yatgWalker.g:248:12: '(' ')'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal161 = (pANTLR3_BASE_TREE) MATCHT(102, &FOLLOW_102_in_operand_op1344); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal161_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal161);ADAPTOR->addChild(ADAPTOR, root_0, char_literal161_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal162 = (pANTLR3_BASE_TREE) MATCHT(103, &FOLLOW_103_in_operand_op1346); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal162_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal162);ADAPTOR->addChild(ADAPTOR, root_0, char_literal162_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 4:
        	    // yatgWalker.g:249:12: argument_expression_list
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_argument_expression_list_in_operand_op1359);
        	        argument_expression_list163=argument_expression_list(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, argument_expression_list163.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleoperand_opEx; /* Prevent compiler warnings */
    ruleoperand_opEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end operand_op */

/** 
 * $ANTLR start primary_expression
 * yatgWalker.g:252:1: primary_expression : ( IDENTIFIER | constant );
 */
static yatgWalker_primary_expression_return
primary_expression(pyatgWalker ctx)
{   
    yatgWalker_primary_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    IDENTIFIER164;
    yatgWalker_constant_return constant165;
    #undef	RETURN_TYPE_constant165
    #define	RETURN_TYPE_constant165 yatgWalker_constant_return

    pANTLR3_BASE_TREE IDENTIFIER164_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    IDENTIFIER164       = NULL;
    constant165.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENTIFIER164_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:253:2: ( IDENTIFIER | constant )
            
            ANTLR3_UINT32 alt26;

            alt26=2;


            {
                int LA26_0 = LA(1);
                if ( (LA26_0 == IDENTIFIER) ) 
                {
                    alt26=1;
                }
                else if ( (LA26_0 == ESEQ || ((LA26_0 >= P_BOX2) && (LA26_0 <= ARR_BIT)) || ((LA26_0 >= HEX_LITERAL) && (LA26_0 <= DIGIT)) || LA26_0 == 126 || ((LA26_0 >= 133) && (LA26_0 <= 140))) ) 
                {
                    alt26=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 26;
                    EXCEPTION->state        = 0;


                    goto ruleprimary_expressionEx;
                }
            }
            switch (alt26) 
            {
        	case 1:
        	    // yatgWalker.g:253:4: IDENTIFIER
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        IDENTIFIER164 = (pANTLR3_BASE_TREE) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_primary_expression1379); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        IDENTIFIER164_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, IDENTIFIER164);ADAPTOR->addChild(ADAPTOR, root_0, IDENTIFIER164_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:254:4: constant
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_constant_in_primary_expression1384);
        	        constant165=constant(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, constant165.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimary_expressionEx; /* Prevent compiler warnings */
    ruleprimary_expressionEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end primary_expression */

/** 
 * $ANTLR start constant
 * yatgWalker.g:257:1: constant : ( HEX_LITERAL | number | STRING_LITERAL | '#' IDENTIFIER | array | bitarray | box2 | point3 | point2 | 'true' | 'false' | 'on' | 'off' | 'ok' | 'undefined' | 'unsupplied' | '-' expr_g | expr_seq );
 */
static yatgWalker_constant_return
constant(pyatgWalker ctx)
{   
    yatgWalker_constant_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    HEX_LITERAL166;
    pANTLR3_BASE_TREE    STRING_LITERAL168;
    pANTLR3_BASE_TREE    char_literal169;
    pANTLR3_BASE_TREE    IDENTIFIER170;
    pANTLR3_BASE_TREE    string_literal176;
    pANTLR3_BASE_TREE    string_literal177;
    pANTLR3_BASE_TREE    string_literal178;
    pANTLR3_BASE_TREE    string_literal179;
    pANTLR3_BASE_TREE    string_literal180;
    pANTLR3_BASE_TREE    string_literal181;
    pANTLR3_BASE_TREE    string_literal182;
    pANTLR3_BASE_TREE    char_literal183;
    yatgWalker_number_return number167;
    #undef	RETURN_TYPE_number167
    #define	RETURN_TYPE_number167 yatgWalker_number_return

    yatgWalker_array_return array171;
    #undef	RETURN_TYPE_array171
    #define	RETURN_TYPE_array171 yatgWalker_array_return

    yatgWalker_bitarray_return bitarray172;
    #undef	RETURN_TYPE_bitarray172
    #define	RETURN_TYPE_bitarray172 yatgWalker_bitarray_return

    yatgWalker_box2_return box2173;
    #undef	RETURN_TYPE_box2173
    #define	RETURN_TYPE_box2173 yatgWalker_box2_return

    yatgWalker_point3_return point3174;
    #undef	RETURN_TYPE_point3174
    #define	RETURN_TYPE_point3174 yatgWalker_point3_return

    yatgWalker_point2_return point2175;
    #undef	RETURN_TYPE_point2175
    #define	RETURN_TYPE_point2175 yatgWalker_point2_return

    yatgWalker_expr_g_return expr_g184;
    #undef	RETURN_TYPE_expr_g184
    #define	RETURN_TYPE_expr_g184 yatgWalker_expr_g_return

    yatgWalker_expr_seq_return expr_seq185;
    #undef	RETURN_TYPE_expr_seq185
    #define	RETURN_TYPE_expr_seq185 yatgWalker_expr_seq_return

    pANTLR3_BASE_TREE HEX_LITERAL166_tree;
    pANTLR3_BASE_TREE STRING_LITERAL168_tree;
    pANTLR3_BASE_TREE char_literal169_tree;
    pANTLR3_BASE_TREE IDENTIFIER170_tree;
    pANTLR3_BASE_TREE string_literal176_tree;
    pANTLR3_BASE_TREE string_literal177_tree;
    pANTLR3_BASE_TREE string_literal178_tree;
    pANTLR3_BASE_TREE string_literal179_tree;
    pANTLR3_BASE_TREE string_literal180_tree;
    pANTLR3_BASE_TREE string_literal181_tree;
    pANTLR3_BASE_TREE string_literal182_tree;
    pANTLR3_BASE_TREE char_literal183_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    HEX_LITERAL166       = NULL;
    STRING_LITERAL168       = NULL;
    char_literal169       = NULL;
    IDENTIFIER170       = NULL;
    string_literal176       = NULL;
    string_literal177       = NULL;
    string_literal178       = NULL;
    string_literal179       = NULL;
    string_literal180       = NULL;
    string_literal181       = NULL;
    string_literal182       = NULL;
    char_literal183       = NULL;
    number167.tree = NULL;

    array171.tree = NULL;

    bitarray172.tree = NULL;

    box2173.tree = NULL;

    point3174.tree = NULL;

    point2175.tree = NULL;

    expr_g184.tree = NULL;

    expr_seq185.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    HEX_LITERAL166_tree   = NULL;
    STRING_LITERAL168_tree   = NULL;
    char_literal169_tree   = NULL;
    IDENTIFIER170_tree   = NULL;
    string_literal176_tree   = NULL;
    string_literal177_tree   = NULL;
    string_literal178_tree   = NULL;
    string_literal179_tree   = NULL;
    string_literal180_tree   = NULL;
    string_literal181_tree   = NULL;
    string_literal182_tree   = NULL;
    char_literal183_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:258:6: ( HEX_LITERAL | number | STRING_LITERAL | '#' IDENTIFIER | array | bitarray | box2 | point3 | point2 | 'true' | 'false' | 'on' | 'off' | 'ok' | 'undefined' | 'unsupplied' | '-' expr_g | expr_seq )
            
            ANTLR3_UINT32 alt27;

            alt27=18;

            alt27 = cdfa27.predict(ctx, RECOGNIZER, ISTREAM, &cdfa27);
            if  (HASEXCEPTION())
            {
                goto ruleconstantEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt27) 
            {
        	case 1:
        	    // yatgWalker.g:258:8: HEX_LITERAL
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        HEX_LITERAL166 = (pANTLR3_BASE_TREE) MATCHT(HEX_LITERAL, &FOLLOW_HEX_LITERAL_in_constant1399); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        HEX_LITERAL166_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, HEX_LITERAL166);ADAPTOR->addChild(ADAPTOR, root_0, HEX_LITERAL166_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:259:8: number
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_number_in_constant1408);
        	        number167=number(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, number167.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 3:
        	    // yatgWalker.g:260:8: STRING_LITERAL
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        STRING_LITERAL168 = (pANTLR3_BASE_TREE) MATCHT(STRING_LITERAL, &FOLLOW_STRING_LITERAL_in_constant1417); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        STRING_LITERAL168_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, STRING_LITERAL168);ADAPTOR->addChild(ADAPTOR, root_0, STRING_LITERAL168_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 4:
        	    // yatgWalker.g:261:8: '#' IDENTIFIER
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal169 = (pANTLR3_BASE_TREE) MATCHT(133, &FOLLOW_133_in_constant1426); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal169_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal169);ADAPTOR->addChild(ADAPTOR, root_0, char_literal169_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        IDENTIFIER170 = (pANTLR3_BASE_TREE) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_constant1428); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        IDENTIFIER170_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, IDENTIFIER170);ADAPTOR->addChild(ADAPTOR, root_0, IDENTIFIER170_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 5:
        	    // yatgWalker.g:262:7: array
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_array_in_constant1436);
        	        array171=array(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, array171.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 6:
        	    // yatgWalker.g:263:8: bitarray
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_bitarray_in_constant1445);
        	        bitarray172=bitarray(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, bitarray172.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 7:
        	    // yatgWalker.g:264:8: box2
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_box2_in_constant1454);
        	        box2173=box2(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, box2173.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 8:
        	    // yatgWalker.g:265:7: point3
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_point3_in_constant1462);
        	        point3174=point3(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, point3174.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 9:
        	    // yatgWalker.g:266:7: point2
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_point2_in_constant1470);
        	        point2175=point2(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, point2175.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 10:
        	    // yatgWalker.g:267:8: 'true'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        string_literal176 = (pANTLR3_BASE_TREE) MATCHT(134, &FOLLOW_134_in_constant1479); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        string_literal176_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, string_literal176);ADAPTOR->addChild(ADAPTOR, root_0, string_literal176_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 11:
        	    // yatgWalker.g:268:8: 'false'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        string_literal177 = (pANTLR3_BASE_TREE) MATCHT(135, &FOLLOW_135_in_constant1488); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        string_literal177_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, string_literal177);ADAPTOR->addChild(ADAPTOR, root_0, string_literal177_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 12:
        	    // yatgWalker.g:269:8: 'on'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        string_literal178 = (pANTLR3_BASE_TREE) MATCHT(136, &FOLLOW_136_in_constant1497); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        string_literal178_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, string_literal178);ADAPTOR->addChild(ADAPTOR, root_0, string_literal178_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 13:
        	    // yatgWalker.g:270:8: 'off'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        string_literal179 = (pANTLR3_BASE_TREE) MATCHT(137, &FOLLOW_137_in_constant1506); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        string_literal179_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, string_literal179);ADAPTOR->addChild(ADAPTOR, root_0, string_literal179_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 14:
        	    // yatgWalker.g:271:8: 'ok'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        string_literal180 = (pANTLR3_BASE_TREE) MATCHT(138, &FOLLOW_138_in_constant1515); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        string_literal180_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, string_literal180);ADAPTOR->addChild(ADAPTOR, root_0, string_literal180_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 15:
        	    // yatgWalker.g:272:8: 'undefined'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        string_literal181 = (pANTLR3_BASE_TREE) MATCHT(139, &FOLLOW_139_in_constant1524); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        string_literal181_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, string_literal181);ADAPTOR->addChild(ADAPTOR, root_0, string_literal181_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 16:
        	    // yatgWalker.g:273:8: 'unsupplied'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        string_literal182 = (pANTLR3_BASE_TREE) MATCHT(140, &FOLLOW_140_in_constant1533); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        string_literal182_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, string_literal182);ADAPTOR->addChild(ADAPTOR, root_0, string_literal182_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 17:
        	    // yatgWalker.g:274:8: '-' expr_g
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal183 = (pANTLR3_BASE_TREE) MATCHT(126, &FOLLOW_126_in_constant1542); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal183_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal183);ADAPTOR->addChild(ADAPTOR, root_0, char_literal183_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expr_g_in_constant1544);
        	        expr_g184=expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, expr_g184.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 18:
        	    // yatgWalker.g:275:7: expr_seq
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expr_seq_in_constant1552);
        	        expr_seq185=expr_seq(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, expr_seq185.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstantEx; /* Prevent compiler warnings */
    ruleconstantEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end constant */

/** 
 * $ANTLR start constant_expression
 * yatgWalker.g:279:1: constant_expression : logical_expression ;
 */
static yatgWalker_constant_expression_return
constant_expression(pyatgWalker ctx)
{   
    yatgWalker_constant_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    yatgWalker_logical_expression_return logical_expression186;
    #undef	RETURN_TYPE_logical_expression186
    #define	RETURN_TYPE_logical_expression186 yatgWalker_logical_expression_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    logical_expression186.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // yatgWalker.g:280:2: ( logical_expression )
        // yatgWalker.g:280:4: logical_expression
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_logical_expression_in_constant_expression1568);
            logical_expression186=logical_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconstant_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_0, logical_expression186.tree);}

            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstant_expressionEx; /* Prevent compiler warnings */
    ruleconstant_expressionEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end constant_expression */

/** 
 * $ANTLR start assignment_expression
 * yatgWalker.g:283:1: assignment_expression : ( ^( assignment_operator lvalue expr ) | constant_expression );
 */
static yatgWalker_assignment_expression_return
assignment_expression(pyatgWalker ctx)
{   
    yatgWalker_assignment_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    yatgWalker_assignment_operator_return assignment_operator187;
    #undef	RETURN_TYPE_assignment_operator187
    #define	RETURN_TYPE_assignment_operator187 yatgWalker_assignment_operator_return

    yatgWalker_lvalue_return lvalue188;
    #undef	RETURN_TYPE_lvalue188
    #define	RETURN_TYPE_lvalue188 yatgWalker_lvalue_return

    yatgWalker_expr_return expr189;
    #undef	RETURN_TYPE_expr189
    #define	RETURN_TYPE_expr189 yatgWalker_expr_return

    yatgWalker_constant_expression_return constant_expression190;
    #undef	RETURN_TYPE_constant_expression190
    #define	RETURN_TYPE_constant_expression190 yatgWalker_constant_expression_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    assignment_operator187.tree = NULL;

    lvalue188.tree = NULL;

    expr189.tree = NULL;

    constant_expression190.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:284:2: ( ^( assignment_operator lvalue expr ) | constant_expression )
            
            ANTLR3_UINT32 alt28;

            alt28=2;

            switch ( LA(1) ) 
            {
            case 86:
            case 125:
            case 127:
            case 128:
            case 129:
            	{
            		alt28=1;
            	}
                break;
            case 126:
            	{

            		{
            		    int LA28_2 = LA(2);
            		    if ( (LA28_2 == 86) ) 
            		    {

            		        {
            		            int LA28_4 = LA(3);
            		            if ( (synpred74_yatgWalker(ctx)) ) 
            		            {
            		                alt28=1;
            		            }
            		            else if ( (ANTLR3_TRUE) ) 
            		            {
            		                alt28=2;
            		            }
            		            else 
            		            {
            		                if (BACKTRACKING>0)
            		                {
            		                    FAILEDFLAG = ANTLR3_TRUE; 
            		                    return retval;
            		                }
            		            
            		                CONSTRUCTEX();
            		                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		                EXCEPTION->message      = (void *)"";
            		                EXCEPTION->decisionNum  = 28;
            		                EXCEPTION->state        = 4;


            		                goto ruleassignment_expressionEx;
            		            }
            		        }
            		    }
            		    else if ( (LA28_2 == VDECL || ((LA28_2 >= ESEQ) && (LA28_2 <= EIF)) || LA28_2 == EWHILE || LA28_2 == EDO || LA28_2 == EFOR || ((LA28_2 >= P_BOX2) && (LA28_2 <= ARR_BIT)) || LA28_2 == LP_EXIT || ((LA28_2 >= LP_CONT) && (LA28_2 <= CASE)) || LA28_2 == STRUCT || LA28_2 == ETRY || ((LA28_2 >= RETURN) && (LA28_2 <= FUN_DEF)) || LA28_2 == CONTEXT || LA28_2 == OPERAND || LA28_2 == EOL || ((LA28_2 >= HEX_LITERAL) && (LA28_2 <= DIGIT)) || ((LA28_2 >= 125) && (LA28_2 <= 129)) || ((LA28_2 >= 133) && (LA28_2 <= 140))) ) 
            		    {
            		        alt28=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 28;
            		        EXCEPTION->state        = 2;


            		        goto ruleassignment_expressionEx;
            		    }
            		}
            	}
                break;
            case ESEQ:
            case P_BOX2:
            case P_P2:
            case P_P3:
            case ARR_A:
            case ARR_BIT:
            case OPERAND:
            case HEX_LITERAL:
            case STRING_LITERAL:
            case DIGIT:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            	{
            		alt28=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 28;
                EXCEPTION->state        = 0;


                goto ruleassignment_expressionEx;
            }

            switch (alt28) 
            {
        	case 1:
        	    // yatgWalker.g:285:2: ^( assignment_operator lvalue expr )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_assignment_operator_in_assignment_expression1582);
        	        assignment_operator187=assignment_operator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, assignment_operator187.tree, root_1));


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_lvalue_in_assignment_expression1584);
        	        lvalue188=lvalue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_1, lvalue188.tree);}
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expr_in_assignment_expression1586);
        	        expr189=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_1, expr189.tree);}

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }

        	        if ( BACKTRACKING==0 ) 
        	        {

        	            	//printf("%s\n","Assignment operation");
        	            	
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:289:4: constant_expression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_constant_expression_in_assignment_expression1595);
        	        constant_expression190=constant_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, constant_expression190.tree);}

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignment_expressionEx; /* Prevent compiler warnings */
    ruleassignment_expressionEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end assignment_expression */

/** 
 * $ANTLR start lvalue
 * yatgWalker.g:292:1: lvalue : unary_expression ;
 */
static yatgWalker_lvalue_return
lvalue(pyatgWalker ctx)
{   
    yatgWalker_lvalue_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    yatgWalker_unary_expression_return unary_expression191;
    #undef	RETURN_TYPE_unary_expression191
    #define	RETURN_TYPE_unary_expression191 yatgWalker_unary_expression_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    unary_expression191.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // yatgWalker.g:293:2: ( unary_expression )
        // yatgWalker.g:293:4: unary_expression
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_unary_expression_in_lvalue1607);
            unary_expression191=unary_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelvalueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_0, unary_expression191.tree);}

            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelvalueEx; /* Prevent compiler warnings */
    rulelvalueEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end lvalue */

/** 
 * $ANTLR start assignment_operator
 * yatgWalker.g:296:1: assignment_operator : ( '=' | '*' '=' | '/' '=' | '%' '=' | '+' '=' | '-' '=' );
 */
static yatgWalker_assignment_operator_return
assignment_operator(pyatgWalker ctx)
{   
    yatgWalker_assignment_operator_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    char_literal192;
    pANTLR3_BASE_TREE    char_literal193;
    pANTLR3_BASE_TREE    char_literal194;
    pANTLR3_BASE_TREE    char_literal195;
    pANTLR3_BASE_TREE    char_literal196;
    pANTLR3_BASE_TREE    char_literal197;
    pANTLR3_BASE_TREE    char_literal198;
    pANTLR3_BASE_TREE    char_literal199;
    pANTLR3_BASE_TREE    char_literal200;
    pANTLR3_BASE_TREE    char_literal201;
    pANTLR3_BASE_TREE    char_literal202;

    pANTLR3_BASE_TREE char_literal192_tree;
    pANTLR3_BASE_TREE char_literal193_tree;
    pANTLR3_BASE_TREE char_literal194_tree;
    pANTLR3_BASE_TREE char_literal195_tree;
    pANTLR3_BASE_TREE char_literal196_tree;
    pANTLR3_BASE_TREE char_literal197_tree;
    pANTLR3_BASE_TREE char_literal198_tree;
    pANTLR3_BASE_TREE char_literal199_tree;
    pANTLR3_BASE_TREE char_literal200_tree;
    pANTLR3_BASE_TREE char_literal201_tree;
    pANTLR3_BASE_TREE char_literal202_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    char_literal192       = NULL;
    char_literal193       = NULL;
    char_literal194       = NULL;
    char_literal195       = NULL;
    char_literal196       = NULL;
    char_literal197       = NULL;
    char_literal198       = NULL;
    char_literal199       = NULL;
    char_literal200       = NULL;
    char_literal201       = NULL;
    char_literal202       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal192_tree   = NULL;
    char_literal193_tree   = NULL;
    char_literal194_tree   = NULL;
    char_literal195_tree   = NULL;
    char_literal196_tree   = NULL;
    char_literal197_tree   = NULL;
    char_literal198_tree   = NULL;
    char_literal199_tree   = NULL;
    char_literal200_tree   = NULL;
    char_literal201_tree   = NULL;
    char_literal202_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:297:2: ( '=' | '*' '=' | '/' '=' | '%' '=' | '+' '=' | '-' '=' )
            
            ANTLR3_UINT32 alt29;

            alt29=6;

            switch ( LA(1) ) 
            {
            case 86:
            	{
            		alt29=1;
            	}
                break;
            case 127:
            	{
            		alt29=2;
            	}
                break;
            case 128:
            	{
            		alt29=3;
            	}
                break;
            case 129:
            	{
            		alt29=4;
            	}
                break;
            case 125:
            	{
            		alt29=5;
            	}
                break;
            case 126:
            	{
            		alt29=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 29;
                EXCEPTION->state        = 0;


                goto ruleassignment_operatorEx;
            }

            switch (alt29) 
            {
        	case 1:
        	    // yatgWalker.g:297:4: '='
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal192 = (pANTLR3_BASE_TREE) MATCHT(86, &FOLLOW_86_in_assignment_operator1618); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal192_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal192);ADAPTOR->addChild(ADAPTOR, root_0, char_literal192_tree);
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            	//printf("%s","=");
        	            	
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:301:4: '*' '='
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal193 = (pANTLR3_BASE_TREE) MATCHT(127, &FOLLOW_127_in_assignment_operator1626); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal193_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal193);ADAPTOR->addChild(ADAPTOR, root_0, char_literal193_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal194 = (pANTLR3_BASE_TREE) MATCHT(86, &FOLLOW_86_in_assignment_operator1628); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal194_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal194);ADAPTOR->addChild(ADAPTOR, root_0, char_literal194_tree);
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            	//printf("%s","*=");
        	            	
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 3:
        	    // yatgWalker.g:305:4: '/' '='
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal195 = (pANTLR3_BASE_TREE) MATCHT(128, &FOLLOW_128_in_assignment_operator1636); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal195_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal195);ADAPTOR->addChild(ADAPTOR, root_0, char_literal195_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal196 = (pANTLR3_BASE_TREE) MATCHT(86, &FOLLOW_86_in_assignment_operator1638); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal196_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal196);ADAPTOR->addChild(ADAPTOR, root_0, char_literal196_tree);
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            	//printf("%s","/=");
        	            	
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 4:
        	    // yatgWalker.g:309:4: '%' '='
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal197 = (pANTLR3_BASE_TREE) MATCHT(129, &FOLLOW_129_in_assignment_operator1646); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal197_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal197);ADAPTOR->addChild(ADAPTOR, root_0, char_literal197_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal198 = (pANTLR3_BASE_TREE) MATCHT(86, &FOLLOW_86_in_assignment_operator1648); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal198_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal198);ADAPTOR->addChild(ADAPTOR, root_0, char_literal198_tree);
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 5:
        	    // yatgWalker.g:310:4: '+' '='
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal199 = (pANTLR3_BASE_TREE) MATCHT(125, &FOLLOW_125_in_assignment_operator1653); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal199_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal199);ADAPTOR->addChild(ADAPTOR, root_0, char_literal199_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal200 = (pANTLR3_BASE_TREE) MATCHT(86, &FOLLOW_86_in_assignment_operator1655); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal200_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal200);ADAPTOR->addChild(ADAPTOR, root_0, char_literal200_tree);
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            	//printf("%s","+=");
        	            	
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 6:
        	    // yatgWalker.g:314:4: '-' '='
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal201 = (pANTLR3_BASE_TREE) MATCHT(126, &FOLLOW_126_in_assignment_operator1663); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal201_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal201);ADAPTOR->addChild(ADAPTOR, root_0, char_literal201_tree);
        	        }
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal202 = (pANTLR3_BASE_TREE) MATCHT(86, &FOLLOW_86_in_assignment_operator1665); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_operatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal202_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal202);ADAPTOR->addChild(ADAPTOR, root_0, char_literal202_tree);
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            	//printf("%s","-=");
        	            	
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignment_operatorEx; /* Prevent compiler warnings */
    ruleassignment_operatorEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end assignment_operator */

/** 
 * $ANTLR start logical_expression
 * yatgWalker.g:320:1: logical_expression : logical_or_expression ;
 */
static yatgWalker_logical_expression_return
logical_expression(pyatgWalker ctx)
{   
    yatgWalker_logical_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    yatgWalker_logical_or_expression_return logical_or_expression203;
    #undef	RETURN_TYPE_logical_or_expression203
    #define	RETURN_TYPE_logical_or_expression203 yatgWalker_logical_or_expression_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    logical_or_expression203.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // yatgWalker.g:321:2: ( logical_or_expression )
        // yatgWalker.g:321:4: logical_or_expression
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_logical_or_expression_in_logical_expression1679);
            logical_or_expression203=logical_or_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelogical_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_0, logical_or_expression203.tree);}

            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogical_expressionEx; /* Prevent compiler warnings */
    rulelogical_expressionEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end logical_expression */

/** 
 * $ANTLR start logical_or_expression
 * yatgWalker.g:324:1: logical_or_expression : logical_and_expression ( '||' logical_and_expression )* ;
 */
static yatgWalker_logical_or_expression_return
logical_or_expression(pyatgWalker ctx)
{   
    yatgWalker_logical_or_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    string_literal205;
    yatgWalker_logical_and_expression_return logical_and_expression204;
    #undef	RETURN_TYPE_logical_and_expression204
    #define	RETURN_TYPE_logical_and_expression204 yatgWalker_logical_and_expression_return

    yatgWalker_logical_and_expression_return logical_and_expression206;
    #undef	RETURN_TYPE_logical_and_expression206
    #define	RETURN_TYPE_logical_and_expression206 yatgWalker_logical_and_expression_return

    pANTLR3_BASE_TREE string_literal205_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    string_literal205       = NULL;
    logical_and_expression204.tree = NULL;

    logical_and_expression206.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal205_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:325:2: ( logical_and_expression ( '||' logical_and_expression )* )
        // yatgWalker.g:325:4: logical_and_expression ( '||' logical_and_expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_logical_and_expression_in_logical_or_expression1690);
            logical_and_expression204=logical_and_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelogical_or_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_0, logical_and_expression204.tree);}

            // yatgWalker.g:325:27: ( '||' logical_and_expression )*

            for (;;)
            {
                int alt30=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA30_0 = LA(1);
                    if ( (LA30_0 == 141) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA30_2 = LA(2);
                            if ( (synpred80_yatgWalker(ctx)) ) 
                            {
                                alt30=1;
                            }

                        }
                    }

                }
                switch (alt30) 
                {
            	case 1:
            	    // yatgWalker.g:325:28: '||' logical_and_expression
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        string_literal205 = (pANTLR3_BASE_TREE) MATCHT(141, &FOLLOW_141_in_logical_or_expression1693); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_or_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) {
            	        string_literal205_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, string_literal205);

            	        root_0 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, string_literal205_tree, root_0);
            	        }
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_logical_and_expression_in_logical_or_expression1696);
            	        logical_and_expression206=logical_and_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_or_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_0, logical_and_expression206.tree);}

            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

            	default:
            	    goto loop30;	/* break out of the loop */
            	    break;
                }
            }
            loop30: ; /* Jump out to here if this rule does not match */


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogical_or_expressionEx; /* Prevent compiler warnings */
    rulelogical_or_expressionEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end logical_or_expression */

/** 
 * $ANTLR start logical_and_expression
 * yatgWalker.g:328:1: logical_and_expression : equality_expression ( '&&' equality_expression )* ;
 */
static yatgWalker_logical_and_expression_return
logical_and_expression(pyatgWalker ctx)
{   
    yatgWalker_logical_and_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    string_literal208;
    yatgWalker_equality_expression_return equality_expression207;
    #undef	RETURN_TYPE_equality_expression207
    #define	RETURN_TYPE_equality_expression207 yatgWalker_equality_expression_return

    yatgWalker_equality_expression_return equality_expression209;
    #undef	RETURN_TYPE_equality_expression209
    #define	RETURN_TYPE_equality_expression209 yatgWalker_equality_expression_return

    pANTLR3_BASE_TREE string_literal208_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    string_literal208       = NULL;
    equality_expression207.tree = NULL;

    equality_expression209.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal208_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:329:2: ( equality_expression ( '&&' equality_expression )* )
        // yatgWalker.g:329:4: equality_expression ( '&&' equality_expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_equality_expression_in_logical_and_expression1709);
            equality_expression207=equality_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelogical_and_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_0, equality_expression207.tree);}

            // yatgWalker.g:329:24: ( '&&' equality_expression )*

            for (;;)
            {
                int alt31=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA31_0 = LA(1);
                    if ( (LA31_0 == 142) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA31_2 = LA(2);
                            if ( (synpred81_yatgWalker(ctx)) ) 
                            {
                                alt31=1;
                            }

                        }
                    }

                }
                switch (alt31) 
                {
            	case 1:
            	    // yatgWalker.g:329:25: '&&' equality_expression
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        string_literal208 = (pANTLR3_BASE_TREE) MATCHT(142, &FOLLOW_142_in_logical_and_expression1712); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_and_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) {
            	        string_literal208_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, string_literal208);

            	        root_0 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, string_literal208_tree, root_0);
            	        }
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_equality_expression_in_logical_and_expression1715);
            	        equality_expression209=equality_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_and_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_0, equality_expression209.tree);}

            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogical_and_expressionEx; /* Prevent compiler warnings */
    rulelogical_and_expressionEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end logical_and_expression */

/** 
 * $ANTLR start equality_expression
 * yatgWalker.g:332:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
 */
static yatgWalker_equality_expression_return
equality_expression(pyatgWalker ctx)
{   
    yatgWalker_equality_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set211;
    yatgWalker_relational_expression_return relational_expression210;
    #undef	RETURN_TYPE_relational_expression210
    #define	RETURN_TYPE_relational_expression210 yatgWalker_relational_expression_return

    yatgWalker_relational_expression_return relational_expression212;
    #undef	RETURN_TYPE_relational_expression212
    #define	RETURN_TYPE_relational_expression212 yatgWalker_relational_expression_return

    pANTLR3_BASE_TREE set211_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set211       = NULL;
    relational_expression210.tree = NULL;

    relational_expression212.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    set211_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:333:2: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
        // yatgWalker.g:333:4: relational_expression ( ( '==' | '!=' ) relational_expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_relational_expression_in_equality_expression1728);
            relational_expression210=relational_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleequality_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_0, relational_expression210.tree);}

            // yatgWalker.g:333:26: ( ( '==' | '!=' ) relational_expression )*

            for (;;)
            {
                int alt32=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA32_0 = LA(1);
                    if ( (((LA32_0 >= 143) && (LA32_0 <= 144))) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA32_2 = LA(2);
                            if ( (synpred83_yatgWalker(ctx)) ) 
                            {
                                alt32=1;
                            }

                        }
                    }

                }
                switch (alt32) 
                {
            	case 1:
            	    // yatgWalker.g:333:27: ( '==' | '!=' ) relational_expression
            	    {
            	        set211=(pANTLR3_BASE_TREE)LT(1);
            	        if ( ((LA(1) >= 143) && (LA(1) <= 144)) )
            	        {
            	            CONSUME();

            	            if ( BACKTRACKING == 0 ) {
            	            set211_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set211);root_0 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, set211_tree, root_0);
            	            }
            	            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else 
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE; 
            	                return retval;
            	            }
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_equality_expression1731);    goto ruleequality_expressionEx;
            	        }

            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_relational_expression_in_equality_expression1738);
            	        relational_expression212=relational_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequality_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_0, relational_expression212.tree);}

            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

            	default:
            	    goto loop32;	/* break out of the loop */
            	    break;
                }
            }
            loop32: ; /* Jump out to here if this rule does not match */


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequality_expressionEx; /* Prevent compiler warnings */
    ruleequality_expressionEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end equality_expression */

/** 
 * $ANTLR start relational_expression
 * yatgWalker.g:336:1: relational_expression : math_expression ( ( '<' | '>' | '<=' | '>=' ) math_expression )* ;
 */
static yatgWalker_relational_expression_return
relational_expression(pyatgWalker ctx)
{   
    yatgWalker_relational_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set214;
    yatgWalker_math_expression_return math_expression213;
    #undef	RETURN_TYPE_math_expression213
    #define	RETURN_TYPE_math_expression213 yatgWalker_math_expression_return

    yatgWalker_math_expression_return math_expression215;
    #undef	RETURN_TYPE_math_expression215
    #define	RETURN_TYPE_math_expression215 yatgWalker_math_expression_return

    pANTLR3_BASE_TREE set214_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set214       = NULL;
    math_expression213.tree = NULL;

    math_expression215.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    set214_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:337:2: ( math_expression ( ( '<' | '>' | '<=' | '>=' ) math_expression )* )
        // yatgWalker.g:337:4: math_expression ( ( '<' | '>' | '<=' | '>=' ) math_expression )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_math_expression_in_relational_expression1751);
            math_expression213=math_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulerelational_expressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_0, math_expression213.tree);}

            // yatgWalker.g:337:20: ( ( '<' | '>' | '<=' | '>=' ) math_expression )*

            for (;;)
            {
                int alt33=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA33_0 = LA(1);
                    if ( (((LA33_0 >= 145) && (LA33_0 <= 148))) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA33_2 = LA(2);
                            if ( (synpred87_yatgWalker(ctx)) ) 
                            {
                                alt33=1;
                            }

                        }
                    }

                }
                switch (alt33) 
                {
            	case 1:
            	    // yatgWalker.g:337:21: ( '<' | '>' | '<=' | '>=' ) math_expression
            	    {
            	        set214=(pANTLR3_BASE_TREE)LT(1);
            	        if ( ((LA(1) >= 145) && (LA(1) <= 148)) )
            	        {
            	            CONSUME();

            	            if ( BACKTRACKING == 0 ) {
            	            set214_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set214);root_0 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, set214_tree, root_0);
            	            }
            	            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            	        }
            	        else 
            	        {
            	            if (BACKTRACKING>0)
            	            {
            	                FAILEDFLAG = ANTLR3_TRUE; 
            	                return retval;
            	            }
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            	            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_relational_expression1754);    goto rulerelational_expressionEx;
            	        }

            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_math_expression_in_relational_expression1765);
            	        math_expression215=math_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelational_expressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_0, math_expression215.tree);}

            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

            	default:
            	    goto loop33;	/* break out of the loop */
            	    break;
                }
            }
            loop33: ; /* Jump out to here if this rule does not match */


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelational_expressionEx; /* Prevent compiler warnings */
    rulerelational_expressionEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end relational_expression */

/** 
 * $ANTLR start expr_seq
 * yatgWalker.g:343:1: expr_seq : ^( ESEQ ( expr )+ ) ;
 */
static yatgWalker_expr_seq_return
expr_seq(pyatgWalker ctx)
{   
    yatgWalker_expr_seq_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    ESEQ216;
    yatgWalker_expr_return expr217;
    #undef	RETURN_TYPE_expr217
    #define	RETURN_TYPE_expr217 yatgWalker_expr_return

    pANTLR3_BASE_TREE ESEQ216_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    ESEQ216       = NULL;
    expr217.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ESEQ216_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:348:2: ( ^( ESEQ ( expr )+ ) )
        // yatgWalker.g:349:2: ^( ESEQ ( expr )+ )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            if ( BACKTRACKING==0 ) 
            {

                	zym.InitScope();
                	
            }
            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            ESEQ216 = (pANTLR3_BASE_TREE) MATCHT(ESEQ, &FOLLOW_ESEQ_in_expr_seq1794); 
            if  (HASEXCEPTION())
            {
                goto ruleexpr_seqEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            ESEQ216_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ESEQ216);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ESEQ216_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            // yatgWalker.g:352:9: ( expr )+
            {
                int cnt34=0;

                for (;;)
                {
                    int alt34=2;
            	{
            	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	    */
            	    int LA34_0 = LA(1);
            	    if ( (LA34_0 == VDECL || ((LA34_0 >= ESEQ) && (LA34_0 <= EIF)) || LA34_0 == EWHILE || LA34_0 == EDO || LA34_0 == EFOR || ((LA34_0 >= P_BOX2) && (LA34_0 <= ARR_BIT)) || LA34_0 == LP_EXIT || ((LA34_0 >= LP_CONT) && (LA34_0 <= CASE)) || LA34_0 == STRUCT || LA34_0 == ETRY || ((LA34_0 >= RETURN) && (LA34_0 <= FUN_DEF)) || LA34_0 == CONTEXT || LA34_0 == OPERAND || LA34_0 == EOL || ((LA34_0 >= HEX_LITERAL) && (LA34_0 <= DIGIT)) || LA34_0 == 86 || ((LA34_0 >= 125) && (LA34_0 <= 129)) || ((LA34_0 >= 133) && (LA34_0 <= 140))) ) 
            	    {
            	        alt34=1;
            	    }

            	}
            	switch (alt34) 
            	{
            	    case 1:
            	        // yatgWalker.g:0:0: expr
            	        {
            	            _last = (pANTLR3_BASE_TREE)LT(1);
            	            FOLLOWPUSH(FOLLOW_expr_in_expr_seq1796);
            	            expr217=expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleexpr_seqEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING == 0 ) 
            	            {	ADAPTOR->addChild(ADAPTOR, root_1, expr217.tree);}

            	            if ( BACKTRACKING ==0 ) {
            	            }
            	        }
            	        break;

            	    default:
            	    
            		if ( cnt34 >= 1 )
            		{
            		    goto loop34;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return retval;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleexpr_seqEx;
            	}
            	cnt34++;
                }
                loop34: ;	/* Jump to here if this rule does not match */
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpr_seqEx; /* Prevent compiler warnings */
    ruleexpr_seqEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }
    else
    {
	if ( BACKTRACKING==0 ) 
	{

	    	zym.FinScope();
	    	
	}
    }

    return retval;
}
/* $ANTLR end expr_seq */

/** 
 * $ANTLR start expr_g
 * yatgWalker.g:354:1: expr_g : ( expr_seq | expr );
 */
static yatgWalker_expr_g_return
expr_g(pyatgWalker ctx)
{   
    yatgWalker_expr_g_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    yatgWalker_expr_seq_return expr_seq218;
    #undef	RETURN_TYPE_expr_seq218
    #define	RETURN_TYPE_expr_seq218 yatgWalker_expr_seq_return

    yatgWalker_expr_return expr219;
    #undef	RETURN_TYPE_expr219
    #define	RETURN_TYPE_expr219 yatgWalker_expr_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    expr_seq218.tree = NULL;

    expr219.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:355:2: ( expr_seq | expr )
            
            ANTLR3_UINT32 alt35;

            alt35=2;

            alt35 = cdfa35.predict(ctx, RECOGNIZER, ISTREAM, &cdfa35);
            if  (HASEXCEPTION())
            {
                goto ruleexpr_gEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt35) 
            {
        	case 1:
        	    // yatgWalker.g:355:5: expr_seq
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expr_seq_in_expr_g1809);
        	        expr_seq218=expr_seq(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpr_gEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, expr_seq218.tree);}
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            cout<<"ASD";
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:356:5: expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expr_in_expr_g1817);
        	        expr219=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpr_gEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_0, expr219.tree);}
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            cout<<"ASD";
        	        }

        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpr_gEx; /* Prevent compiler warnings */
    ruleexpr_gEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end expr_g */

/** 
 * $ANTLR start number
 * yatgWalker.g:359:1: number : ( DIGIT | HEX_LITERAL );
 */
static yatgWalker_number_return
number(pyatgWalker ctx)
{   
    yatgWalker_number_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    set220;

    pANTLR3_BASE_TREE set220_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    set220       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set220_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:361:2: ( DIGIT | HEX_LITERAL )
        // yatgWalker.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            set220=(pANTLR3_BASE_TREE)LT(1);
            if ( LA(1) == HEX_LITERAL || LA(1) == DIGIT )
            {
                CONSUME();

                if ( BACKTRACKING == 0 ) {
                set220_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, set220);

                ADAPTOR->addChild(ADAPTOR, root_0, set220_tree);
                }
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_number0);    goto rulenumberEx;
            }

            if ( BACKTRACKING ==0 ) {
            } 

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenumberEx; /* Prevent compiler warnings */
    rulenumberEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end number */

/** 
 * $ANTLR start box2
 * yatgWalker.g:366:1: box2 : ^( P_BOX2 expr_g expr_g expr_g expr_g ) ;
 */
static yatgWalker_box2_return
box2(pyatgWalker ctx)
{   
    yatgWalker_box2_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    P_BOX2221;
    yatgWalker_expr_g_return expr_g222;
    #undef	RETURN_TYPE_expr_g222
    #define	RETURN_TYPE_expr_g222 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g223;
    #undef	RETURN_TYPE_expr_g223
    #define	RETURN_TYPE_expr_g223 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g224;
    #undef	RETURN_TYPE_expr_g224
    #define	RETURN_TYPE_expr_g224 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g225;
    #undef	RETURN_TYPE_expr_g225
    #define	RETURN_TYPE_expr_g225 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE P_BOX2221_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    P_BOX2221       = NULL;
    expr_g222.tree = NULL;

    expr_g223.tree = NULL;

    expr_g224.tree = NULL;

    expr_g225.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    P_BOX2221_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:367:2: ( ^( P_BOX2 expr_g expr_g expr_g expr_g ) )
        // yatgWalker.g:368:4: ^( P_BOX2 expr_g expr_g expr_g expr_g )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            P_BOX2221 = (pANTLR3_BASE_TREE) MATCHT(P_BOX2, &FOLLOW_P_BOX2_in_box21860); 
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            P_BOX2221_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, P_BOX2221);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, P_BOX2221_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_box21863);
            expr_g222=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g222.tree);}
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_box21866);
            expr_g223=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g223.tree);}
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_box21869);
            expr_g224=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g224.tree);}
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_box21872);
            expr_g225=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g225.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebox2Ex; /* Prevent compiler warnings */
    rulebox2Ex: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end box2 */

/** 
 * $ANTLR start point3
 * yatgWalker.g:371:1: point3 : ^( P_P3 expr_g expr_g expr_g ) ;
 */
static yatgWalker_point3_return
point3(pyatgWalker ctx)
{   
    yatgWalker_point3_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    P_P3226;
    yatgWalker_expr_g_return expr_g227;
    #undef	RETURN_TYPE_expr_g227
    #define	RETURN_TYPE_expr_g227 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g228;
    #undef	RETURN_TYPE_expr_g228
    #define	RETURN_TYPE_expr_g228 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g229;
    #undef	RETURN_TYPE_expr_g229
    #define	RETURN_TYPE_expr_g229 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE P_P3226_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    P_P3226       = NULL;
    expr_g227.tree = NULL;

    expr_g228.tree = NULL;

    expr_g229.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    P_P3226_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:372:2: ( ^( P_P3 expr_g expr_g expr_g ) )
        // yatgWalker.g:373:4: ^( P_P3 expr_g expr_g expr_g )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            P_P3226 = (pANTLR3_BASE_TREE) MATCHT(P_P3, &FOLLOW_P_P3_in_point31890); 
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            P_P3226_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, P_P3226);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, P_P3226_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_point31893);
            expr_g227=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g227.tree);}
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_point31896);
            expr_g228=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g228.tree);}
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_point31899);
            expr_g229=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g229.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepoint3Ex; /* Prevent compiler warnings */
    rulepoint3Ex: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end point3 */

/** 
 * $ANTLR start point2
 * yatgWalker.g:376:1: point2 : ^( P_P2 expr_g expr_g ) ;
 */
static yatgWalker_point2_return
point2(pyatgWalker ctx)
{   
    yatgWalker_point2_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    P_P2230;
    yatgWalker_expr_g_return expr_g231;
    #undef	RETURN_TYPE_expr_g231
    #define	RETURN_TYPE_expr_g231 yatgWalker_expr_g_return

    yatgWalker_expr_g_return expr_g232;
    #undef	RETURN_TYPE_expr_g232
    #define	RETURN_TYPE_expr_g232 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE P_P2230_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    P_P2230       = NULL;
    expr_g231.tree = NULL;

    expr_g232.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    P_P2230_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:377:2: ( ^( P_P2 expr_g expr_g ) )
        // yatgWalker.g:378:4: ^( P_P2 expr_g expr_g )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            P_P2230 = (pANTLR3_BASE_TREE) MATCHT(P_P2, &FOLLOW_P_P2_in_point21918); 
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            P_P2230_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, P_P2230);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, P_P2230_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_point21921);
            expr_g231=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g231.tree);}
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_expr_g_in_point21924);
            expr_g232=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g232.tree);}

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepoint2Ex; /* Prevent compiler warnings */
    rulepoint2Ex: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end point2 */

/** 
 * $ANTLR start array
 * yatgWalker.g:381:1: array : ( ^( ARR_A '' ) | ^( ARR_A expr_g ) );
 */
static yatgWalker_array_return
array(pyatgWalker ctx)
{   
    yatgWalker_array_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    ARR_A233;
    pANTLR3_BASE_TREE    char_literal234;
    pANTLR3_BASE_TREE    ARR_A235;
    yatgWalker_expr_g_return expr_g236;
    #undef	RETURN_TYPE_expr_g236
    #define	RETURN_TYPE_expr_g236 yatgWalker_expr_g_return

    pANTLR3_BASE_TREE ARR_A233_tree;
    pANTLR3_BASE_TREE char_literal234_tree;
    pANTLR3_BASE_TREE ARR_A235_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    ARR_A233       = NULL;
    char_literal234       = NULL;
    ARR_A235       = NULL;
    expr_g236.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ARR_A233_tree   = NULL;
    char_literal234_tree   = NULL;
    ARR_A235_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:382:2: ( ^( ARR_A '' ) | ^( ARR_A expr_g ) )
            
            ANTLR3_UINT32 alt36;

            alt36=2;


            {
                int LA36_0 = LA(1);
                if ( (LA36_0 == ARR_A) ) 
                {

                    {
                        int LA36_1 = LA(2);
                        if ( (LA36_1 == DOWN) ) 
                        {

                            {
                                int LA36_2 = LA(3);
                                if ( (LA36_2 == 152) ) 
                                {
                                    alt36=1;
                                }
                                else if ( (LA36_2 == VDECL || ((LA36_2 >= ESEQ) && (LA36_2 <= EIF)) || LA36_2 == EWHILE || LA36_2 == EDO || LA36_2 == EFOR || ((LA36_2 >= P_BOX2) && (LA36_2 <= ARR_BIT)) || LA36_2 == LP_EXIT || ((LA36_2 >= LP_CONT) && (LA36_2 <= CASE)) || LA36_2 == STRUCT || LA36_2 == ETRY || ((LA36_2 >= RETURN) && (LA36_2 <= FUN_DEF)) || LA36_2 == CONTEXT || LA36_2 == OPERAND || LA36_2 == EOL || ((LA36_2 >= HEX_LITERAL) && (LA36_2 <= DIGIT)) || LA36_2 == 86 || ((LA36_2 >= 125) && (LA36_2 <= 129)) || ((LA36_2 >= 133) && (LA36_2 <= 140))) ) 
                                {
                                    alt36=2;
                                }
                                else 
                                {
                                    if (BACKTRACKING>0)
                                    {
                                        FAILEDFLAG = ANTLR3_TRUE; 
                                        return retval;
                                    }
                                
                                    CONSTRUCTEX();
                                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                    EXCEPTION->message      = (void *)"";
                                    EXCEPTION->decisionNum  = 36;
                                    EXCEPTION->state        = 2;


                                    goto rulearrayEx;
                                }
                            }
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 36;
                            EXCEPTION->state        = 1;


                            goto rulearrayEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 36;
                    EXCEPTION->state        = 0;


                    goto rulearrayEx;
                }
            }
            switch (alt36) 
            {
        	case 1:
        	    // yatgWalker.g:383:4: ^( ARR_A '' )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        ARR_A233 = (pANTLR3_BASE_TREE) MATCHT(ARR_A, &FOLLOW_ARR_A_in_array1943); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        ARR_A233_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ARR_A233);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ARR_A233_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal234 = (pANTLR3_BASE_TREE) MATCHT(152, &FOLLOW_152_in_array1945); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal234_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal234);ADAPTOR->addChild(ADAPTOR, root_1, char_literal234_tree);
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:385:4: ^( ARR_A expr_g )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        ARR_A235 = (pANTLR3_BASE_TREE) MATCHT(ARR_A, &FOLLOW_ARR_A_in_array1957); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        ARR_A235_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ARR_A235);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ARR_A235_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_expr_g_in_array1960);
        	        expr_g236=expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_1, expr_g236.tree);}

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayEx; /* Prevent compiler warnings */
    rulearrayEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end array */

/** 
 * $ANTLR start bitarray
 * yatgWalker.g:388:1: bitarray : ( ^( ARR_BIT '' ) | ^( ARR_BIT arrrange ) );
 */
static yatgWalker_bitarray_return
bitarray(pyatgWalker ctx)
{   
    yatgWalker_bitarray_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    ARR_BIT237;
    pANTLR3_BASE_TREE    char_literal238;
    pANTLR3_BASE_TREE    ARR_BIT239;
    yatgWalker_arrrange_return arrrange240;
    #undef	RETURN_TYPE_arrrange240
    #define	RETURN_TYPE_arrrange240 yatgWalker_arrrange_return

    pANTLR3_BASE_TREE ARR_BIT237_tree;
    pANTLR3_BASE_TREE char_literal238_tree;
    pANTLR3_BASE_TREE ARR_BIT239_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    ARR_BIT237       = NULL;
    char_literal238       = NULL;
    ARR_BIT239       = NULL;
    arrrange240.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ARR_BIT237_tree   = NULL;
    char_literal238_tree   = NULL;
    ARR_BIT239_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  yatgWalker.g:389:2: ( ^( ARR_BIT '' ) | ^( ARR_BIT arrrange ) )
            
            ANTLR3_UINT32 alt37;

            alt37=2;


            {
                int LA37_0 = LA(1);
                if ( (LA37_0 == ARR_BIT) ) 
                {

                    {
                        int LA37_1 = LA(2);
                        if ( (LA37_1 == DOWN) ) 
                        {

                            {
                                int LA37_2 = LA(3);
                                if ( (LA37_2 == 152) ) 
                                {
                                    alt37=1;
                                }
                                else if ( (LA37_2 == ARR_BIT_RANGE) ) 
                                {
                                    alt37=2;
                                }
                                else 
                                {
                                    if (BACKTRACKING>0)
                                    {
                                        FAILEDFLAG = ANTLR3_TRUE; 
                                        return retval;
                                    }
                                
                                    CONSTRUCTEX();
                                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                    EXCEPTION->message      = (void *)"";
                                    EXCEPTION->decisionNum  = 37;
                                    EXCEPTION->state        = 2;


                                    goto rulebitarrayEx;
                                }
                            }
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 37;
                            EXCEPTION->state        = 1;


                            goto rulebitarrayEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 37;
                    EXCEPTION->state        = 0;


                    goto rulebitarrayEx;
                }
            }
            switch (alt37) 
            {
        	case 1:
        	    // yatgWalker.g:389:6: ^( ARR_BIT '' )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        ARR_BIT237 = (pANTLR3_BASE_TREE) MATCHT(ARR_BIT, &FOLLOW_ARR_BIT_in_bitarray1976); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        ARR_BIT237_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ARR_BIT237);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ARR_BIT237_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        char_literal238 = (pANTLR3_BASE_TREE) MATCHT(152, &FOLLOW_152_in_bitarray1978); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING ==0 ) {
        	        char_literal238_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, char_literal238);ADAPTOR->addChild(ADAPTOR, root_1, char_literal238_tree);
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;
        	case 2:
        	    // yatgWalker.g:390:7: ^( ARR_BIT arrrange )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        {
        	        pANTLR3_BASE_TREE _save_last_1;
        	        pANTLR3_BASE_TREE _first_last_1;
        	        pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
        	        _first_last_1 = NULL;
        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
        	        ARR_BIT239 = (pANTLR3_BASE_TREE) MATCHT(ARR_BIT, &FOLLOW_ARR_BIT_in_bitarray1989); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) {
        	        ARR_BIT239_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ARR_BIT239);

        	        root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ARR_BIT239_tree, root_1);
        	        }


        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        _last = (pANTLR3_BASE_TREE)LT(1);
        	        FOLLOWPUSH(FOLLOW_arrrange_in_bitarray1991);
        	        arrrange240=arrrange(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING == 0 ) 
        	        {	ADAPTOR->addChild(ADAPTOR, root_1, arrrange240.tree);}

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
        	        }


        	        if ( BACKTRACKING ==0 ) {
        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitarrayEx; /* Prevent compiler warnings */
    rulebitarrayEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end bitarray */

/** 
 * $ANTLR start arrrange
 * yatgWalker.g:393:1: arrrange : ^( ARR_BIT_RANGE arrrange ( arrrange )? ) ;
 */
static yatgWalker_arrrange_return
arrrange(pyatgWalker ctx)
{   
    yatgWalker_arrrange_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_BASE_TREE _last;

    pANTLR3_BASE_TREE _first_0;

    pANTLR3_BASE_TREE    ARR_BIT_RANGE241;
    yatgWalker_arrrange_return arrrange242;
    #undef	RETURN_TYPE_arrrange242
    #define	RETURN_TYPE_arrrange242 yatgWalker_arrrange_return

    yatgWalker_arrrange_return arrrange243;
    #undef	RETURN_TYPE_arrrange243
    #define	RETURN_TYPE_arrrange243 yatgWalker_arrrange_return

    pANTLR3_BASE_TREE ARR_BIT_RANGE241_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    _last = NULL;

    _first_0 = NULL;

    ARR_BIT_RANGE241       = NULL;
    arrrange242.tree = NULL;

    arrrange243.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ARR_BIT_RANGE241_tree   = NULL;


    retval.tree  = NULL;
    {
        // yatgWalker.g:394:2: ( ^( ARR_BIT_RANGE arrrange ( arrrange )? ) )
        // yatgWalker.g:395:4: ^( ARR_BIT_RANGE arrrange ( arrrange )? )
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            _last = (pANTLR3_BASE_TREE)LT(1);
            {
            pANTLR3_BASE_TREE _save_last_1;
            pANTLR3_BASE_TREE _first_last_1;
            pANTLR3_BASE_TREE root_1;_save_last_1 = _last;
            _first_last_1 = NULL;
            root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));_last = (pANTLR3_BASE_TREE)LT(1);
            ARR_BIT_RANGE241 = (pANTLR3_BASE_TREE) MATCHT(ARR_BIT_RANGE, &FOLLOW_ARR_BIT_RANGE_in_arrrange2008); 
            if  (HASEXCEPTION())
            {
                goto rulearrrangeEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) {
            ARR_BIT_RANGE241_tree = (pANTLR3_BASE_TREE)ADAPTOR->dupNode(ADAPTOR, ARR_BIT_RANGE241);

            root_1 = (pANTLR3_BASE_TREE)ADAPTOR->becomeRoot(ADAPTOR, ARR_BIT_RANGE241_tree, root_1);
            }


            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            _last = (pANTLR3_BASE_TREE)LT(1);
            FOLLOWPUSH(FOLLOW_arrrange_in_arrrange2011);
            arrrange242=arrrange(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearrrangeEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING == 0 ) 
            {	ADAPTOR->addChild(ADAPTOR, root_1, arrrange242.tree);}

            // yatgWalker.g:395:30: ( arrrange )?
            {
                int alt38=2;
                {
                    int LA38_0 = LA(1);
                    if ( (LA38_0 == ARR_BIT_RANGE) ) 
                    {
                        alt38=1;
                    }
                }
                switch (alt38) 
                {
            	case 1:
            	    // yatgWalker.g:0:0: arrrange
            	    {
            	        _last = (pANTLR3_BASE_TREE)LT(1);
            	        FOLLOWPUSH(FOLLOW_arrrange_in_arrrange2013);
            	        arrrange243=arrrange(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulearrrangeEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING == 0 ) 
            	        {	ADAPTOR->addChild(ADAPTOR, root_1, arrrange243.tree);}

            	        if ( BACKTRACKING ==0 ) {
            	        }
            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); ADAPTOR->addChild(ADAPTOR, root_0, root_1);_last = _save_last_1;
            }


            if ( BACKTRACKING ==0 ) {
            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulearrrangeEx; /* Prevent compiler warnings */
    rulearrrangeEx: ;

    if ( BACKTRACKING==0 ) {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)ADAPTOR->rulePostProcessing(ADAPTOR, root_0);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
    }

    return retval;
}
/* $ANTLR end arrrange */

// $ANTLR start synpred2_yatgWalker
static void synpred2_yatgWalker_fragment(pyatgWalker ctx ) 
{
    // yatgWalker.g:43:4: ( assignment_expression )
    // yatgWalker.g:43:4: assignment_expression
    {
        FOLLOWPUSH(FOLLOW_assignment_expression_in_synpred2_yatgWalker125);
        assignment_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred2_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred2_yatgWalkerEx; /* Prevent compiler warnings */
rulesynpred2_yatgWalkerEx: ;

}
// $ANTLR end synpred2_yatgWalker

// $ANTLR start synpred16_yatgWalker
static void synpred16_yatgWalker_fragment(pyatgWalker ctx ) 
{
    // yatgWalker.g:57:8: ( expr_seq )
    // yatgWalker.g:57:8: expr_seq
    {
        FOLLOWPUSH(FOLLOW_expr_seq_in_synpred16_yatgWalker247);
        expr_seq(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred16_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred16_yatgWalkerEx; /* Prevent compiler warnings */
rulesynpred16_yatgWalkerEx: ;

}
// $ANTLR end synpred16_yatgWalker

// $ANTLR start synpred45_yatgWalker
static void synpred45_yatgWalker_fragment(pyatgWalker ctx ) 
{
    // yatgWalker.g:210:38: ( ( '+' | '-' ) muSymbol1iplicative_expression )
    // yatgWalker.g:210:38: ( '+' | '-' ) muSymbol1iplicative_expression
    {
        if ( ((LA(1) >= 125) && (LA(1) <= 126)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred45_yatgWalker1146);    goto rulesynpred45_yatgWalkerEx;
        }

        FOLLOWPUSH(FOLLOW_muSymbol1iplicative_expression_in_synpred45_yatgWalker1153);
        muSymbol1iplicative_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred45_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred45_yatgWalkerEx; /* Prevent compiler warnings */
rulesynpred45_yatgWalkerEx: ;

}
// $ANTLR end synpred45_yatgWalker

// $ANTLR start synpred48_yatgWalker
static void synpred48_yatgWalker_fragment(pyatgWalker ctx ) 
{
    // yatgWalker.g:214:24: ( ( '*' | '/' | '%' ) unary_expression )
    // yatgWalker.g:214:24: ( '*' | '/' | '%' ) unary_expression
    {
        if ( ((LA(1) >= 127) && (LA(1) <= 129)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred48_yatgWalker1172);    goto rulesynpred48_yatgWalkerEx;
        }

        FOLLOWPUSH(FOLLOW_unary_expression_in_synpred48_yatgWalker1181);
        unary_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred48_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred48_yatgWalkerEx; /* Prevent compiler warnings */
rulesynpred48_yatgWalkerEx: ;

}
// $ANTLR end synpred48_yatgWalker

// $ANTLR start synpred57_yatgWalker
static void synpred57_yatgWalker_fragment(pyatgWalker ctx ) 
{
    // yatgWalker.g:258:8: ( HEX_LITERAL )
    // yatgWalker.g:258:8: HEX_LITERAL
    {
         MATCHT(HEX_LITERAL, &FOLLOW_HEX_LITERAL_in_synpred57_yatgWalker1399); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred57_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred57_yatgWalkerEx; /* Prevent compiler warnings */
rulesynpred57_yatgWalkerEx: ;

}
// $ANTLR end synpred57_yatgWalker

// $ANTLR start synpred58_yatgWalker
static void synpred58_yatgWalker_fragment(pyatgWalker ctx ) 
{
    // yatgWalker.g:259:8: ( number )
    // yatgWalker.g:259:8: number
    {
        FOLLOWPUSH(FOLLOW_number_in_synpred58_yatgWalker1408);
        number(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred58_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred58_yatgWalkerEx; /* Prevent compiler warnings */
rulesynpred58_yatgWalkerEx: ;

}
// $ANTLR end synpred58_yatgWalker

// $ANTLR start synpred74_yatgWalker
static void synpred74_yatgWalker_fragment(pyatgWalker ctx ) 
{
    // yatgWalker.g:285:2: ( ^( assignment_operator lvalue expr ) )
    // yatgWalker.g:285:2: ^( assignment_operator lvalue expr )
    {
        FOLLOWPUSH(FOLLOW_assignment_operator_in_synpred74_yatgWalker1582);
        assignment_operator(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_lvalue_in_synpred74_yatgWalker1584);
        lvalue(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_expr_in_synpred74_yatgWalker1586);
        expr(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred74_yatgWalkerEx; /* Prevent compiler warnings */
rulesynpred74_yatgWalkerEx: ;

}
// $ANTLR end synpred74_yatgWalker

// $ANTLR start synpred80_yatgWalker
static void synpred80_yatgWalker_fragment(pyatgWalker ctx ) 
{
    // yatgWalker.g:325:28: ( '||' logical_and_expression )
    // yatgWalker.g:325:28: '||' logical_and_expression
    {
         MATCHT(141, &FOLLOW_141_in_synpred80_yatgWalker1693); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred80_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_logical_and_expression_in_synpred80_yatgWalker1696);
        logical_and_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred80_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred80_yatgWalkerEx; /* Prevent compiler warnings */
rulesynpred80_yatgWalkerEx: ;

}
// $ANTLR end synpred80_yatgWalker

// $ANTLR start synpred81_yatgWalker
static void synpred81_yatgWalker_fragment(pyatgWalker ctx ) 
{
    // yatgWalker.g:329:25: ( '&&' equality_expression )
    // yatgWalker.g:329:25: '&&' equality_expression
    {
         MATCHT(142, &FOLLOW_142_in_synpred81_yatgWalker1712); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred81_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_equality_expression_in_synpred81_yatgWalker1715);
        equality_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred81_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred81_yatgWalkerEx; /* Prevent compiler warnings */
rulesynpred81_yatgWalkerEx: ;

}
// $ANTLR end synpred81_yatgWalker

// $ANTLR start synpred83_yatgWalker
static void synpred83_yatgWalker_fragment(pyatgWalker ctx ) 
{
    // yatgWalker.g:333:27: ( ( '==' | '!=' ) relational_expression )
    // yatgWalker.g:333:27: ( '==' | '!=' ) relational_expression
    {
        if ( ((LA(1) >= 143) && (LA(1) <= 144)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred83_yatgWalker1731);    goto rulesynpred83_yatgWalkerEx;
        }

        FOLLOWPUSH(FOLLOW_relational_expression_in_synpred83_yatgWalker1738);
        relational_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred83_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred83_yatgWalkerEx; /* Prevent compiler warnings */
rulesynpred83_yatgWalkerEx: ;

}
// $ANTLR end synpred83_yatgWalker

// $ANTLR start synpred87_yatgWalker
static void synpred87_yatgWalker_fragment(pyatgWalker ctx ) 
{
    // yatgWalker.g:337:21: ( ( '<' | '>' | '<=' | '>=' ) math_expression )
    // yatgWalker.g:337:21: ( '<' | '>' | '<=' | '>=' ) math_expression
    {
        if ( ((LA(1) >= 145) && (LA(1) <= 148)) )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred87_yatgWalker1754);    goto rulesynpred87_yatgWalkerEx;
        }

        FOLLOWPUSH(FOLLOW_math_expression_in_synpred87_yatgWalker1765);
        math_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred87_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred87_yatgWalkerEx; /* Prevent compiler warnings */
rulesynpred87_yatgWalkerEx: ;

}
// $ANTLR end synpred87_yatgWalker

// $ANTLR start synpred89_yatgWalker
static void synpred89_yatgWalker_fragment(pyatgWalker ctx ) 
{
    // yatgWalker.g:355:5: ( expr_seq )
    // yatgWalker.g:355:5: expr_seq
    {
        FOLLOWPUSH(FOLLOW_expr_seq_in_synpred89_yatgWalker1809);
        expr_seq(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred89_yatgWalkerEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred89_yatgWalkerEx; /* Prevent compiler warnings */
rulesynpred89_yatgWalkerEx: ;

}
// $ANTLR end synpred89_yatgWalker
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred81_yatgWalker(pyatgWalker ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred81_yatgWalker_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred80_yatgWalker(pyatgWalker ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred80_yatgWalker_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred48_yatgWalker(pyatgWalker ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred48_yatgWalker_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred2_yatgWalker(pyatgWalker ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred2_yatgWalker_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred89_yatgWalker(pyatgWalker ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred89_yatgWalker_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred45_yatgWalker(pyatgWalker ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred45_yatgWalker_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred16_yatgWalker(pyatgWalker ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred16_yatgWalker_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred83_yatgWalker(pyatgWalker ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred83_yatgWalker_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred58_yatgWalker(pyatgWalker ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred58_yatgWalker_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred87_yatgWalker(pyatgWalker ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred87_yatgWalker_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred74_yatgWalker(pyatgWalker ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred74_yatgWalker_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred57_yatgWalker(pyatgWalker ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred57_yatgWalker_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
