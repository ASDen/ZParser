/** \file
 *  This C header file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : yatgWalker.g
 *     -                            On : 2009-10-25 09:36:52
 *     -           for the tree parser : yatgWalkerTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The tree parser yatgWalker has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pyatgWalker, which is returned from a call to yatgWalkerNew().
 *
 * The methods in pyatgWalker are  as follows:
 *
 *  - yatgWalker_program_return      pyatgWalker->program(pyatgWalker)
 *  - yatgWalker_expr_return      pyatgWalker->expr(pyatgWalker)
 *  - yatgWalker_variable_decls_return      pyatgWalker->variable_decls(pyatgWalker)
 *  - yatgWalker_type_decl_return      pyatgWalker->type_decl(pyatgWalker)
 *  - yatgWalker_decl_return      pyatgWalker->decl(pyatgWalker)
 *  - yatgWalker_if_expr_return      pyatgWalker->if_expr(pyatgWalker)
 *  - yatgWalker_while_loop_return      pyatgWalker->while_loop(pyatgWalker)
 *  - yatgWalker_do_loop_return      pyatgWalker->do_loop(pyatgWalker)
 *  - yatgWalker_for_loop_return      pyatgWalker->for_loop(pyatgWalker)
 *  - yatgWalker_source_return      pyatgWalker->source(pyatgWalker)
 *  - yatgWalker_loop_exit_return      pyatgWalker->loop_exit(pyatgWalker)
 *  - yatgWalker_loop_continue_return      pyatgWalker->loop_continue(pyatgWalker)
 *  - yatgWalker_case_expr_return      pyatgWalker->case_expr(pyatgWalker)
 *  - yatgWalker_case_item_return      pyatgWalker->case_item(pyatgWalker)
 *  - yatgWalker_struct_def_return      pyatgWalker->struct_def(pyatgWalker)
 *  - yatgWalker_member_return      pyatgWalker->member(pyatgWalker)
 *  - yatgWalker_try_expr_return      pyatgWalker->try_expr(pyatgWalker)
 *  - yatgWalker_function_def_return      pyatgWalker->function_def(pyatgWalker)
 *  - yatgWalker_fun_return      pyatgWalker->fun(pyatgWalker)
 *  - yatgWalker_function_return_return      pyatgWalker->function_return(pyatgWalker)
 *  - yatgWalker_context_expr_return      pyatgWalker->context_expr(pyatgWalker)
 *  - yatgWalker_context_return      pyatgWalker->context(pyatgWalker)
 *  - yatgWalker_set_context_return      pyatgWalker->set_context(pyatgWalker)
 *  - yatgWalker_math_expression_return      pyatgWalker->math_expression(pyatgWalker)
 *  - yatgWalker_additive_expression_return      pyatgWalker->additive_expression(pyatgWalker)
 *  - yatgWalker_muSymbol1iplicative_expression_return      pyatgWalker->muSymbol1iplicative_expression(pyatgWalker)
 *  - yatgWalker_argument_ex_return      pyatgWalker->argument_ex(pyatgWalker)
 *  - yatgWalker_argument_expression_list_return      pyatgWalker->argument_expression_list(pyatgWalker)
 *  - yatgWalker_unary_expression_return      pyatgWalker->unary_expression(pyatgWalker)
 *  - yatgWalker_operand_return      pyatgWalker->operand(pyatgWalker)
 *  - yatgWalker_operand_op_return      pyatgWalker->operand_op(pyatgWalker)
 *  - yatgWalker_primary_expression_return      pyatgWalker->primary_expression(pyatgWalker)
 *  - yatgWalker_constant_return      pyatgWalker->constant(pyatgWalker)
 *  - yatgWalker_constant_expression_return      pyatgWalker->constant_expression(pyatgWalker)
 *  - yatgWalker_assignment_expression_return      pyatgWalker->assignment_expression(pyatgWalker)
 *  - yatgWalker_lvalue_return      pyatgWalker->lvalue(pyatgWalker)
 *  - yatgWalker_assignment_operator_return      pyatgWalker->assignment_operator(pyatgWalker)
 *  - yatgWalker_logical_expression_return      pyatgWalker->logical_expression(pyatgWalker)
 *  - yatgWalker_logical_or_expression_return      pyatgWalker->logical_or_expression(pyatgWalker)
 *  - yatgWalker_logical_and_expression_return      pyatgWalker->logical_and_expression(pyatgWalker)
 *  - yatgWalker_equality_expression_return      pyatgWalker->equality_expression(pyatgWalker)
 *  - yatgWalker_relational_expression_return      pyatgWalker->relational_expression(pyatgWalker)
 *  - yatgWalker_expr_seq_return      pyatgWalker->expr_seq(pyatgWalker)
 *  - yatgWalker_expr_g_return      pyatgWalker->expr_g(pyatgWalker)
 *  - yatgWalker_number_return      pyatgWalker->number(pyatgWalker)
 *  - yatgWalker_box2_return      pyatgWalker->box2(pyatgWalker)
 *  - yatgWalker_point3_return      pyatgWalker->point3(pyatgWalker)
 *  - yatgWalker_point2_return      pyatgWalker->point2(pyatgWalker)
 *  - yatgWalker_array_return      pyatgWalker->array(pyatgWalker)
 *  - yatgWalker_bitarray_return      pyatgWalker->bitarray(pyatgWalker)
 *  - yatgWalker_arrrange_return      pyatgWalker->arrrange(pyatgWalker)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_yatgWalker_H
#define _yatgWalker_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct yatgWalker_Ctx_struct yatgWalker, * pyatgWalker;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct yatgWalker_program_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_program_return;

typedef struct yatgWalker_expr_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_expr_return;

typedef struct yatgWalker_variable_decls_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_variable_decls_return;

typedef struct yatgWalker_type_decl_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_type_decl_return;

typedef struct yatgWalker_decl_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_decl_return;

typedef struct yatgWalker_if_expr_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_if_expr_return;

typedef struct yatgWalker_while_loop_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_while_loop_return;

typedef struct yatgWalker_do_loop_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_do_loop_return;

typedef struct yatgWalker_for_loop_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_for_loop_return;

typedef struct yatgWalker_source_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_source_return;

typedef struct yatgWalker_loop_exit_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_loop_exit_return;

typedef struct yatgWalker_loop_continue_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_loop_continue_return;

typedef struct yatgWalker_case_expr_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_case_expr_return;

typedef struct yatgWalker_case_item_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_case_item_return;

typedef struct yatgWalker_struct_def_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_struct_def_return;

typedef struct yatgWalker_member_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_member_return;

typedef struct yatgWalker_try_expr_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_try_expr_return;

typedef struct yatgWalker_function_def_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_function_def_return;

typedef struct yatgWalker_fun_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_fun_return;

typedef struct yatgWalker_function_return_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_function_return_return;

typedef struct yatgWalker_context_expr_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_context_expr_return;

typedef struct yatgWalker_context_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_context_return;

typedef struct yatgWalker_set_context_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_set_context_return;

typedef struct yatgWalker_math_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_math_expression_return;

typedef struct yatgWalker_additive_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_additive_expression_return;

typedef struct yatgWalker_muSymbol1iplicative_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_muSymbol1iplicative_expression_return;

typedef struct yatgWalker_argument_ex_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_argument_ex_return;

typedef struct yatgWalker_argument_expression_list_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_argument_expression_list_return;

typedef struct yatgWalker_unary_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_unary_expression_return;

typedef struct yatgWalker_operand_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_operand_return;

typedef struct yatgWalker_operand_op_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_operand_op_return;

typedef struct yatgWalker_primary_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_primary_expression_return;

typedef struct yatgWalker_constant_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_constant_return;

typedef struct yatgWalker_constant_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_constant_expression_return;

typedef struct yatgWalker_assignment_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_assignment_expression_return;

typedef struct yatgWalker_lvalue_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_lvalue_return;

typedef struct yatgWalker_assignment_operator_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_assignment_operator_return;

typedef struct yatgWalker_logical_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_logical_expression_return;

typedef struct yatgWalker_logical_or_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_logical_or_expression_return;

typedef struct yatgWalker_logical_and_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_logical_and_expression_return;

typedef struct yatgWalker_equality_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_equality_expression_return;

typedef struct yatgWalker_relational_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_relational_expression_return;

typedef struct yatgWalker_expr_seq_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_expr_seq_return;

typedef struct yatgWalker_expr_g_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_expr_g_return;

typedef struct yatgWalker_number_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_number_return;

typedef struct yatgWalker_box2_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_box2_return;

typedef struct yatgWalker_point3_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_point3_return;

typedef struct yatgWalker_point2_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_point2_return;

typedef struct yatgWalker_array_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_array_return;

typedef struct yatgWalker_bitarray_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_bitarray_return;

typedef struct yatgWalker_arrrange_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;
   
}
    yatgWalker_arrrange_return;



/** Context tracking structure for yatgWalker
 */
struct yatgWalker_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_TREE_PARSER	    pTreeParser;


     yatgWalker_program_return (*program)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_expr_return (*expr)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_variable_decls_return (*variable_decls)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_type_decl_return (*type_decl)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_decl_return (*decl)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_if_expr_return (*if_expr)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_while_loop_return (*while_loop)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_do_loop_return (*do_loop)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_for_loop_return (*for_loop)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_source_return (*source)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_loop_exit_return (*loop_exit)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_loop_continue_return (*loop_continue)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_case_expr_return (*case_expr)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_case_item_return (*case_item)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_struct_def_return (*struct_def)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_member_return (*member)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_try_expr_return (*try_expr)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_function_def_return (*function_def)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_fun_return (*fun)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_function_return_return (*function_return)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_context_expr_return (*context_expr)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_context_return (*context)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_set_context_return (*set_context)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_math_expression_return (*math_expression)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_additive_expression_return (*additive_expression)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_muSymbol1iplicative_expression_return (*muSymbol1iplicative_expression)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_argument_ex_return (*argument_ex)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_argument_expression_list_return (*argument_expression_list)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_unary_expression_return (*unary_expression)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_operand_return (*operand)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_operand_op_return (*operand_op)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_primary_expression_return (*primary_expression)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_constant_return (*constant)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_constant_expression_return (*constant_expression)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_assignment_expression_return (*assignment_expression)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_lvalue_return (*lvalue)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_assignment_operator_return (*assignment_operator)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_logical_expression_return (*logical_expression)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_logical_or_expression_return (*logical_or_expression)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_logical_and_expression_return (*logical_and_expression)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_equality_expression_return (*equality_expression)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_relational_expression_return (*relational_expression)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_expr_seq_return (*expr_seq)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_expr_g_return (*expr_g)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_number_return (*number)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_box2_return (*box2)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_point3_return (*point3)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_point2_return (*point2)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_array_return (*array)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_bitarray_return (*bitarray)	(struct yatgWalker_Ctx_struct * ctx);
     yatgWalker_arrrange_return (*arrrange)	(struct yatgWalker_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred2_yatgWalker)	(struct yatgWalker_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred16_yatgWalker)	(struct yatgWalker_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred45_yatgWalker)	(struct yatgWalker_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred48_yatgWalker)	(struct yatgWalker_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred57_yatgWalker)	(struct yatgWalker_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred58_yatgWalker)	(struct yatgWalker_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred74_yatgWalker)	(struct yatgWalker_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred80_yatgWalker)	(struct yatgWalker_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred81_yatgWalker)	(struct yatgWalker_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred83_yatgWalker)	(struct yatgWalker_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred87_yatgWalker)	(struct yatgWalker_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred89_yatgWalker)	(struct yatgWalker_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct yatgWalker_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pyatgWalker yatgWalkerNew         (pANTLR3_COMMON_TREE_NODE_STREAM instream);
ANTLR3_API pyatgWalker yatgWalkerNewSSD      (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the tree parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define PIVOT      52
#define LETTER      76
#define EWHILE_EXP      14
#define EIF_ELSE      11
#define CASE      34
#define ESEQ      7
#define P_P2      26
#define NONQ      78
#define P_P3      27
#define UNDO      61
#define EOF      -1
#define T__93      93
#define T__94      94
#define T__91      91
#define T__92      92
#define T__148      148
#define STRING_LITERAL      73
#define EOL      69
#define T__147      147
#define T__90      90
#define EIF_COND      9
#define EWHILE_CON      13
#define T__149      149
#define LP_EXIT      31
#define EDO      15
#define LP_EXIT_WITH      32
#define RETURN      43
#define COORDSYS      50
#define BODY      46
#define COMMENT      80
#define ARR_BIT      29
#define T__99      99
#define T__150      150
#define T__98      98
#define T__151      151
#define T__97      97
#define T__152      152
#define T__96      96
#define T__95      95
#define T__139      139
#define T__138      138
#define ABOUT      53
#define T__137      137
#define ESRC_WHERE      24
#define T__136      136
#define EDO_CON      16
#define T__83      83
#define LINE_COMMENT      81
#define ECATCH_EXP      42
#define P_BOX2      25
#define SEMICOLON      82
#define LOCAL      54
#define T__85      85
#define T__141      141
#define T__84      84
#define T__142      142
#define T__87      87
#define EWHILE      12
#define T__86      86
#define T__140      140
#define PRIM_EXP      68
#define FUN_DEF      44
#define T__89      89
#define T__145      145
#define EFOR      18
#define T__88      88
#define T__146      146
#define T__143      143
#define T__144      144
#define T__126      126
#define T__125      125
#define T__128      128
#define T__127      127
#define WS      79
#define T__129      129
#define LEVEL      57
#define ETRY      40
#define ESRC_START      21
#define FUN      47
#define T__130      130
#define EscapeSequence      75
#define T__131      131
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define MAPPED      48
#define MEMBER      39
#define T__118      118
#define T__119      119
#define T__116      116
#define T__117      117
#define T__114      114
#define T__115      115
#define T__124      124
#define T__123      123
#define T__122      122
#define T__121      121
#define T__120      120
#define HexDigit      77
#define CONTEXT      49
#define SELECTION      51
#define VDECL      4
#define AT      63
#define TIME      59
#define VDEF      5
#define PARENT      56
#define EFOR_SRC      19
#define T__107      107
#define VVAL      6
#define T__108      108
#define T__109      109
#define IDENTIFIER      70
#define T__103      103
#define T__104      104
#define LP_CONT      33
#define CASE_Exp      35
#define OPERAND      64
#define T__105      105
#define T__106      106
#define EFOR_EXP      20
#define T__111      111
#define T__110      110
#define T__113      113
#define T__112      112
#define HEX_LITERAL      72
#define ESRC_BY      23
#define ARR_A      28
#define DIGIT      74
#define DOT      65
#define ARR_BIT_RANGE      30
#define WITH      60
#define CASE_Item      36
#define ETRY_EXP      41
#define WORLD      55
#define DEFAULT      37
#define FUN_NAME      45
#define STRUCT      38
#define ARG_EXPR_L      66
#define SET      67
#define T__102      102
#define T__101      101
#define T__100      100
#define EDO_EXP      17
#define EIN      62
#define CONT      71
#define EIF      8
#define EIF_THEN      10
#define ANIMATE      58
#define ESRC_TO      22
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for yatgWalker
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
