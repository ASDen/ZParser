/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g
 *     -                            On : 2010-06-26 11:29:00
 *     -           for the tree parser : yatgFWTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The tree parser yatgFW has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pyatgFW, which is returned from a call to yatgFWNew().
 *
 * The methods in pyatgFW are  as follows:
 *
 *  - void      pyatgFW->program(pyatgFW)
 *  - yatgFW_expr_return      pyatgFW->expr(pyatgFW)
 *  - void      pyatgFW->variable_decls(pyatgFW)
 *  - void      pyatgFW->type_decl(pyatgFW)
 *  - void      pyatgFW->decl(pyatgFW)
 *  - void      pyatgFW->if_expr(pyatgFW)
 *  - void      pyatgFW->while_loop(pyatgFW)
 *  - void      pyatgFW->do_loop(pyatgFW)
 *  - void      pyatgFW->for_loop(pyatgFW)
 *  - yatgFW_source_return      pyatgFW->source(pyatgFW)
 *  - void      pyatgFW->loop_exit(pyatgFW)
 *  - void      pyatgFW->loop_continue(pyatgFW)
 *  - void      pyatgFW->case_expr(pyatgFW)
 *  - void      pyatgFW->case_item(pyatgFW)
 *  - void      pyatgFW->struct_def(pyatgFW)
 *  - void      pyatgFW->member(pyatgFW)
 *  - void      pyatgFW->try_expr(pyatgFW)
 *  - void      pyatgFW->function_def(pyatgFW)
 *  - void      pyatgFW->fun(pyatgFW)
 *  - void      pyatgFW->function_return(pyatgFW)
 *  - void      pyatgFW->context_expr(pyatgFW)
 *  - void      pyatgFW->context(pyatgFW)
 *  - void      pyatgFW->set_context(pyatgFW)
 *  - void      pyatgFW->argT(pyatgFW)
 *  - void      pyatgFW->argument_expression_list(pyatgFW)
 *  - void      pyatgFW->unary_expression(pyatgFW)
 *  - void      pyatgFW->operand(pyatgFW)
 *  - void      pyatgFW->operand_op(pyatgFW)
 *  - void      pyatgFW->constant(pyatgFW)
 *  - void      pyatgFW->number(pyatgFW)
 *  - void      pyatgFW->assignment_expression(pyatgFW)
 *  - yatgFW_cexprx_return      pyatgFW->cexprx(pyatgFW)
 *  - yatgFW_lvalue_return      pyatgFW->lvalue(pyatgFW)
 *  - yatgFW_assignment_operator_return      pyatgFW->assignment_operator(pyatgFW)
 *  - void      pyatgFW->expr_seq(pyatgFW)
 *  - yatgFW_expr_g_return      pyatgFW->expr_g(pyatgFW)
 *  - void      pyatgFW->box2(pyatgFW)
 *  - void      pyatgFW->point3(pyatgFW)
 *  - void      pyatgFW->point2(pyatgFW)
 *  - void      pyatgFW->array(pyatgFW)
 *  - void      pyatgFW->bitarray(pyatgFW)
 *  - void      pyatgFW->arrrange(pyatgFW)
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_yatgFW_H
#define _yatgFW_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

	#include "stdafx.h"

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct yatgFW_Ctx_struct yatgFW, * pyatgFW;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct yatgFW_expr_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
}
    yatgFW_expr_return;

typedef struct yatgFW_source_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
}
    yatgFW_source_return;

typedef struct yatgFW_cexprx_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
}
    yatgFW_cexprx_return;

typedef struct yatgFW_lvalue_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
}
    yatgFW_lvalue_return;

typedef struct yatgFW_assignment_operator_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
}
    yatgFW_assignment_operator_return;

typedef struct yatgFW_expr_g_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
}
    yatgFW_expr_g_return;



/** Context tracking structure for yatgFW
 */
struct yatgFW_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_TREE_PARSER	    pTreeParser;


     void (*program)	(struct yatgFW_Ctx_struct * ctx);
     yatgFW_expr_return (*expr)	(struct yatgFW_Ctx_struct * ctx);
     void (*variable_decls)	(struct yatgFW_Ctx_struct * ctx);
     void (*type_decl)	(struct yatgFW_Ctx_struct * ctx);
     void (*decl)	(struct yatgFW_Ctx_struct * ctx);
     void (*if_expr)	(struct yatgFW_Ctx_struct * ctx);
     void (*while_loop)	(struct yatgFW_Ctx_struct * ctx);
     void (*do_loop)	(struct yatgFW_Ctx_struct * ctx);
     void (*for_loop)	(struct yatgFW_Ctx_struct * ctx);
     yatgFW_source_return (*source)	(struct yatgFW_Ctx_struct * ctx);
     void (*loop_exit)	(struct yatgFW_Ctx_struct * ctx);
     void (*loop_continue)	(struct yatgFW_Ctx_struct * ctx);
     void (*case_expr)	(struct yatgFW_Ctx_struct * ctx);
     void (*case_item)	(struct yatgFW_Ctx_struct * ctx);
     void (*struct_def)	(struct yatgFW_Ctx_struct * ctx);
     void (*member)	(struct yatgFW_Ctx_struct * ctx);
     void (*try_expr)	(struct yatgFW_Ctx_struct * ctx);
     void (*function_def)	(struct yatgFW_Ctx_struct * ctx);
     void (*fun)	(struct yatgFW_Ctx_struct * ctx);
     void (*function_return)	(struct yatgFW_Ctx_struct * ctx);
     void (*context_expr)	(struct yatgFW_Ctx_struct * ctx);
     void (*context)	(struct yatgFW_Ctx_struct * ctx);
     void (*set_context)	(struct yatgFW_Ctx_struct * ctx);
     void (*argT)	(struct yatgFW_Ctx_struct * ctx);
     void (*argument_expression_list)	(struct yatgFW_Ctx_struct * ctx);
     void (*unary_expression)	(struct yatgFW_Ctx_struct * ctx);
     void (*operand)	(struct yatgFW_Ctx_struct * ctx);
     void (*operand_op)	(struct yatgFW_Ctx_struct * ctx);
     void (*constant)	(struct yatgFW_Ctx_struct * ctx);
     void (*number)	(struct yatgFW_Ctx_struct * ctx);
     void (*assignment_expression)	(struct yatgFW_Ctx_struct * ctx);
     yatgFW_cexprx_return (*cexprx)	(struct yatgFW_Ctx_struct * ctx);
     yatgFW_lvalue_return (*lvalue)	(struct yatgFW_Ctx_struct * ctx);
     yatgFW_assignment_operator_return (*assignment_operator)	(struct yatgFW_Ctx_struct * ctx);
     void (*expr_seq)	(struct yatgFW_Ctx_struct * ctx);
     yatgFW_expr_g_return (*expr_g)	(struct yatgFW_Ctx_struct * ctx);
     void (*box2)	(struct yatgFW_Ctx_struct * ctx);
     void (*point3)	(struct yatgFW_Ctx_struct * ctx);
     void (*point2)	(struct yatgFW_Ctx_struct * ctx);
     void (*array)	(struct yatgFW_Ctx_struct * ctx);
     void (*bitarray)	(struct yatgFW_Ctx_struct * ctx);
     void (*arrrange)	(struct yatgFW_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred2_yatgFW)	(struct yatgFW_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred43_yatgFW)	(struct yatgFW_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred89_yatgFW)	(struct yatgFW_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct yatgFW_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pyatgFW yatgFWNew         (pANTLR3_COMMON_TREE_NODE_STREAM instream);
ANTLR3_API pyatgFW yatgFWNewSSD      (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the tree parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define PIVOT      60
#define SS_PLUS_EQUAL      145
#define SS_CCBRACKET      156
#define SS_D_DOT      157
#define LETTER      161
#define EWHILE_EXP      15
#define SS_FSLASH      126
#define EIF_ELSE      11
#define CASE      39
#define KW_DEFAULT      103
#define ESEQ      7
#define P_P2      30
#define P_P3      31
#define UNDO      69
#define KW_WHERE      94
#define KW_FN      109
#define EOF      -1
#define STRING_LITERIAL      132
#define SS_PERCENT      127
#define KW_GLOBAL      81
#define EOL      164
#define EIF_COND      9
#define KW_UNDEFINED      139
#define EWHILE_CON      14
#define KW_LEVEL      113
#define KW_PARENT      117
#define LP_EXIT      36
#define RETURN      49
#define EDO      17
#define LP_EXIT_WITH      37
#define SS_D_BAR      147
#define KW_THEN      85
#define COORDSYS      58
#define SS_LT_EQUAL      153
#define BODY      52
#define KW_COORDSYS      115
#define SS_STAR      125
#define COMMENT      165
#define ARR_BIT      33
#define KW_EXIT      95
#define SS_GT      152
#define SS_COLON      102
#define ABOUT      61
#define KW_FUNCTION      108
#define ESRC_WHERE      28
#define EDO_CON      18
#define SS_COMMA      79
#define LINE_COMMENT      166
#define SS_DOT      128
#define ECATCH_EXP      48
#define KW_CATCH      106
#define NUMBER      78
#define P_BOX2      29
#define SS_D_EQUAL      149
#define LOCAL      62
#define KW_DO      86
#define SS_MINUS_EQUAL      146
#define SS_STAR_EQUAL      142
#define EWHILE      13
#define KW_ANIMATE      111
#define KW_ABOUT      118
#define EFOR      21
#define FUN_DEF      50
#define PRIM_EXP      77
#define SS_D_AMP      148
#define SS_CBRACKET      130
#define WS      163
#define SS_GT_EQUAL      154
#define SS_MINUS      124
#define LEVEL      65
#define SS_DQUOTE      159
#define KW_TO      92
#define EFOR_END      24
#define KW_BY      93
#define ETRY      46
#define ESRC_START      25
#define FUN      53
#define KW_LOCAL      80
#define EscapeSequence      158
#define SS_EQUAL      83
#define KW_ELSE      87
#define SS_EXC_EQUAL      150
#define MEMBER      45
#define MAPPED      54
#define ID_MORE      75
#define ARR_IND      35
#define SS_OPAREN      100
#define EDO_END      20
#define KW_UNSUPPLIED      140
#define KW_SELECTION      120
#define SS_CPAREN      101
#define KW_TRUE      134
#define HexDigit      162
#define KW_WITH      96
#define KW_PIVOT      119
#define CONTEXT      57
#define SELECTION      59
#define AT      71
#define VDECL      4
#define REF_OP      167
#define TIME      67
#define ECASE_END      43
#define PARENT      64
#define VDEF      5
#define KW_MAPPED      107
#define SS_PLUS      123
#define KW_TIME      114
#define EFOR_SRC      22
#define KW_STRUCT      104
#define EWHILE_END      16
#define VVAL      6
#define KW_FOR      89
#define KW_WHILE      88
#define IDENTIFIER      82
#define OPERAND      72
#define LP_CONT      38
#define CASE_Exp      40
#define KW_RETURN      110
#define KW_SET      122
#define EFOR_EXP      23
#define KW_IN      90
#define HEX_LITERAL      131
#define ESRC_BY      27
#define ARR_A      32
#define KW_TRY      105
#define DIGIT      141
#define DOT      73
#define KW_IF      84
#define KW_UNDO      121
#define ARR_BIT_RANGE      34
#define WITH      68
#define ETRY_EXP      47
#define EIF_END      12
#define CASE_Item      41
#define WORLD      63
#define SS_OCBRACKET      155
#define KW_FALSE      135
#define KW_OFF      137
#define DEFAULT      42
#define FUN_NAME      51
#define KW_CONTINUE      97
#define SET      76
#define ARG_EXPR_L      74
#define STRUCT      44
#define SS_LT      151
#define EDO_EXP      19
#define KW_CASE      98
#define FUN_DEF_END      55
#define KW_COLLECT      91
#define EIN      70
#define SS_PERCENT_EQUAL      144
#define EIF      8
#define KW_WORLD      116
#define KW_ON      136
#define SS_HASH      133
#define ESQ_FSLASH_SQUOTE      160
#define KW_OK      138
#define EIF_THEN      10
#define KW_AT      112
#define KW_OF      99
#define SS_OBRACKET      129
#define ANIMATE      66
#define ESRC_TO      26
#define SS_FSLASH_EQUAL      143
#define STRING      56
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for yatgFW
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
