/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g
 *     -                            On : 2010-03-04 16:18:39
 *     -           for the tree parser : yatgFWTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "yatgFW.h"

	#include "ZInterp.h"

/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pyatgFW_##scope##_SCOPE
#define SCOPE_STACK(scope)  pyatgFW_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pyatgFW_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pyatgFW_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef	    BACKTRACKING
#undef      ADAPTOR
#undef	    RULEMEMO		
#undef		SEEK    
#undef		INDEX
#undef		DBG

#define	    PARSER							ctx->pTreeParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    INPUT							PARSER->ctnstream
#define		ISTREAM							INPUT->tnstream->istream
#define	    STRSTREAM						INPUT->tnstream
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							ISTREAM->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->tnstream->_LT(INPUT->tnstream, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         INPUT->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define		INDEX()							ISTREAM->index(ISTREAM)
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   yatgFWTokenNames[162+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "VDECL",
        (pANTLR3_UINT8) "VDEF",
        (pANTLR3_UINT8) "VVAL",
        (pANTLR3_UINT8) "ESEQ",
        (pANTLR3_UINT8) "EIF",
        (pANTLR3_UINT8) "EIF_COND",
        (pANTLR3_UINT8) "EIF_THEN",
        (pANTLR3_UINT8) "EIF_ELSE",
        (pANTLR3_UINT8) "EIF_END",
        (pANTLR3_UINT8) "EWHILE",
        (pANTLR3_UINT8) "EWHILE_CON",
        (pANTLR3_UINT8) "EWHILE_EXP",
        (pANTLR3_UINT8) "EWHILE_END",
        (pANTLR3_UINT8) "EDO",
        (pANTLR3_UINT8) "EDO_CON",
        (pANTLR3_UINT8) "EDO_EXP",
        (pANTLR3_UINT8) "EDO_END",
        (pANTLR3_UINT8) "EFOR",
        (pANTLR3_UINT8) "EFOR_SRC",
        (pANTLR3_UINT8) "EFOR_EXP",
        (pANTLR3_UINT8) "EFOR_END",
        (pANTLR3_UINT8) "ESRC_START",
        (pANTLR3_UINT8) "ESRC_TO",
        (pANTLR3_UINT8) "ESRC_BY",
        (pANTLR3_UINT8) "ESRC_WHERE",
        (pANTLR3_UINT8) "P_BOX2",
        (pANTLR3_UINT8) "P_P2",
        (pANTLR3_UINT8) "P_P3",
        (pANTLR3_UINT8) "ARR_A",
        (pANTLR3_UINT8) "ARR_BIT",
        (pANTLR3_UINT8) "ARR_BIT_RANGE",
        (pANTLR3_UINT8) "ARR_IND",
        (pANTLR3_UINT8) "LP_EXIT",
        (pANTLR3_UINT8) "LP_EXIT_WITH",
        (pANTLR3_UINT8) "LP_CONT",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "CASE_Exp",
        (pANTLR3_UINT8) "CASE_Item",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "STRUCT",
        (pANTLR3_UINT8) "MEMBER",
        (pANTLR3_UINT8) "ETRY",
        (pANTLR3_UINT8) "ETRY_EXP",
        (pANTLR3_UINT8) "ECATCH_EXP",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "FUN_DEF",
        (pANTLR3_UINT8) "FUN_NAME",
        (pANTLR3_UINT8) "BODY",
        (pANTLR3_UINT8) "FUN",
        (pANTLR3_UINT8) "MAPPED",
        (pANTLR3_UINT8) "FUN_DEF_END",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "CONTEXT",
        (pANTLR3_UINT8) "COORDSYS",
        (pANTLR3_UINT8) "SELECTION",
        (pANTLR3_UINT8) "PIVOT",
        (pANTLR3_UINT8) "ABOUT",
        (pANTLR3_UINT8) "LOCAL",
        (pANTLR3_UINT8) "WORLD",
        (pANTLR3_UINT8) "PARENT",
        (pANTLR3_UINT8) "LEVEL",
        (pANTLR3_UINT8) "ANIMATE",
        (pANTLR3_UINT8) "TIME",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "UNDO",
        (pANTLR3_UINT8) "EIN",
        (pANTLR3_UINT8) "AT",
        (pANTLR3_UINT8) "OPERAND",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "ARG_EXPR_L",
        (pANTLR3_UINT8) "ID_MORE",
        (pANTLR3_UINT8) "SET",
        (pANTLR3_UINT8) "PRIM_EXP",
        (pANTLR3_UINT8) "SS_COMMA",
        (pANTLR3_UINT8) "KW_LOCAL",
        (pANTLR3_UINT8) "KW_GLOBAL",
        (pANTLR3_UINT8) "IDENTIFIER",
        (pANTLR3_UINT8) "SS_EQUAL",
        (pANTLR3_UINT8) "KW_IF",
        (pANTLR3_UINT8) "KW_THEN",
        (pANTLR3_UINT8) "KW_DO",
        (pANTLR3_UINT8) "KW_ELSE",
        (pANTLR3_UINT8) "KW_WHILE",
        (pANTLR3_UINT8) "KW_FOR",
        (pANTLR3_UINT8) "KW_IN",
        (pANTLR3_UINT8) "KW_COLLECT",
        (pANTLR3_UINT8) "KW_TO",
        (pANTLR3_UINT8) "KW_BY",
        (pANTLR3_UINT8) "KW_WHERE",
        (pANTLR3_UINT8) "KW_EXIT",
        (pANTLR3_UINT8) "KW_WITH",
        (pANTLR3_UINT8) "KW_CONTINUE",
        (pANTLR3_UINT8) "KW_CASE",
        (pANTLR3_UINT8) "KW_OF",
        (pANTLR3_UINT8) "SS_OPAREN",
        (pANTLR3_UINT8) "SS_CPAREN",
        (pANTLR3_UINT8) "SS_COLON",
        (pANTLR3_UINT8) "KW_DEFAULT",
        (pANTLR3_UINT8) "KW_STRUCT",
        (pANTLR3_UINT8) "KW_TRY",
        (pANTLR3_UINT8) "KW_CATCH",
        (pANTLR3_UINT8) "KW_MAPPED",
        (pANTLR3_UINT8) "KW_FUNCTION",
        (pANTLR3_UINT8) "KW_FN",
        (pANTLR3_UINT8) "KW_RETURN",
        (pANTLR3_UINT8) "KW_ANIMATE",
        (pANTLR3_UINT8) "KW_AT",
        (pANTLR3_UINT8) "KW_LEVEL",
        (pANTLR3_UINT8) "KW_TIME",
        (pANTLR3_UINT8) "KW_COORDSYS",
        (pANTLR3_UINT8) "KW_WORLD",
        (pANTLR3_UINT8) "KW_PARENT",
        (pANTLR3_UINT8) "KW_ABOUT",
        (pANTLR3_UINT8) "KW_PIVOT",
        (pANTLR3_UINT8) "KW_SELECTION",
        (pANTLR3_UINT8) "KW_UNDO",
        (pANTLR3_UINT8) "KW_SET",
        (pANTLR3_UINT8) "SS_PLUS",
        (pANTLR3_UINT8) "SS_MINUS",
        (pANTLR3_UINT8) "SS_STAR",
        (pANTLR3_UINT8) "SS_FSLASH",
        (pANTLR3_UINT8) "SS_PERCENT",
        (pANTLR3_UINT8) "SS_DOT",
        (pANTLR3_UINT8) "SS_OBRACKET",
        (pANTLR3_UINT8) "SS_CBRACKET",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "HEX_LITERAL",
        (pANTLR3_UINT8) "STRING_LITERIAL",
        (pANTLR3_UINT8) "SS_HASH",
        (pANTLR3_UINT8) "KW_TRUE",
        (pANTLR3_UINT8) "KW_FALSE",
        (pANTLR3_UINT8) "KW_ON",
        (pANTLR3_UINT8) "KW_OFF",
        (pANTLR3_UINT8) "KW_OK",
        (pANTLR3_UINT8) "KW_UNDEFINED",
        (pANTLR3_UINT8) "KW_UNSUPPLIED",
        (pANTLR3_UINT8) "SS_STAR_EQUAL",
        (pANTLR3_UINT8) "SS_FSLASH_EQUAL",
        (pANTLR3_UINT8) "SS_PERCENT_EQUAL",
        (pANTLR3_UINT8) "SS_PLUS_EQUAL",
        (pANTLR3_UINT8) "SS_MINUS_EQUAL",
        (pANTLR3_UINT8) "SS_D_BAR",
        (pANTLR3_UINT8) "SS_D_AMP",
        (pANTLR3_UINT8) "SS_D_EQUAL",
        (pANTLR3_UINT8) "SS_EXC_EQUAL",
        (pANTLR3_UINT8) "SS_LT",
        (pANTLR3_UINT8) "SS_GT",
        (pANTLR3_UINT8) "SS_LT_EQUAL",
        (pANTLR3_UINT8) "SS_GT_EQUAL",
        (pANTLR3_UINT8) "SS_OCBRACKET",
        (pANTLR3_UINT8) "SS_CCBRACKET",
        (pANTLR3_UINT8) "SS_D_DOT",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "SS_DQUOTE",
        (pANTLR3_UINT8) "ESQ_FSLASH_SQUOTE",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "EOL",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "LINE_COMMENT",
        (pANTLR3_UINT8) "REF_OP"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static void	program    (pyatgFW ctx);
static yatgFW_expr_return	expr    (pyatgFW ctx);
static void	variable_decls    (pyatgFW ctx);
static void	type_decl    (pyatgFW ctx);
static void	decl    (pyatgFW ctx);
static void	if_expr    (pyatgFW ctx);
static void	while_loop    (pyatgFW ctx);
static void	do_loop    (pyatgFW ctx);
static void	for_loop    (pyatgFW ctx);
static yatgFW_source_return	source    (pyatgFW ctx);
static void	loop_exit    (pyatgFW ctx);
static void	loop_continue    (pyatgFW ctx);
static void	case_expr    (pyatgFW ctx);
static void	case_item    (pyatgFW ctx);
static void	struct_def    (pyatgFW ctx);
static void	member    (pyatgFW ctx);
static void	try_expr    (pyatgFW ctx);
static void	function_def    (pyatgFW ctx);
static void	fun    (pyatgFW ctx);
static void	function_return    (pyatgFW ctx);
static void	context_expr    (pyatgFW ctx);
static void	context    (pyatgFW ctx);
static void	set_context    (pyatgFW ctx);
static void	argT    (pyatgFW ctx);
static void	argument_expression_list    (pyatgFW ctx);
static void	unary_expression    (pyatgFW ctx);
static void	operand    (pyatgFW ctx);
static void	operand_op    (pyatgFW ctx);
static void	constant    (pyatgFW ctx);
static void	assignment_expression    (pyatgFW ctx);
static yatgFW_cexprx_return	cexprx    (pyatgFW ctx);
static yatgFW_lvalue_return	lvalue    (pyatgFW ctx);
static yatgFW_assignment_operator_return	assignment_operator    (pyatgFW ctx);
static void	expr_seq    (pyatgFW ctx);
static yatgFW_expr_g_return	expr_g    (pyatgFW ctx);
static void	box2    (pyatgFW ctx);
static void	point3    (pyatgFW ctx);
static void	point2    (pyatgFW ctx);
static void	array    (pyatgFW ctx);
static void	bitarray    (pyatgFW ctx);
static void	arrrange    (pyatgFW ctx);
static ANTLR3_BOOLEAN	synpred2_yatgFW    (pyatgFW ctx);
static ANTLR3_BOOLEAN	synpred43_yatgFW    (pyatgFW ctx);
static ANTLR3_BOOLEAN	synpred88_yatgFW    (pyatgFW ctx);
static void	yatgFWFree(pyatgFW ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new yatgFW parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pyatgFW
yatgFWNew   (pANTLR3_COMMON_TREE_NODE_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return yatgFWNewSSD(instream, NULL);
}

/** \brief Create a new yatgFW parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pyatgFW
yatgFWNewSSD   (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pyatgFW ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pyatgFW) ANTLR3_CALLOC(1, sizeof(yatgFW));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in yatgFW.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base Tree parser/recognizer, using the supplied tree node stream
     */
    ctx->pTreeParser		= antlr3TreeParserNewStream(ANTLR3_SIZE_HINT, instream, state);
    /* Install the implementation of our yatgFW interface
     */
    ctx->program	= program;
    ctx->expr	= expr;
    ctx->variable_decls	= variable_decls;
    ctx->type_decl	= type_decl;
    ctx->decl	= decl;
    ctx->if_expr	= if_expr;
    ctx->while_loop	= while_loop;
    ctx->do_loop	= do_loop;
    ctx->for_loop	= for_loop;
    ctx->source	= source;
    ctx->loop_exit	= loop_exit;
    ctx->loop_continue	= loop_continue;
    ctx->case_expr	= case_expr;
    ctx->case_item	= case_item;
    ctx->struct_def	= struct_def;
    ctx->member	= member;
    ctx->try_expr	= try_expr;
    ctx->function_def	= function_def;
    ctx->fun	= fun;
    ctx->function_return	= function_return;
    ctx->context_expr	= context_expr;
    ctx->context	= context;
    ctx->set_context	= set_context;
    ctx->argT	= argT;
    ctx->argument_expression_list	= argument_expression_list;
    ctx->unary_expression	= unary_expression;
    ctx->operand	= operand;
    ctx->operand_op	= operand_op;
    ctx->constant	= constant;
    ctx->assignment_expression	= assignment_expression;
    ctx->cexprx	= cexprx;
    ctx->lvalue	= lvalue;
    ctx->assignment_operator	= assignment_operator;
    ctx->expr_seq	= expr_seq;
    ctx->expr_g	= expr_g;
    ctx->box2	= box2;
    ctx->point3	= point3;
    ctx->point2	= point2;
    ctx->array	= array;
    ctx->bitarray	= bitarray;
    ctx->arrrange	= arrrange;
    ctx->synpred2_yatgFW	= synpred2_yatgFW;
    ctx->synpred43_yatgFW	= synpred43_yatgFW;
    ctx->synpred88_yatgFW	= synpred88_yatgFW;
    ctx->free			= yatgFWFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */

        
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = yatgFWTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 yatgFWFree(pyatgFW ctx)
 {
    /* Free any scope memory
     */
    
        
	// Free this parser
	//
    ctx->pTreeParser->free(ctx->pTreeParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this tree parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return yatgFWTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_program94  */
static	ANTLR3_BITWORD FOLLOW_expr_in_program94_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222192), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_program94	= { FOLLOW_expr_in_program94_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_expr108  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_expr108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_expr108	= { FOLLOW_assignment_expression_in_expr108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_decls_in_expr113  */
static	ANTLR3_BITWORD FOLLOW_variable_decls_in_expr113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_decls_in_expr113	= { FOLLOW_variable_decls_in_expr113_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_if_expr_in_expr122  */
static	ANTLR3_BITWORD FOLLOW_if_expr_in_expr122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_if_expr_in_expr122	= { FOLLOW_if_expr_in_expr122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_while_loop_in_expr131  */
static	ANTLR3_BITWORD FOLLOW_while_loop_in_expr131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_while_loop_in_expr131	= { FOLLOW_while_loop_in_expr131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_do_loop_in_expr140  */
static	ANTLR3_BITWORD FOLLOW_do_loop_in_expr140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_do_loop_in_expr140	= { FOLLOW_do_loop_in_expr140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_for_loop_in_expr149  */
static	ANTLR3_BITWORD FOLLOW_for_loop_in_expr149_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_for_loop_in_expr149	= { FOLLOW_for_loop_in_expr149_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_loop_exit_in_expr158  */
static	ANTLR3_BITWORD FOLLOW_loop_exit_in_expr158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_loop_exit_in_expr158	= { FOLLOW_loop_exit_in_expr158_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_loop_continue_in_expr167  */
static	ANTLR3_BITWORD FOLLOW_loop_continue_in_expr167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_loop_continue_in_expr167	= { FOLLOW_loop_continue_in_expr167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_case_expr_in_expr176  */
static	ANTLR3_BITWORD FOLLOW_case_expr_in_expr176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_case_expr_in_expr176	= { FOLLOW_case_expr_in_expr176_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_struct_def_in_expr185  */
static	ANTLR3_BITWORD FOLLOW_struct_def_in_expr185_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_struct_def_in_expr185	= { FOLLOW_struct_def_in_expr185_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_try_expr_in_expr194  */
static	ANTLR3_BITWORD FOLLOW_try_expr_in_expr194_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_try_expr_in_expr194	= { FOLLOW_try_expr_in_expr194_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_def_in_expr203  */
static	ANTLR3_BITWORD FOLLOW_function_def_in_expr203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_def_in_expr203	= { FOLLOW_function_def_in_expr203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_return_in_expr212  */
static	ANTLR3_BITWORD FOLLOW_function_return_in_expr212_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_return_in_expr212	= { FOLLOW_function_return_in_expr212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_context_expr_in_expr221  */
static	ANTLR3_BITWORD FOLLOW_context_expr_in_expr221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_context_expr_in_expr221	= { FOLLOW_context_expr_in_expr221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_expr230  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_expr230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_expr230	= { FOLLOW_expr_seq_in_expr230_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VDECL_in_variable_decls257  */
static	ANTLR3_BITWORD FOLLOW_VDECL_in_variable_decls257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VDECL_in_variable_decls257	= { FOLLOW_VDECL_in_variable_decls257_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_type_decl_in_variable_decls259  */
static	ANTLR3_BITWORD FOLLOW_type_decl_in_variable_decls259_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_type_decl_in_variable_decls259	= { FOLLOW_type_decl_in_variable_decls259_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_decl_in_variable_decls261  */
static	ANTLR3_BITWORD FOLLOW_decl_in_variable_decls261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000028) };
static  ANTLR3_BITSET_LIST FOLLOW_decl_in_variable_decls261	= { FOLLOW_decl_in_variable_decls261_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_type_decl0  */
static	ANTLR3_BITWORD FOLLOW_set_in_type_decl0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_type_decl0	= { FOLLOW_set_in_type_decl0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VDEF_in_decl297  */
static	ANTLR3_BITWORD FOLLOW_VDEF_in_decl297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VDEF_in_decl297	= { FOLLOW_VDEF_in_decl297_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_decl301  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_decl301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_decl301	= { FOLLOW_IDENTIFIER_in_decl301_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VVAL_in_decl305  */
static	ANTLR3_BITWORD FOLLOW_VVAL_in_decl305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VVAL_in_decl305	= { FOLLOW_VVAL_in_decl305_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_decl309  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_decl309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_decl309	= { FOLLOW_expr_g_in_decl309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VDEF_in_decl321  */
static	ANTLR3_BITWORD FOLLOW_VDEF_in_decl321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_VDEF_in_decl321	= { FOLLOW_VDEF_in_decl321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_decl323  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_decl323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_decl323	= { FOLLOW_IDENTIFIER_in_decl323_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EIF_in_if_expr343  */
static	ANTLR3_BITWORD FOLLOW_EIF_in_if_expr343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EIF_in_if_expr343	= { FOLLOW_EIF_in_if_expr343_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EIF_COND_in_if_expr346  */
static	ANTLR3_BITWORD FOLLOW_EIF_COND_in_if_expr346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EIF_COND_in_if_expr346	= { FOLLOW_EIF_COND_in_if_expr346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_if_expr351  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_if_expr351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_if_expr351	= { FOLLOW_expr_g_in_if_expr351_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EWHILE_in_while_loop382  */
static	ANTLR3_BITWORD FOLLOW_EWHILE_in_while_loop382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EWHILE_in_while_loop382	= { FOLLOW_EWHILE_in_while_loop382_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EWHILE_CON_in_while_loop385  */
static	ANTLR3_BITWORD FOLLOW_EWHILE_CON_in_while_loop385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EWHILE_CON_in_while_loop385	= { FOLLOW_EWHILE_CON_in_while_loop385_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_while_loop390  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_while_loop390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_while_loop390	= { FOLLOW_expr_g_in_while_loop390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EDO_in_do_loop414  */
static	ANTLR3_BITWORD FOLLOW_EDO_in_do_loop414_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EDO_in_do_loop414	= { FOLLOW_EDO_in_do_loop414_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EDO_CON_in_do_loop417  */
static	ANTLR3_BITWORD FOLLOW_EDO_CON_in_do_loop417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EDO_CON_in_do_loop417	= { FOLLOW_EDO_CON_in_do_loop417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_do_loop423  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_do_loop423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_do_loop423	= { FOLLOW_expr_g_in_do_loop423_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EFOR_in_for_loop448  */
static	ANTLR3_BITWORD FOLLOW_EFOR_in_for_loop448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EFOR_in_for_loop448	= { FOLLOW_EFOR_in_for_loop448_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_for_loop450  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_for_loop450_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_for_loop450	= { FOLLOW_IDENTIFIER_in_for_loop450_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EFOR_SRC_in_for_loop453  */
static	ANTLR3_BITWORD FOLLOW_EFOR_SRC_in_for_loop453_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_EFOR_SRC_in_for_loop453	= { FOLLOW_EFOR_SRC_in_for_loop453_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_source_in_for_loop458  */
static	ANTLR3_BITWORD FOLLOW_source_in_for_loop458_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_source_in_for_loop458	= { FOLLOW_source_in_for_loop458_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ESRC_START_in_source481  */
static	ANTLR3_BITWORD FOLLOW_ESRC_START_in_source481_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ESRC_START_in_source481	= { FOLLOW_ESRC_START_in_source481_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_source483  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_source483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_source483	= { FOLLOW_expr_g_in_source483_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ESRC_TO_in_source488  */
static	ANTLR3_BITWORD FOLLOW_ESRC_TO_in_source488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ESRC_TO_in_source488	= { FOLLOW_ESRC_TO_in_source488_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_source490  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_source490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_source490	= { FOLLOW_expr_g_in_source490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ESRC_BY_in_source497  */
static	ANTLR3_BITWORD FOLLOW_ESRC_BY_in_source497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ESRC_BY_in_source497	= { FOLLOW_ESRC_BY_in_source497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_source499  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_source499_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_source499	= { FOLLOW_expr_g_in_source499_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ESRC_WHERE_in_source506  */
static	ANTLR3_BITWORD FOLLOW_ESRC_WHERE_in_source506_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ESRC_WHERE_in_source506	= { FOLLOW_ESRC_WHERE_in_source506_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_source508  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_source508_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_source508	= { FOLLOW_expr_g_in_source508_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LP_EXIT_in_loop_exit533  */
static	ANTLR3_BITWORD FOLLOW_LP_EXIT_in_loop_exit533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LP_EXIT_in_loop_exit533	= { FOLLOW_LP_EXIT_in_loop_exit533_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LP_CONT_in_loop_continue556  */
static	ANTLR3_BITWORD FOLLOW_LP_CONT_in_loop_continue556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LP_CONT_in_loop_continue556	= { FOLLOW_LP_CONT_in_loop_continue556_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_in_case_expr578  */
static	ANTLR3_BITWORD FOLLOW_CASE_in_case_expr578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_in_case_expr578	= { FOLLOW_CASE_in_case_expr578_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_Exp_in_case_expr582  */
static	ANTLR3_BITWORD FOLLOW_CASE_Exp_in_case_expr582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_Exp_in_case_expr582	= { FOLLOW_CASE_Exp_in_case_expr582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_case_expr584  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_case_expr584_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_case_expr584	= { FOLLOW_expr_g_in_case_expr584_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_Item_in_case_item605  */
static	ANTLR3_BITWORD FOLLOW_CASE_Item_in_case_item605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_Item_in_case_item605	= { FOLLOW_CASE_Item_in_case_item605_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_in_case_item608  */
static	ANTLR3_BITWORD FOLLOW_constant_in_case_item608_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222190), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_in_case_item608	= { FOLLOW_constant_in_case_item608_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_case_item610  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_case_item610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_case_item610	= { FOLLOW_expr_g_in_case_item610_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_Item_in_case_item619  */
static	ANTLR3_BITWORD FOLLOW_CASE_Item_in_case_item619_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_Item_in_case_item619	= { FOLLOW_CASE_Item_in_case_item619_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DEFAULT_in_case_item623  */
static	ANTLR3_BITWORD FOLLOW_DEFAULT_in_case_item623_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222190), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_DEFAULT_in_case_item623	= { FOLLOW_DEFAULT_in_case_item623_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_case_item625  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_case_item625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_case_item625	= { FOLLOW_expr_g_in_case_item625_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRUCT_in_struct_def643  */
static	ANTLR3_BITWORD FOLLOW_STRUCT_in_struct_def643_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_STRUCT_in_struct_def643	= { FOLLOW_STRUCT_in_struct_def643_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_member_in_struct_def645  */
static	ANTLR3_BITWORD FOLLOW_member_in_struct_def645_bits[]	= { ANTLR3_UINT64_LIT(0x0002100000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_member_in_struct_def645	= { FOLLOW_member_in_struct_def645_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MEMBER_in_member667  */
static	ANTLR3_BITWORD FOLLOW_MEMBER_in_member667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_MEMBER_in_member667	= { FOLLOW_MEMBER_in_member667_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_member669  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_member669_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222190), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_member669	= { FOLLOW_IDENTIFIER_in_member669_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_member671  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_member671_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_member671	= { FOLLOW_expr_g_in_member671_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_def_in_member681  */
static	ANTLR3_BITWORD FOLLOW_function_def_in_member681_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_def_in_member681	= { FOLLOW_function_def_in_member681_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ETRY_in_try_expr699  */
static	ANTLR3_BITWORD FOLLOW_ETRY_in_try_expr699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ETRY_in_try_expr699	= { FOLLOW_ETRY_in_try_expr699_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ETRY_EXP_in_try_expr703  */
static	ANTLR3_BITWORD FOLLOW_ETRY_EXP_in_try_expr703_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ETRY_EXP_in_try_expr703	= { FOLLOW_ETRY_EXP_in_try_expr703_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_try_expr705  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_try_expr705_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_try_expr705	= { FOLLOW_expr_g_in_try_expr705_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ECATCH_EXP_in_try_expr710  */
static	ANTLR3_BITWORD FOLLOW_ECATCH_EXP_in_try_expr710_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ECATCH_EXP_in_try_expr710	= { FOLLOW_ECATCH_EXP_in_try_expr710_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_try_expr713  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_try_expr713_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_try_expr713	= { FOLLOW_expr_g_in_try_expr713_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUN_DEF_in_function_def735  */
static	ANTLR3_BITWORD FOLLOW_FUN_DEF_in_function_def735_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUN_DEF_in_function_def735	= { FOLLOW_FUN_DEF_in_function_def735_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUN_NAME_in_function_def738  */
static	ANTLR3_BITWORD FOLLOW_FUN_NAME_in_function_def738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_FUN_NAME_in_function_def738	= { FOLLOW_FUN_NAME_in_function_def738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_function_def740  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_function_def740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_function_def740	= { FOLLOW_IDENTIFIER_in_function_def740_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARG_EXPR_L_in_function_def744  */
static	ANTLR3_BITWORD FOLLOW_ARG_EXPR_L_in_function_def744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARG_EXPR_L_in_function_def744	= { FOLLOW_ARG_EXPR_L_in_function_def744_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_argument_expression_list_in_function_def748  */
static	ANTLR3_BITWORD FOLLOW_argument_expression_list_in_function_def748_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_argument_expression_list_in_function_def748	= { FOLLOW_argument_expression_list_in_function_def748_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_fun0  */
static	ANTLR3_BITWORD FOLLOW_set_in_fun0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_fun0	= { FOLLOW_set_in_fun0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RETURN_in_function_return791  */
static	ANTLR3_BITWORD FOLLOW_RETURN_in_function_return791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_RETURN_in_function_return791	= { FOLLOW_RETURN_in_function_return791_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_function_return793  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_function_return793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_function_return793	= { FOLLOW_expr_g_in_function_return793_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context_expr810  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context_expr810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context_expr810	= { FOLLOW_CONTEXT_in_context_expr810_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_context_in_context_expr812  */
static	ANTLR3_BITWORD FOLLOW_context_in_context_expr812_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222190), ANTLR3_UINT64_LIT(0x3E12000001020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_context_in_context_expr812	= { FOLLOW_context_in_context_expr812_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_context_expr815  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_context_expr815_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_context_expr815	= { FOLLOW_expr_g_in_context_expr815_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context830  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context830	= { FOLLOW_CONTEXT_in_context830_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ANIMATE_in_context833  */
static	ANTLR3_BITWORD FOLLOW_ANIMATE_in_context833_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_ANIMATE_in_context833	= { FOLLOW_ANIMATE_in_context833_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_context835  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_context835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_context835	= { FOLLOW_cexprx_in_context835_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context844  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context844	= { FOLLOW_CONTEXT_in_context844_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AT_in_context846  */
static	ANTLR3_BITWORD FOLLOW_AT_in_context846_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_AT_in_context846	= { FOLLOW_AT_in_context846_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LEVEL_in_context848  */
static	ANTLR3_BITWORD FOLLOW_LEVEL_in_context848_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_LEVEL_in_context848	= { FOLLOW_LEVEL_in_context848_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context850  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context850_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context850	= { FOLLOW_operand_in_context850_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context858  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context858	= { FOLLOW_CONTEXT_in_context858_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AT_in_context860  */
static	ANTLR3_BITWORD FOLLOW_AT_in_context860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_AT_in_context860	= { FOLLOW_AT_in_context860_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TIME_in_context862  */
static	ANTLR3_BITWORD FOLLOW_TIME_in_context862_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_TIME_in_context862	= { FOLLOW_TIME_in_context862_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context864  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context864	= { FOLLOW_operand_in_context864_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context872  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context872_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context872	= { FOLLOW_CONTEXT_in_context872_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EIN_in_context874  */
static	ANTLR3_BITWORD FOLLOW_EIN_in_context874_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_EIN_in_context874	= { FOLLOW_EIN_in_context874_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context876  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context876	= { FOLLOW_operand_in_context876_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_IN_in_context883  */
static	ANTLR3_BITWORD FOLLOW_KW_IN_in_context883_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_IN_in_context883	= { FOLLOW_KW_IN_in_context883_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_COORDSYS_in_context887  */
static	ANTLR3_BITWORD FOLLOW_KW_COORDSYS_in_context887_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_COORDSYS_in_context887	= { FOLLOW_KW_COORDSYS_in_context887_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context901  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context901	= { FOLLOW_CONTEXT_in_context901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COORDSYS_in_context904  */
static	ANTLR3_BITWORD FOLLOW_COORDSYS_in_context904_bits[]	= { ANTLR3_UINT64_LIT(0x2000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COORDSYS_in_context904	= { FOLLOW_COORDSYS_in_context904_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LOCAL_in_context906  */
static	ANTLR3_BITWORD FOLLOW_LOCAL_in_context906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LOCAL_in_context906	= { FOLLOW_LOCAL_in_context906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context916  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context916	= { FOLLOW_CONTEXT_in_context916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COORDSYS_in_context919  */
static	ANTLR3_BITWORD FOLLOW_COORDSYS_in_context919_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COORDSYS_in_context919	= { FOLLOW_COORDSYS_in_context919_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WORLD_in_context921  */
static	ANTLR3_BITWORD FOLLOW_WORLD_in_context921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_WORLD_in_context921	= { FOLLOW_WORLD_in_context921_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context931  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context931	= { FOLLOW_CONTEXT_in_context931_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COORDSYS_in_context933  */
static	ANTLR3_BITWORD FOLLOW_COORDSYS_in_context933_bits[]	= { ANTLR3_UINT64_LIT(0x8000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COORDSYS_in_context933	= { FOLLOW_COORDSYS_in_context933_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PARENT_in_context935  */
static	ANTLR3_BITWORD FOLLOW_PARENT_in_context935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_PARENT_in_context935	= { FOLLOW_PARENT_in_context935_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context945  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context945	= { FOLLOW_CONTEXT_in_context945_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COORDSYS_in_context947  */
static	ANTLR3_BITWORD FOLLOW_COORDSYS_in_context947_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_COORDSYS_in_context947	= { FOLLOW_COORDSYS_in_context947_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context949  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context949	= { FOLLOW_operand_in_context949_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_ABOUT_in_context961  */
static	ANTLR3_BITWORD FOLLOW_KW_ABOUT_in_context961_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_ABOUT_in_context961	= { FOLLOW_KW_ABOUT_in_context961_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context970  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context970	= { FOLLOW_CONTEXT_in_context970_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ABOUT_in_context972  */
static	ANTLR3_BITWORD FOLLOW_ABOUT_in_context972_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ABOUT_in_context972	= { FOLLOW_ABOUT_in_context972_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PIVOT_in_context974  */
static	ANTLR3_BITWORD FOLLOW_PIVOT_in_context974_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_PIVOT_in_context974	= { FOLLOW_PIVOT_in_context974_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context986  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context986_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context986	= { FOLLOW_CONTEXT_in_context986_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ABOUT_in_context988  */
static	ANTLR3_BITWORD FOLLOW_ABOUT_in_context988_bits[]	= { ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ABOUT_in_context988	= { FOLLOW_ABOUT_in_context988_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELECTION_in_context990  */
static	ANTLR3_BITWORD FOLLOW_SELECTION_in_context990_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_SELECTION_in_context990	= { FOLLOW_SELECTION_in_context990_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context1000  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context1000_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context1000	= { FOLLOW_CONTEXT_in_context1000_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ABOUT_in_context1002  */
static	ANTLR3_BITWORD FOLLOW_ABOUT_in_context1002_bits[]	= { ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ABOUT_in_context1002	= { FOLLOW_ABOUT_in_context1002_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COORDSYS_in_context1004  */
static	ANTLR3_BITWORD FOLLOW_COORDSYS_in_context1004_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_COORDSYS_in_context1004	= { FOLLOW_COORDSYS_in_context1004_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context1013  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context1013_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context1013	= { FOLLOW_CONTEXT_in_context1013_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ABOUT_in_context1015  */
static	ANTLR3_BITWORD FOLLOW_ABOUT_in_context1015_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_ABOUT_in_context1015	= { FOLLOW_ABOUT_in_context1015_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_context1017  */
static	ANTLR3_BITWORD FOLLOW_operand_in_context1017_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_context1017	= { FOLLOW_operand_in_context1017_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONTEXT_in_context1029  */
static	ANTLR3_BITWORD FOLLOW_CONTEXT_in_context1029_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_CONTEXT_in_context1029	= { FOLLOW_CONTEXT_in_context1029_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNDO_in_context1032  */
static	ANTLR3_BITWORD FOLLOW_UNDO_in_context1032_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_UNDO_in_context1032	= { FOLLOW_UNDO_in_context1032_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_context1035  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_context1035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_context1035	= { FOLLOW_cexprx_in_context1035_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SET_in_set_context1054  */
static	ANTLR3_BITWORD FOLLOW_SET_in_set_context1054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SET_in_set_context1054	= { FOLLOW_SET_in_set_context1054_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_context_in_set_context1056  */
static	ANTLR3_BITWORD FOLLOW_context_in_set_context1056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_context_in_set_context1056	= { FOLLOW_context_in_set_context1056_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_argT1076  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_argT1076_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_argT1076	= { FOLLOW_IDENTIFIER_in_argT1076_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_argT1079  */
static	ANTLR3_BITWORD FOLLOW_operand_in_argT1079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_argT1079	= { FOLLOW_operand_in_argT1079_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_argT_in_argument_expression_list1098  */
static	ANTLR3_BITWORD FOLLOW_argT_in_argument_expression_list1098_bits[]	= { ANTLR3_UINT64_LIT(0x000000000000000A), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_argT_in_argument_expression_list1098	= { FOLLOW_argT_in_argument_expression_list1098_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_operand_in_unary_expression1110  */
static	ANTLR3_BITWORD FOLLOW_operand_in_unary_expression1110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_operand_in_unary_expression1110	= { FOLLOW_operand_in_unary_expression1110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPERAND_in_operand1130  */
static	ANTLR3_BITWORD FOLLOW_OPERAND_in_operand1130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_OPERAND_in_operand1130	= { FOLLOW_OPERAND_in_operand1130_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_operand1132  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_operand1132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000700) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_operand1132	= { FOLLOW_IDENTIFIER_in_operand1132_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_operand1149  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_operand1149_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_operand1149	= { FOLLOW_DOT_in_operand1149_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_operand1151  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_operand1151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_operand1151	= { FOLLOW_IDENTIFIER_in_operand1151_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_IND_in_operand1172  */
static	ANTLR3_BITWORD FOLLOW_ARR_IND_in_operand1172_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_IND_in_operand1172	= { FOLLOW_ARR_IND_in_operand1172_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_operand1174  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_operand1174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_operand1174	= { FOLLOW_expr_g_in_operand1174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARG_EXPR_L_in_operand1194  */
static	ANTLR3_BITWORD FOLLOW_ARG_EXPR_L_in_operand1194_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARG_EXPR_L_in_operand1194	= { FOLLOW_ARG_EXPR_L_in_operand1194_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_operand1196  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_operand1196_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222198), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_operand1196	= { FOLLOW_expr_g_in_operand1196_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_MORE_in_operand1207  */
static	ANTLR3_BITWORD FOLLOW_ID_MORE_in_operand1207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_MORE_in_operand1207	= { FOLLOW_ID_MORE_in_operand1207_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_in_operand1222  */
static	ANTLR3_BITWORD FOLLOW_constant_in_operand1222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_in_operand1222	= { FOLLOW_constant_in_operand1222_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_operand_op1244  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_operand_op1244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_operand_op1244	= { FOLLOW_DOT_in_operand_op1244_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_operand_op1246  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_operand_op1246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_operand_op1246	= { FOLLOW_IDENTIFIER_in_operand_op1246_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_IND_in_operand_op1262  */
static	ANTLR3_BITWORD FOLLOW_ARR_IND_in_operand_op1262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_IND_in_operand_op1262	= { FOLLOW_ARR_IND_in_operand_op1262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_operand_op1264  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_operand_op1264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_operand_op1264	= { FOLLOW_expr_g_in_operand_op1264_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIGIT_in_constant1319  */
static	ANTLR3_BITWORD FOLLOW_DIGIT_in_constant1319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_DIGIT_in_constant1319	= { FOLLOW_DIGIT_in_constant1319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_HEX_LITERAL_in_constant1334  */
static	ANTLR3_BITWORD FOLLOW_HEX_LITERAL_in_constant1334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_HEX_LITERAL_in_constant1334	= { FOLLOW_HEX_LITERAL_in_constant1334_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_LITERIAL_in_constant1347  */
static	ANTLR3_BITWORD FOLLOW_STRING_LITERIAL_in_constant1347_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_LITERIAL_in_constant1347	= { FOLLOW_STRING_LITERIAL_in_constant1347_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_TRUE_in_constant1360  */
static	ANTLR3_BITWORD FOLLOW_KW_TRUE_in_constant1360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_TRUE_in_constant1360	= { FOLLOW_KW_TRUE_in_constant1360_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_FALSE_in_constant1373  */
static	ANTLR3_BITWORD FOLLOW_KW_FALSE_in_constant1373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_FALSE_in_constant1373	= { FOLLOW_KW_FALSE_in_constant1373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_ON_in_constant1386  */
static	ANTLR3_BITWORD FOLLOW_KW_ON_in_constant1386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_ON_in_constant1386	= { FOLLOW_KW_ON_in_constant1386_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_OFF_in_constant1399  */
static	ANTLR3_BITWORD FOLLOW_KW_OFF_in_constant1399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_OFF_in_constant1399	= { FOLLOW_KW_OFF_in_constant1399_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_OK_in_constant1412  */
static	ANTLR3_BITWORD FOLLOW_KW_OK_in_constant1412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_OK_in_constant1412	= { FOLLOW_KW_OK_in_constant1412_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_UNDEFINED_in_constant1425  */
static	ANTLR3_BITWORD FOLLOW_KW_UNDEFINED_in_constant1425_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_UNDEFINED_in_constant1425	= { FOLLOW_KW_UNDEFINED_in_constant1425_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_UNSUPPLIED_in_constant1438  */
static	ANTLR3_BITWORD FOLLOW_KW_UNSUPPLIED_in_constant1438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_UNSUPPLIED_in_constant1438	= { FOLLOW_KW_UNSUPPLIED_in_constant1438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_A_in_constant1464  */
static	ANTLR3_BITWORD FOLLOW_ARR_A_in_constant1464_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_A_in_constant1464	= { FOLLOW_ARR_A_in_constant1464_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_constant1467  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_constant1467_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222198), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_constant1467	= { FOLLOW_expr_g_in_constant1467_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_HASH_in_constant1484  */
static	ANTLR3_BITWORD FOLLOW_SS_HASH_in_constant1484_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_HASH_in_constant1484	= { FOLLOW_SS_HASH_in_constant1484_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_constant1486  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_constant1486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_constant1486	= { FOLLOW_IDENTIFIER_in_constant1486_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitarray_in_constant1495  */
static	ANTLR3_BITWORD FOLLOW_bitarray_in_constant1495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_bitarray_in_constant1495	= { FOLLOW_bitarray_in_constant1495_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_box2_in_constant1504  */
static	ANTLR3_BITWORD FOLLOW_box2_in_constant1504_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_box2_in_constant1504	= { FOLLOW_box2_in_constant1504_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_point3_in_constant1512  */
static	ANTLR3_BITWORD FOLLOW_point3_in_constant1512_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_point3_in_constant1512	= { FOLLOW_point3_in_constant1512_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_point2_in_constant1520  */
static	ANTLR3_BITWORD FOLLOW_point2_in_constant1520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_point2_in_constant1520	= { FOLLOW_point2_in_constant1520_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_MINUS_in_constant1529  */
static	ANTLR3_BITWORD FOLLOW_SS_MINUS_in_constant1529_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222190), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_MINUS_in_constant1529	= { FOLLOW_SS_MINUS_in_constant1529_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_constant1531  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_constant1531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_constant1531	= { FOLLOW_expr_g_in_constant1531_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_constant1539  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_constant1539_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_constant1539	= { FOLLOW_expr_seq_in_constant1539_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_operator_in_assignment_expression1564  */
static	ANTLR3_BITWORD FOLLOW_assignment_operator_in_assignment_expression1564_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_operator_in_assignment_expression1564	= { FOLLOW_assignment_operator_in_assignment_expression1564_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_lvalue_in_assignment_expression1568  */
static	ANTLR3_BITWORD FOLLOW_lvalue_in_assignment_expression1568_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222198), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_lvalue_in_assignment_expression1568	= { FOLLOW_lvalue_in_assignment_expression1568_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_assignment_expression1572  */
static	ANTLR3_BITWORD FOLLOW_expr_in_assignment_expression1572_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_assignment_expression1572	= { FOLLOW_expr_in_assignment_expression1572_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_assignment_expression1581  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_assignment_expression1581_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_assignment_expression1581	= { FOLLOW_cexprx_in_assignment_expression1581_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_D_BAR_in_cexprx1603  */
static	ANTLR3_BITWORD FOLLOW_SS_D_BAR_in_cexprx1603_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_D_BAR_in_cexprx1603	= { FOLLOW_SS_D_BAR_in_cexprx1603_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1607  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1607_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1607	= { FOLLOW_cexprx_in_cexprx1607_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1611  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1611	= { FOLLOW_cexprx_in_cexprx1611_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_D_AMP_in_cexprx1622  */
static	ANTLR3_BITWORD FOLLOW_SS_D_AMP_in_cexprx1622_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_D_AMP_in_cexprx1622	= { FOLLOW_SS_D_AMP_in_cexprx1622_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1626  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1626_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1626	= { FOLLOW_cexprx_in_cexprx1626_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1630  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1630	= { FOLLOW_cexprx_in_cexprx1630_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_D_EQUAL_in_cexprx1641  */
static	ANTLR3_BITWORD FOLLOW_SS_D_EQUAL_in_cexprx1641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_D_EQUAL_in_cexprx1641	= { FOLLOW_SS_D_EQUAL_in_cexprx1641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1645  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1645_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1645	= { FOLLOW_cexprx_in_cexprx1645_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1649  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1649	= { FOLLOW_cexprx_in_cexprx1649_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_EXC_EQUAL_in_cexprx1660  */
static	ANTLR3_BITWORD FOLLOW_SS_EXC_EQUAL_in_cexprx1660_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_EXC_EQUAL_in_cexprx1660	= { FOLLOW_SS_EXC_EQUAL_in_cexprx1660_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1664  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1664_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1664	= { FOLLOW_cexprx_in_cexprx1664_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1668  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1668_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1668	= { FOLLOW_cexprx_in_cexprx1668_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_LT_in_cexprx1679  */
static	ANTLR3_BITWORD FOLLOW_SS_LT_in_cexprx1679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_LT_in_cexprx1679	= { FOLLOW_SS_LT_in_cexprx1679_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1683  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1683_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1683	= { FOLLOW_cexprx_in_cexprx1683_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1687  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1687	= { FOLLOW_cexprx_in_cexprx1687_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_GT_in_cexprx1698  */
static	ANTLR3_BITWORD FOLLOW_SS_GT_in_cexprx1698_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_GT_in_cexprx1698	= { FOLLOW_SS_GT_in_cexprx1698_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1702  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1702_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1702	= { FOLLOW_cexprx_in_cexprx1702_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1706  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1706	= { FOLLOW_cexprx_in_cexprx1706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_LT_EQUAL_in_cexprx1717  */
static	ANTLR3_BITWORD FOLLOW_SS_LT_EQUAL_in_cexprx1717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_LT_EQUAL_in_cexprx1717	= { FOLLOW_SS_LT_EQUAL_in_cexprx1717_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1721  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1721_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1721	= { FOLLOW_cexprx_in_cexprx1721_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1725  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1725	= { FOLLOW_cexprx_in_cexprx1725_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_GT_EQUAL_in_cexprx1736  */
static	ANTLR3_BITWORD FOLLOW_SS_GT_EQUAL_in_cexprx1736_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_GT_EQUAL_in_cexprx1736	= { FOLLOW_SS_GT_EQUAL_in_cexprx1736_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1740  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1740_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1740	= { FOLLOW_cexprx_in_cexprx1740_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1744  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1744	= { FOLLOW_cexprx_in_cexprx1744_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_PLUS_in_cexprx1755  */
static	ANTLR3_BITWORD FOLLOW_SS_PLUS_in_cexprx1755_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_PLUS_in_cexprx1755	= { FOLLOW_SS_PLUS_in_cexprx1755_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1759  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1759_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1759	= { FOLLOW_cexprx_in_cexprx1759_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1763  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1763_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1763	= { FOLLOW_cexprx_in_cexprx1763_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_MINUS_in_cexprx1775  */
static	ANTLR3_BITWORD FOLLOW_SS_MINUS_in_cexprx1775_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_MINUS_in_cexprx1775	= { FOLLOW_SS_MINUS_in_cexprx1775_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1779  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1779_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1779	= { FOLLOW_cexprx_in_cexprx1779_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1783  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1783	= { FOLLOW_cexprx_in_cexprx1783_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_STAR_in_cexprx1795  */
static	ANTLR3_BITWORD FOLLOW_SS_STAR_in_cexprx1795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_STAR_in_cexprx1795	= { FOLLOW_SS_STAR_in_cexprx1795_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1799  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1799_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1799	= { FOLLOW_cexprx_in_cexprx1799_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1803  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1803	= { FOLLOW_cexprx_in_cexprx1803_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_FSLASH_in_cexprx1815  */
static	ANTLR3_BITWORD FOLLOW_SS_FSLASH_in_cexprx1815_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_FSLASH_in_cexprx1815	= { FOLLOW_SS_FSLASH_in_cexprx1815_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1819  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1819_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1819	= { FOLLOW_cexprx_in_cexprx1819_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1823  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1823	= { FOLLOW_cexprx_in_cexprx1823_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SS_PERCENT_in_cexprx1835  */
static	ANTLR3_BITWORD FOLLOW_SS_PERCENT_in_cexprx1835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_SS_PERCENT_in_cexprx1835	= { FOLLOW_SS_PERCENT_in_cexprx1835_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1839  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1839_bits[]	= { ANTLR3_UINT64_LIT(0x00000003E0000080), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1839	= { FOLLOW_cexprx_in_cexprx1839_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cexprx_in_cexprx1843  */
static	ANTLR3_BITWORD FOLLOW_cexprx_in_cexprx1843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_cexprx_in_cexprx1843	= { FOLLOW_cexprx_in_cexprx1843_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_cexprx1858  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_cexprx1858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_cexprx1858	= { FOLLOW_unary_expression_in_cexprx1858_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_lvalue1877  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_lvalue1877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_lvalue1877	= { FOLLOW_unary_expression_in_lvalue1877_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_assignment_operator0  */
static	ANTLR3_BITWORD FOLLOW_set_in_assignment_operator0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_assignment_operator0	= { FOLLOW_set_in_assignment_operator0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ESEQ_in_expr_seq1930  */
static	ANTLR3_BITWORD FOLLOW_ESEQ_in_expr_seq1930_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ESEQ_in_expr_seq1930	= { FOLLOW_ESEQ_in_expr_seq1930_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr_seq1933  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr_seq1933_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222198), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr_seq1933	= { FOLLOW_expr_in_expr_seq1933_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_expr_g1950  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_expr_g1950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_expr_g1950	= { FOLLOW_expr_seq_in_expr_g1950_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_expr_g1957  */
static	ANTLR3_BITWORD FOLLOW_expr_in_expr_g1957_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_expr_g1957	= { FOLLOW_expr_in_expr_g1957_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_P_BOX2_in_box21981  */
static	ANTLR3_BITWORD FOLLOW_P_BOX2_in_box21981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_P_BOX2_in_box21981	= { FOLLOW_P_BOX2_in_box21981_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_box21984  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_box21984_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222190), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_box21984	= { FOLLOW_expr_g_in_box21984_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_box21987  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_box21987_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222190), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_box21987	= { FOLLOW_expr_g_in_box21987_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_box21990  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_box21990_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222190), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_box21990	= { FOLLOW_expr_g_in_box21990_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_box21993  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_box21993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_box21993	= { FOLLOW_expr_g_in_box21993_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_P_P3_in_point32011  */
static	ANTLR3_BITWORD FOLLOW_P_P3_in_point32011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_P_P3_in_point32011	= { FOLLOW_P_P3_in_point32011_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point32014  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point32014_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222190), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point32014	= { FOLLOW_expr_g_in_point32014_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point32017  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point32017_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222190), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point32017	= { FOLLOW_expr_g_in_point32017_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point32020  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point32020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point32020	= { FOLLOW_expr_g_in_point32020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_P_P2_in_point22039  */
static	ANTLR3_BITWORD FOLLOW_P_P2_in_point22039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_P_P2_in_point22039	= { FOLLOW_P_P2_in_point22039_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point22042  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point22042_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222190), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point22042	= { FOLLOW_expr_g_in_point22042_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_point22045  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_point22045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_point22045	= { FOLLOW_expr_g_in_point22045_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_A_in_array2064  */
static	ANTLR3_BITWORD FOLLOW_ARR_A_in_array2064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_A_in_array2064	= { FOLLOW_ARR_A_in_array2064_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_A_in_array2071  */
static	ANTLR3_BITWORD FOLLOW_ARR_A_in_array2071_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_A_in_array2071	= { FOLLOW_ARR_A_in_array2071_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_g_in_array2074  */
static	ANTLR3_BITWORD FOLLOW_expr_g_in_array2074_bits[]	= { ANTLR3_UINT64_LIT(0x010328D3E0222198), ANTLR3_UINT64_LIT(0x3E00000000020080), ANTLR3_UINT64_LIT(0x0000000001FFFFFE) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_g_in_array2074	= { FOLLOW_expr_g_in_array2074_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_BIT_in_bitarray2089  */
static	ANTLR3_BITWORD FOLLOW_ARR_BIT_in_bitarray2089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_BIT_in_bitarray2089	= { FOLLOW_ARR_BIT_in_bitarray2089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_BIT_in_bitarray2098  */
static	ANTLR3_BITWORD FOLLOW_ARR_BIT_in_bitarray2098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_BIT_in_bitarray2098	= { FOLLOW_ARR_BIT_in_bitarray2098_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrrange_in_bitarray2100  */
static	ANTLR3_BITWORD FOLLOW_arrrange_in_bitarray2100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arrrange_in_bitarray2100	= { FOLLOW_arrrange_in_bitarray2100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ARR_BIT_RANGE_in_arrrange2119  */
static	ANTLR3_BITWORD FOLLOW_ARR_BIT_RANGE_in_arrrange2119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_ARR_BIT_RANGE_in_arrrange2119	= { FOLLOW_ARR_BIT_RANGE_in_arrrange2119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrrange_in_arrrange2122  */
static	ANTLR3_BITWORD FOLLOW_arrrange_in_arrrange2122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arrrange_in_arrrange2122	= { FOLLOW_arrrange_in_arrrange2122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrrange_in_arrrange2124  */
static	ANTLR3_BITWORD FOLLOW_arrrange_in_arrrange2124_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_arrrange_in_arrrange2124	= { FOLLOW_arrrange_in_arrrange2124_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expression_in_synpred2_yatgFW108  */
static	ANTLR3_BITWORD FOLLOW_assignment_expression_in_synpred2_yatgFW108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expression_in_synpred2_yatgFW108	= { FOLLOW_assignment_expression_in_synpred2_yatgFW108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_argT_in_synpred43_yatgFW1098  */
static	ANTLR3_BITWORD FOLLOW_argT_in_synpred43_yatgFW1098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_argT_in_synpred43_yatgFW1098	= { FOLLOW_argT_in_synpred43_yatgFW1098_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_seq_in_synpred88_yatgFW1950  */
static	ANTLR3_BITWORD FOLLOW_expr_seq_in_synpred88_yatgFW1950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_seq_in_synpred88_yatgFW1950	= { FOLLOW_expr_seq_in_synpred88_yatgFW1950_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:22:1: program : ( expr )+ ;
 */
static void
program(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:23:2: ( ( expr )+ )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:24:3: ( expr )+
        {
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:24:3: ( expr )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( LA(1) ) 
            	{
            	case VDECL:
            	case ESEQ:
            	case EIF:
            	case EWHILE:
            	case EDO:
            	case EFOR:
            	case P_BOX2:
            	case P_P2:
            	case P_P3:
            	case ARR_A:
            	case ARR_BIT:
            	case LP_EXIT:
            	case LP_CONT:
            	case CASE:
            	case STRUCT:
            	case ETRY:
            	case RETURN:
            	case FUN_DEF:
            	case CONTEXT:
            	case OPERAND:
            	case SS_EQUAL:
            	case SS_PLUS:
            	case SS_MINUS:
            	case SS_STAR:
            	case SS_FSLASH:
            	case SS_PERCENT:
            	case DIGIT:
            	case HEX_LITERAL:
            	case STRING_LITERIAL:
            	case SS_HASH:
            	case KW_TRUE:
            	case KW_FALSE:
            	case KW_ON:
            	case KW_OFF:
            	case KW_OK:
            	case KW_UNDEFINED:
            	case KW_UNSUPPLIED:
            	case SS_STAR_EQUAL:
            	case SS_FSLASH_EQUAL:
            	case SS_PERCENT_EQUAL:
            	case SS_PLUS_EQUAL:
            	case SS_MINUS_EQUAL:
            	case SS_D_BAR:
            	case SS_D_AMP:
            	case SS_D_EQUAL:
            	case SS_EXC_EQUAL:
            	case SS_LT:
            	case SS_GT:
            	case SS_LT_EQUAL:
            	case SS_GT_EQUAL:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1) 
            	{
            	    case 1:
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:24:5: expr
            	        {
            	            FOLLOWPUSH(FOLLOW_expr_in_program94);
            	            expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleprogramEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE;
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleprogramEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end program */

/** 
 * $ANTLR start expr
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:27:1: expr : ( assignment_expression | variable_decls | if_expr | while_loop | do_loop | for_loop | loop_exit | loop_continue | case_expr | struct_def | try_expr | function_def | function_return | context_expr | expr_seq );
 */
static yatgFW_expr_return
expr(pyatgFW ctx)
{   
    yatgFW_expr_return retval;

    /* Initialize rule variables
     */


    retval.start = LT(1); retval.stop = retval.start;

    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:28:2: ( assignment_expression | variable_decls | if_expr | while_loop | do_loop | for_loop | loop_exit | loop_continue | case_expr | struct_def | try_expr | function_def | function_return | context_expr | expr_seq )
            
            ANTLR3_UINT32 alt2;

            alt2=15;

            switch ( LA(1) ) 
            {
            case P_BOX2:
            case P_P2:
            case P_P3:
            case ARR_A:
            case ARR_BIT:
            case OPERAND:
            case SS_EQUAL:
            case SS_PLUS:
            case SS_MINUS:
            case SS_STAR:
            case SS_FSLASH:
            case SS_PERCENT:
            case DIGIT:
            case HEX_LITERAL:
            case STRING_LITERIAL:
            case SS_HASH:
            case KW_TRUE:
            case KW_FALSE:
            case KW_ON:
            case KW_OFF:
            case KW_OK:
            case KW_UNDEFINED:
            case KW_UNSUPPLIED:
            case SS_STAR_EQUAL:
            case SS_FSLASH_EQUAL:
            case SS_PERCENT_EQUAL:
            case SS_PLUS_EQUAL:
            case SS_MINUS_EQUAL:
            case SS_D_BAR:
            case SS_D_AMP:
            case SS_D_EQUAL:
            case SS_EXC_EQUAL:
            case SS_LT:
            case SS_GT:
            case SS_LT_EQUAL:
            case SS_GT_EQUAL:
            	{
            		alt2=1;
            	}
                break;
            case ESEQ:
            	{

            		{
            		    int LA2_32 = LA(2);
            		    if ( (synpred2_yatgFW(ctx)) ) 
            		    {
            		        alt2=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt2=15;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 2;
            		        EXCEPTION->state        = 32;


            		        goto ruleexprEx;
            		    }
            		}
            	}
                break;
            case VDECL:
            	{
            		alt2=2;
            	}
                break;
            case EIF:
            	{
            		alt2=3;
            	}
                break;
            case EWHILE:
            	{
            		alt2=4;
            	}
                break;
            case EDO:
            	{
            		alt2=5;
            	}
                break;
            case EFOR:
            	{
            		alt2=6;
            	}
                break;
            case LP_EXIT:
            	{
            		alt2=7;
            	}
                break;
            case LP_CONT:
            	{
            		alt2=8;
            	}
                break;
            case CASE:
            	{
            		alt2=9;
            	}
                break;
            case STRUCT:
            	{
            		alt2=10;
            	}
                break;
            case ETRY:
            	{
            		alt2=11;
            	}
                break;
            case FUN_DEF:
            	{
            		alt2=12;
            	}
                break;
            case RETURN:
            	{
            		alt2=13;
            	}
                break;
            case CONTEXT:
            	{
            		alt2=14;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto ruleexprEx;
            }

            switch (alt2) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:28:4: assignment_expression
        	    {
        	        FOLLOWPUSH(FOLLOW_assignment_expression_in_expr108);
        	        assignment_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:29:4: variable_decls
        	    {
        	        FOLLOWPUSH(FOLLOW_variable_decls_in_expr113);
        	        variable_decls(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 3:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:30:8: if_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_if_expr_in_expr122);
        	        if_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 4:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:31:8: while_loop
        	    {
        	        FOLLOWPUSH(FOLLOW_while_loop_in_expr131);
        	        while_loop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 5:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:32:8: do_loop
        	    {
        	        FOLLOWPUSH(FOLLOW_do_loop_in_expr140);
        	        do_loop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 6:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:33:8: for_loop
        	    {
        	        FOLLOWPUSH(FOLLOW_for_loop_in_expr149);
        	        for_loop(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 7:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:34:8: loop_exit
        	    {
        	        FOLLOWPUSH(FOLLOW_loop_exit_in_expr158);
        	        loop_exit(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 8:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:35:8: loop_continue
        	    {
        	        FOLLOWPUSH(FOLLOW_loop_continue_in_expr167);
        	        loop_continue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 9:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:36:8: case_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_case_expr_in_expr176);
        	        case_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 10:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:37:8: struct_def
        	    {
        	        FOLLOWPUSH(FOLLOW_struct_def_in_expr185);
        	        struct_def(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 11:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:38:8: try_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_try_expr_in_expr194);
        	        try_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 12:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:39:8: function_def
        	    {
        	        FOLLOWPUSH(FOLLOW_function_def_in_expr203);
        	        function_def(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 13:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:40:8: function_return
        	    {
        	        FOLLOWPUSH(FOLLOW_function_return_in_expr212);
        	        function_return(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 14:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:41:8: context_expr
        	    {
        	        FOLLOWPUSH(FOLLOW_context_expr_in_expr221);
        	        context_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 15:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:42:8: expr_seq
        	    {
        	        FOLLOWPUSH(FOLLOW_expr_seq_in_expr230);
        	        expr_seq(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end expr */

/** 
 * $ANTLR start variable_decls
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:45:1: variable_decls : ^( VDECL type_decl ( decl )+ ) ;
 */
static void
variable_decls(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:46:2: ( ^( VDECL type_decl ( decl )+ ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:47:5: ^( VDECL type_decl ( decl )+ )
        {
             MATCHT(VDECL, &FOLLOW_VDECL_in_variable_decls257); 
            if  (HASEXCEPTION())
            {
                goto rulevariable_declsEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariable_declsEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_type_decl_in_variable_decls259);
            type_decl(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariable_declsEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:47:24: ( decl )+
            {
                int cnt3=0;

                for (;;)
                {
                    int alt3=2;
            	switch ( LA(1) ) 
            	{
            	case VDEF:
            		{
            			alt3=1;
            		}
            	    break;

            	}

            	switch (alt3) 
            	{
            	    case 1:
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:0:0: decl
            	        {
            	            FOLLOWPUSH(FOLLOW_decl_in_variable_decls261);
            	            decl(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulevariable_declsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt3 >= 1 )
            		{
            		    goto loop3;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE;
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulevariable_declsEx;
            	}
            	cnt3++;
                }
                loop3: ;	/* Jump to here if this rule does not match */
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulevariable_declsEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariable_declsEx; /* Prevent compiler warnings */
    rulevariable_declsEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end variable_decls */

/** 
 * $ANTLR start type_decl
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:50:1: type_decl : ( KW_LOCAL | KW_GLOBAL );
 */
static void
type_decl(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:51:2: ( KW_LOCAL | KW_GLOBAL )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:
        {
            if ( ((LA(1) >= KW_LOCAL) && (LA(1) <= KW_GLOBAL)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_type_decl0);    goto ruletype_declEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletype_declEx; /* Prevent compiler warnings */
    ruletype_declEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end type_decl */

/** 
 * $ANTLR start decl
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:53:1: decl : ( ^( VDEF k= IDENTIFIER ( ^( VVAL y= expr_g ) ) ) | ^( VDEF IDENTIFIER ) );
 */
static void
decl(pyatgFW ctx)
{   
    pANTLR3_BASE_TREE    k;
    yatgFW_expr_g_return y;
    #undef	RETURN_TYPE_y
    #define	RETURN_TYPE_y yatgFW_expr_g_return

    /* Initialize rule variables
     */


    k       = NULL;

    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:54:2: ( ^( VDEF k= IDENTIFIER ( ^( VVAL y= expr_g ) ) ) | ^( VDEF IDENTIFIER ) )
            
            ANTLR3_UINT32 alt4;

            alt4=2;

            switch ( LA(1) ) 
            {
            case VDEF:
            	{
            		switch ( LA(2) ) 
            		{
            		case DOWN:
            			{
            				switch ( LA(3) ) 
            				{
            				case IDENTIFIER:
            					{
            						switch ( LA(4) ) 
            						{
            						case UP:
            							{
            								alt4=2;
            							}
            						    break;
            						case VVAL:
            							{
            								alt4=1;
            							}
            						    break;

            						default:
            						    if (BACKTRACKING>0)
            						    {
            						        FAILEDFLAG = ANTLR3_TRUE;
            						        return ;
            						    }
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 4;
            						    EXCEPTION->state        = 3;


            						    goto ruledeclEx;
            						}

            					}
            				    break;

            				default:
            				    if (BACKTRACKING>0)
            				    {
            				        FAILEDFLAG = ANTLR3_TRUE;
            				        return ;
            				    }
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 4;
            				    EXCEPTION->state        = 2;


            				    goto ruledeclEx;
            				}

            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return ;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 4;
            		    EXCEPTION->state        = 1;


            		    goto ruledeclEx;
            		}

            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto ruledeclEx;
            }

            switch (alt4) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:55:6: ^( VDEF k= IDENTIFIER ( ^( VVAL y= expr_g ) ) )
        	    {
        	         MATCHT(VDEF, &FOLLOW_VDEF_in_decl297); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        k = (pANTLR3_BASE_TREE) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_decl301); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:55:27: ( ^( VVAL y= expr_g ) )
        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:55:28: ^( VVAL y= expr_g )
        	        {
        	             MATCHT(VVAL, &FOLLOW_VVAL_in_decl305); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruledeclEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruledeclEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	            FOLLOWPUSH(FOLLOW_expr_g_in_decl309);
        	            y=expr_g(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruledeclEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruledeclEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	        }


        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:56:6: ^( VDEF IDENTIFIER )
        	    {
        	         MATCHT(VDEF, &FOLLOW_VDEF_in_decl321); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_decl323); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledeclEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruledeclEx; /* Prevent compiler warnings */
    ruledeclEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end decl */

/** 
 * $ANTLR start if_expr
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:59:1: if_expr : ^(j= EIF ^( EIF_COND c= expr_g ) ) ;
 */
static void
if_expr(pyatgFW ctx)
{   
    pANTLR3_BASE_TREE    j;
    yatgFW_expr_g_return c;
    #undef	RETURN_TYPE_c
    #define	RETURN_TYPE_c yatgFW_expr_g_return

    /* Initialize rule variables
     */


    j       = NULL;

    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:60:2: ( ^(j= EIF ^( EIF_COND c= expr_g ) ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:61:4: ^(j= EIF ^( EIF_COND c= expr_g ) )
        {
            j = (pANTLR3_BASE_TREE) MATCHT(EIF, &FOLLOW_EIF_in_if_expr343); 
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(EIF_COND, &FOLLOW_EIF_COND_in_if_expr346); 
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_if_expr351);
            c=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                ZInterp::IfExpr::Exec(j,(c.start),ctx);
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleif_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleif_exprEx; /* Prevent compiler warnings */
    ruleif_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end if_expr */

/** 
 * $ANTLR start while_loop
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:65:1: while_loop : ^(j= EWHILE ^( EWHILE_CON c= expr_g ) ) ;
 */
static void
while_loop(pyatgFW ctx)
{   
    pANTLR3_BASE_TREE    j;
    yatgFW_expr_g_return c;
    #undef	RETURN_TYPE_c
    #define	RETURN_TYPE_c yatgFW_expr_g_return

    /* Initialize rule variables
     */


    j       = NULL;

    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:66:2: ( ^(j= EWHILE ^( EWHILE_CON c= expr_g ) ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:67:4: ^(j= EWHILE ^( EWHILE_CON c= expr_g ) )
        {
            j = (pANTLR3_BASE_TREE) MATCHT(EWHILE, &FOLLOW_EWHILE_in_while_loop382); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(EWHILE_CON, &FOLLOW_EWHILE_CON_in_while_loop385); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_while_loop390);
            c=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                ZInterp::WhileExpr::Exec(j,(c.start),ctx);
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhile_loopEx; /* Prevent compiler warnings */
    rulewhile_loopEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end while_loop */

/** 
 * $ANTLR start do_loop
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:70:1: do_loop : ^(j= EDO ^( EDO_CON c= expr_g ) ) ;
 */
static void
do_loop(pyatgFW ctx)
{   
    pANTLR3_BASE_TREE    j;
    yatgFW_expr_g_return c;
    #undef	RETURN_TYPE_c
    #define	RETURN_TYPE_c yatgFW_expr_g_return

    /* Initialize rule variables
     */


    j       = NULL;

    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:71:2: ( ^(j= EDO ^( EDO_CON c= expr_g ) ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:72:3: ^(j= EDO ^( EDO_CON c= expr_g ) )
        {
            j = (pANTLR3_BASE_TREE) MATCHT(EDO, &FOLLOW_EDO_in_do_loop414); 
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(EDO_CON, &FOLLOW_EDO_CON_in_do_loop417); 
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_do_loop423);
            c=expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                 ZInterp::DoExpr::Exec(j,(c.start),ctx);
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruledo_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledo_loopEx; /* Prevent compiler warnings */
    ruledo_loopEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end do_loop */

/** 
 * $ANTLR start for_loop
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:75:1: for_loop : ^(j= EFOR IDENTIFIER ^( EFOR_SRC c= source ) ) ;
 */
static void
for_loop(pyatgFW ctx)
{   
    pANTLR3_BASE_TREE    j;
    yatgFW_source_return c;
    #undef	RETURN_TYPE_c
    #define	RETURN_TYPE_c yatgFW_source_return

    /* Initialize rule variables
     */


    j       = NULL;

    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:76:2: ( ^(j= EFOR IDENTIFIER ^( EFOR_SRC c= source ) ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:77:4: ^(j= EFOR IDENTIFIER ^( EFOR_SRC c= source ) )
        {
            j = (pANTLR3_BASE_TREE) MATCHT(EFOR, &FOLLOW_EFOR_in_for_loop448); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_for_loop450); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(EFOR_SRC, &FOLLOW_EFOR_SRC_in_for_loop453); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_source_in_for_loop458);
            c=source(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                ZInterp::ForExpr::Exec(j,(c.start),ctx); 
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefor_loopEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefor_loopEx; /* Prevent compiler warnings */
    rulefor_loopEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end for_loop */

/** 
 * $ANTLR start source
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:80:1: source : ^( ESRC_START expr_g ) ( ^( ESRC_TO expr_g ) )? ( ^( ESRC_BY expr_g ) )? ( ^( ESRC_WHERE expr_g ) )? ;
 */
static yatgFW_source_return
source(pyatgFW ctx)
{   
    yatgFW_source_return retval;

    /* Initialize rule variables
     */


    retval.start = LT(1); retval.stop = retval.start;

    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:81:2: ( ^( ESRC_START expr_g ) ( ^( ESRC_TO expr_g ) )? ( ^( ESRC_BY expr_g ) )? ( ^( ESRC_WHERE expr_g ) )? )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:82:4: ^( ESRC_START expr_g ) ( ^( ESRC_TO expr_g ) )? ( ^( ESRC_BY expr_g ) )? ( ^( ESRC_WHERE expr_g ) )?
        {
             MATCHT(ESRC_START, &FOLLOW_ESRC_START_in_source481); 
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_source483);
            expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulesourceEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:82:25: ( ^( ESRC_TO expr_g ) )?
            {
                int alt5=2;
                switch ( LA(1) ) 
                {
                    case ESRC_TO:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:82:26: ^( ESRC_TO expr_g )
            	    {
            	         MATCHT(ESRC_TO, &FOLLOW_ESRC_TO_in_source488); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_expr_g_in_source490);
            	        expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	    }
            	    break;

                }
            }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:82:46: ( ^( ESRC_BY expr_g ) )?
            {
                int alt6=2;
                switch ( LA(1) ) 
                {
                    case ESRC_BY:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:82:47: ^( ESRC_BY expr_g )
            	    {
            	         MATCHT(ESRC_BY, &FOLLOW_ESRC_BY_in_source497); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_expr_g_in_source499);
            	        expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	    }
            	    break;

                }
            }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:82:67: ( ^( ESRC_WHERE expr_g ) )?
            {
                int alt7=2;
                switch ( LA(1) ) 
                {
                    case ESRC_WHERE:
                    	{
                    		alt7=1;
                    	}
                        break;
                }

                switch (alt7) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:82:68: ^( ESRC_WHERE expr_g )
            	    {
            	         MATCHT(ESRC_WHERE, &FOLLOW_ESRC_WHERE_in_source506); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        FOLLOWPUSH(FOLLOW_expr_g_in_source508);
            	        expr_g(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceEx; /* Prevent compiler warnings */
    rulesourceEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end source */

/** 
 * $ANTLR start loop_exit
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:85:1: loop_exit : ^(j= LP_EXIT ) ;
 */
static void
loop_exit(pyatgFW ctx)
{   
    pANTLR3_BASE_TREE    j;

    /* Initialize rule variables
     */


    j       = NULL;

    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:86:2: ( ^(j= LP_EXIT ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:87:4: ^(j= LP_EXIT )
        {
            j = (pANTLR3_BASE_TREE) MATCHT(LP_EXIT, &FOLLOW_LP_EXIT_in_loop_exit533); 
            if  (HASEXCEPTION())
            {
                goto ruleloop_exitEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {
                 ZInterp :: EXIT :: Exec ( j , ctx ) ; 
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleloop_exitEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleloop_exitEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleloop_exitEx; /* Prevent compiler warnings */
    ruleloop_exitEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end loop_exit */

/** 
 * $ANTLR start loop_continue
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:90:1: loop_continue : j= LP_CONT ;
 */
static void
loop_continue(pyatgFW ctx)
{   
    pANTLR3_BASE_TREE    j;

    /* Initialize rule variables
     */


    j       = NULL;

    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:91:3: (j= LP_CONT )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:92:4: j= LP_CONT
        {
            j = (pANTLR3_BASE_TREE) MATCHT(LP_CONT, &FOLLOW_LP_CONT_in_loop_continue556); 
            if  (HASEXCEPTION())
            {
                goto ruleloop_continueEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {
                 ZInterp :: CONTINUE :: Exec ( j , ctx ) ; 
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleloop_continueEx; /* Prevent compiler warnings */
    ruleloop_continueEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end loop_continue */

/** 
 * $ANTLR start case_expr
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:95:1: case_expr : ^(j= CASE ( ^( CASE_Exp expr_g ) )? ) ;
 */
static void
case_expr(pyatgFW ctx)
{   
    pANTLR3_BASE_TREE    j;

    /* Initialize rule variables
     */


    j       = NULL;

    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:96:3: ( ^(j= CASE ( ^( CASE_Exp expr_g ) )? ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:97:4: ^(j= CASE ( ^( CASE_Exp expr_g ) )? )
        {
            j = (pANTLR3_BASE_TREE) MATCHT(CASE, &FOLLOW_CASE_in_case_expr578); 
            if  (HASEXCEPTION())
            {
                goto rulecase_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulecase_exprEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:97:14: ( ^( CASE_Exp expr_g ) )?
                {
                    int alt8=2;
                    switch ( LA(1) ) 
                    {
                        case CASE_Exp:
                        	{
                        		alt8=1;
                        	}
                            break;
                    }

                    switch (alt8) 
                    {
                	case 1:
                	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:97:15: ^( CASE_Exp expr_g )
                	    {
                	         MATCHT(CASE_Exp, &FOLLOW_CASE_Exp_in_case_expr582); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecase_exprEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecase_exprEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }
                	        FOLLOWPUSH(FOLLOW_expr_g_in_case_expr584);
                	        expr_g(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecase_exprEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecase_exprEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }
                if ( BACKTRACKING==0 ) 
                {
                    ZInterp::CaseExpr::Exec( j , ctx );
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulecase_exprEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecase_exprEx; /* Prevent compiler warnings */
    rulecase_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end case_expr */

/** 
 * $ANTLR start case_item
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:100:1: case_item : ( ^( CASE_Item constant expr_g ) | ^( CASE_Item DEFAULT expr_g ) );
 */
static void
case_item(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:101:2: ( ^( CASE_Item constant expr_g ) | ^( CASE_Item DEFAULT expr_g ) )
            
            ANTLR3_UINT32 alt9;

            alt9=2;

            switch ( LA(1) ) 
            {
            case CASE_Item:
            	{
            		switch ( LA(2) ) 
            		{
            		case DOWN:
            			{
            				switch ( LA(3) ) 
            				{
            				case DEFAULT:
            					{
            						alt9=2;
            					}
            				    break;
            				case ESEQ:
            				case P_BOX2:
            				case P_P2:
            				case P_P3:
            				case ARR_A:
            				case ARR_BIT:
            				case SS_MINUS:
            				case DIGIT:
            				case HEX_LITERAL:
            				case STRING_LITERIAL:
            				case SS_HASH:
            				case KW_TRUE:
            				case KW_FALSE:
            				case KW_ON:
            				case KW_OFF:
            				case KW_OK:
            				case KW_UNDEFINED:
            				case KW_UNSUPPLIED:
            					{
            						alt9=1;
            					}
            				    break;

            				default:
            				    if (BACKTRACKING>0)
            				    {
            				        FAILEDFLAG = ANTLR3_TRUE;
            				        return ;
            				    }
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 9;
            				    EXCEPTION->state        = 2;


            				    goto rulecase_itemEx;
            				}

            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return ;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 9;
            		    EXCEPTION->state        = 1;


            		    goto rulecase_itemEx;
            		}

            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto rulecase_itemEx;
            }

            switch (alt9) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:101:6: ^( CASE_Item constant expr_g )
        	    {
        	         MATCHT(CASE_Item, &FOLLOW_CASE_Item_in_case_item605); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_constant_in_case_item608);
        	        constant(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expr_g_in_case_item610);
        	        expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:102:6: ^( CASE_Item DEFAULT expr_g )
        	    {
        	         MATCHT(CASE_Item, &FOLLOW_CASE_Item_in_case_item619); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(DEFAULT, &FOLLOW_DEFAULT_in_case_item623); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expr_g_in_case_item625);
        	        expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecase_itemEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecase_itemEx; /* Prevent compiler warnings */
    rulecase_itemEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end case_item */

/** 
 * $ANTLR start struct_def
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:105:1: struct_def : ^( STRUCT ( member )+ ) ;
 */
static void
struct_def(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:106:2: ( ^( STRUCT ( member )+ ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:107:3: ^( STRUCT ( member )+ )
        {
             MATCHT(STRUCT, &FOLLOW_STRUCT_in_struct_def643); 
            if  (HASEXCEPTION())
            {
                goto rulestruct_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulestruct_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:107:13: ( member )+
            {
                int cnt10=0;

                for (;;)
                {
                    int alt10=2;
            	switch ( LA(1) ) 
            	{
            	case MEMBER:
            	case FUN_DEF:
            		{
            			alt10=1;
            		}
            	    break;

            	}

            	switch (alt10) 
            	{
            	    case 1:
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:0:0: member
            	        {
            	            FOLLOWPUSH(FOLLOW_member_in_struct_def645);
            	            member(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulestruct_defEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt10 >= 1 )
            		{
            		    goto loop10;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE;
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulestruct_defEx;
            	}
            	cnt10++;
                }
                loop10: ;	/* Jump to here if this rule does not match */
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulestruct_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestruct_defEx; /* Prevent compiler warnings */
    rulestruct_defEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end struct_def */

/** 
 * $ANTLR start member
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:111:1: member : ( ^( MEMBER IDENTIFIER expr_g ) | function_def );
 */
static void
member(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:112:2: ( ^( MEMBER IDENTIFIER expr_g ) | function_def )
            
            ANTLR3_UINT32 alt11;

            alt11=2;

            switch ( LA(1) ) 
            {
            case MEMBER:
            	{
            		alt11=1;
            	}
                break;
            case FUN_DEF:
            	{
            		alt11=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 11;
                EXCEPTION->state        = 0;


                goto rulememberEx;
            }

            switch (alt11) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:112:6: ^( MEMBER IDENTIFIER expr_g )
        	    {
        	         MATCHT(MEMBER, &FOLLOW_MEMBER_in_member667); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_member669); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expr_g_in_member671);
        	        expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:113:7: function_def
        	    {
        	        FOLLOWPUSH(FOLLOW_function_def_in_member681);
        	        function_def(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberEx; /* Prevent compiler warnings */
    rulememberEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end member */

/** 
 * $ANTLR start try_expr
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:116:1: try_expr : ^( ETRY ( ^( ETRY_EXP expr_g ) ) ( ^( ECATCH_EXP expr_g ) ) ) ;
 */
static void
try_expr(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:117:2: ( ^( ETRY ( ^( ETRY_EXP expr_g ) ) ( ^( ECATCH_EXP expr_g ) ) ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:118:3: ^( ETRY ( ^( ETRY_EXP expr_g ) ) ( ^( ECATCH_EXP expr_g ) ) )
        {
             MATCHT(ETRY, &FOLLOW_ETRY_in_try_expr699); 
            if  (HASEXCEPTION())
            {
                goto ruletry_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruletry_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:118:10: ( ^( ETRY_EXP expr_g ) )
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:118:11: ^( ETRY_EXP expr_g )
            {
                 MATCHT(ETRY_EXP, &FOLLOW_ETRY_EXP_in_try_expr703); 
                if  (HASEXCEPTION())
                {
                    goto ruletry_exprEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruletry_exprEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                FOLLOWPUSH(FOLLOW_expr_g_in_try_expr705);
                expr_g(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletry_exprEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruletry_exprEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:118:30: ( ^( ECATCH_EXP expr_g ) )
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:118:31: ^( ECATCH_EXP expr_g )
            {
                 MATCHT(ECATCH_EXP, &FOLLOW_ECATCH_EXP_in_try_expr710); 
                if  (HASEXCEPTION())
                {
                    goto ruletry_exprEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruletry_exprEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                FOLLOWPUSH(FOLLOW_expr_g_in_try_expr713);
                expr_g(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletry_exprEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruletry_exprEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }


            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruletry_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletry_exprEx; /* Prevent compiler warnings */
    ruletry_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end try_expr */

/** 
 * $ANTLR start function_def
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:121:1: function_def : ^(t= FUN_DEF ^( FUN_NAME IDENTIFIER ) ^( ARG_EXPR_L ( argument_expression_list )* ) ) ;
 */
static void
function_def(pyatgFW ctx)
{   
    pANTLR3_BASE_TREE    t;

    /* Initialize rule variables
     */


    t       = NULL;

    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:122:2: ( ^(t= FUN_DEF ^( FUN_NAME IDENTIFIER ) ^( ARG_EXPR_L ( argument_expression_list )* ) ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:123:2: ^(t= FUN_DEF ^( FUN_NAME IDENTIFIER ) ^( ARG_EXPR_L ( argument_expression_list )* ) )
        {
            t = (pANTLR3_BASE_TREE) MATCHT(FUN_DEF, &FOLLOW_FUN_DEF_in_function_def735); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(FUN_NAME, &FOLLOW_FUN_NAME_in_function_def738); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_function_def740); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }
             MATCHT(ARG_EXPR_L, &FOLLOW_ARG_EXPR_L_in_function_def744); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulefunction_defEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:123:52: ( argument_expression_list )*

                for (;;)
                {
                    int alt12=2;
                    switch ( LA(1) ) 
                    {
                    case IDENTIFIER:
                    	{
                    		alt12=1;
                    	}
                        break;

                    }

                    switch (alt12) 
                    {
                	case 1:
                	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:123:54: argument_expression_list
                	    {
                	        FOLLOWPUSH(FOLLOW_argument_expression_list_in_function_def748);
                	        argument_expression_list(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulefunction_defEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                	default:
                	    goto loop12;	/* break out of the loop */
                	    break;
                    }
                }
                loop12: ; /* Jump out to here if this rule does not match */


                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto rulefunction_defEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }
            if ( BACKTRACKING==0 ) 
            {
                 ZInterp::Function::Defination(t,ctx); 
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_defEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunction_defEx; /* Prevent compiler warnings */
    rulefunction_defEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end function_def */

/** 
 * $ANTLR start fun
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:126:1: fun : ( KW_FUNCTION | KW_FN );
 */
static void
fun(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:127:2: ( KW_FUNCTION | KW_FN )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:
        {
            if ( ((LA(1) >= KW_FUNCTION) && (LA(1) <= KW_FN)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_fun0);    goto rulefunEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunEx; /* Prevent compiler warnings */
    rulefunEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end fun */

/** 
 * $ANTLR start function_return
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:130:1: function_return : ^( RETURN expr_g ) ;
 */
static void
function_return(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:131:2: ( ^( RETURN expr_g ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:132:3: ^( RETURN expr_g )
        {
             MATCHT(RETURN, &FOLLOW_RETURN_in_function_return791); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_returnEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_returnEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_function_return793);
            expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunction_returnEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_returnEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunction_returnEx; /* Prevent compiler warnings */
    rulefunction_returnEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end function_return */

/** 
 * $ANTLR start context_expr
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:135:1: context_expr : ^( CONTEXT ( context )+ expr_g ) ;
 */
static void
context_expr(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:136:2: ( ^( CONTEXT ( context )+ expr_g ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:137:3: ^( CONTEXT ( context )+ expr_g )
        {
             MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context_expr810); 
            if  (HASEXCEPTION())
            {
                goto rulecontext_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecontext_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:137:13: ( context )+
            {
                int cnt13=0;

                for (;;)
                {
                    int alt13=2;
            	switch ( LA(1) ) 
            	{
            	case CONTEXT:
            		{
            			switch ( LA(2) ) 
            			{
            			case DOWN:
            				{
            					switch ( LA(3) ) 
            					{
            					case ANIMATE:
            					case UNDO:
            					case EIN:
            					case AT:
            						{
            							alt13=1;
            						}
            					    break;

            					}

            				}
            			    break;

            			}

            		}
            	    break;
            	case KW_IN:
            	case KW_COORDSYS:
            	case KW_ABOUT:
            		{
            			alt13=1;
            		}
            	    break;

            	}

            	switch (alt13) 
            	{
            	    case 1:
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:0:0: context
            	        {
            	            FOLLOWPUSH(FOLLOW_context_in_context_expr812);
            	            context(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulecontext_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt13 >= 1 )
            		{
            		    goto loop13;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE;
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulecontext_exprEx;
            	}
            	cnt13++;
                }
                loop13: ;	/* Jump to here if this rule does not match */
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_context_expr815);
            expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecontext_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulecontext_exprEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontext_exprEx; /* Prevent compiler warnings */
    rulecontext_exprEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end context_expr */

/** 
 * $ANTLR start context
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:140:1: context : ( ^( CONTEXT ANIMATE cexprx ) | ^( CONTEXT AT LEVEL operand ) | ^( CONTEXT AT TIME operand ) | ^( CONTEXT EIN operand ) | ( KW_IN )? KW_COORDSYS ( ^( CONTEXT COORDSYS LOCAL ) | ^( CONTEXT COORDSYS WORLD ) | ^( CONTEXT COORDSYS PARENT ) | ^( CONTEXT COORDSYS operand ) ) | KW_ABOUT ( ^( CONTEXT ABOUT PIVOT ) | ^( CONTEXT ABOUT SELECTION ) | ^( CONTEXT ABOUT COORDSYS ) | ^( CONTEXT ABOUT operand ) ) | ^( CONTEXT UNDO cexprx ) );
 */
static void
context(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:141:2: ( ^( CONTEXT ANIMATE cexprx ) | ^( CONTEXT AT LEVEL operand ) | ^( CONTEXT AT TIME operand ) | ^( CONTEXT EIN operand ) | ( KW_IN )? KW_COORDSYS ( ^( CONTEXT COORDSYS LOCAL ) | ^( CONTEXT COORDSYS WORLD ) | ^( CONTEXT COORDSYS PARENT ) | ^( CONTEXT COORDSYS operand ) ) | KW_ABOUT ( ^( CONTEXT ABOUT PIVOT ) | ^( CONTEXT ABOUT SELECTION ) | ^( CONTEXT ABOUT COORDSYS ) | ^( CONTEXT ABOUT operand ) ) | ^( CONTEXT UNDO cexprx ) )
            
            ANTLR3_UINT32 alt17;

            alt17=7;

            switch ( LA(1) ) 
            {
            case CONTEXT:
            	{
            		switch ( LA(2) ) 
            		{
            		case DOWN:
            			{
            				switch ( LA(3) ) 
            				{
            				case ANIMATE:
            					{
            						alt17=1;
            					}
            				    break;
            				case AT:
            					{
            						switch ( LA(4) ) 
            						{
            						case LEVEL:
            							{
            								alt17=2;
            							}
            						    break;
            						case TIME:
            							{
            								alt17=3;
            							}
            						    break;

            						default:
            						    if (BACKTRACKING>0)
            						    {
            						        FAILEDFLAG = ANTLR3_TRUE;
            						        return ;
            						    }
            						    CONSTRUCTEX();
            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            						    EXCEPTION->message      = (void *)"";
            						    EXCEPTION->decisionNum  = 17;
            						    EXCEPTION->state        = 6;


            						    goto rulecontextEx;
            						}

            					}
            				    break;
            				case EIN:
            					{
            						alt17=4;
            					}
            				    break;
            				case UNDO:
            					{
            						alt17=7;
            					}
            				    break;

            				default:
            				    if (BACKTRACKING>0)
            				    {
            				        FAILEDFLAG = ANTLR3_TRUE;
            				        return ;
            				    }
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 17;
            				    EXCEPTION->state        = 4;


            				    goto rulecontextEx;
            				}

            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return ;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 17;
            		    EXCEPTION->state        = 1;


            		    goto rulecontextEx;
            		}

            	}
                break;
            case KW_IN:
            case KW_COORDSYS:
            	{
            		alt17=5;
            	}
                break;
            case KW_ABOUT:
            	{
            		alt17=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 17;
                EXCEPTION->state        = 0;


                goto rulecontextEx;
            }

            switch (alt17) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:141:5: ^( CONTEXT ANIMATE cexprx )
        	    {
        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context830); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(ANIMATE, &FOLLOW_ANIMATE_in_context833); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_cexprx_in_context835);
        	        cexprx(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:142:6: ^( CONTEXT AT LEVEL operand )
        	    {
        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context844); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(AT, &FOLLOW_AT_in_context846); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(LEVEL, &FOLLOW_LEVEL_in_context848); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_operand_in_context850);
        	        operand(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 3:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:143:5: ^( CONTEXT AT TIME operand )
        	    {
        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context858); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(AT, &FOLLOW_AT_in_context860); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(TIME, &FOLLOW_TIME_in_context862); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_operand_in_context864);
        	        operand(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:144:5: ^( CONTEXT EIN operand )
        	    {
        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context872); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(EIN, &FOLLOW_EIN_in_context874); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_operand_in_context876);
        	        operand(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:145:4: ( KW_IN )? KW_COORDSYS ( ^( CONTEXT COORDSYS LOCAL ) | ^( CONTEXT COORDSYS WORLD ) | ^( CONTEXT COORDSYS PARENT ) | ^( CONTEXT COORDSYS operand ) )
        	    {

        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:145:4: ( KW_IN )?
        	        {
        	            int alt14=2;
        	            switch ( LA(1) ) 
        	            {
        	                case KW_IN:
        	                	{
        	                		alt14=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt14) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:145:5: KW_IN
        	        	    {
        	        	         MATCHT(KW_IN, &FOLLOW_KW_IN_in_context883); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	         MATCHT(KW_COORDSYS, &FOLLOW_KW_COORDSYS_in_context887); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:146:3: ( ^( CONTEXT COORDSYS LOCAL ) | ^( CONTEXT COORDSYS WORLD ) | ^( CONTEXT COORDSYS PARENT ) | ^( CONTEXT COORDSYS operand ) )
        	        {
        	            int alt15=4;
        	            switch ( LA(1) ) 
        	            {
        	            case CONTEXT:
        	            	{
        	            		switch ( LA(2) ) 
        	            		{
        	            		case DOWN:
        	            			{
        	            				switch ( LA(3) ) 
        	            				{
        	            				case COORDSYS:
        	            					{
        	            						switch ( LA(4) ) 
        	            						{
        	            						case LOCAL:
        	            							{
        	            								alt15=1;
        	            							}
        	            						    break;
        	            						case WORLD:
        	            							{
        	            								alt15=2;
        	            							}
        	            						    break;
        	            						case PARENT:
        	            							{
        	            								alt15=3;
        	            							}
        	            						    break;
        	            						case ESEQ:
        	            						case P_BOX2:
        	            						case P_P2:
        	            						case P_P3:
        	            						case ARR_A:
        	            						case ARR_BIT:
        	            						case OPERAND:
        	            						case SS_MINUS:
        	            						case DIGIT:
        	            						case HEX_LITERAL:
        	            						case STRING_LITERIAL:
        	            						case SS_HASH:
        	            						case KW_TRUE:
        	            						case KW_FALSE:
        	            						case KW_ON:
        	            						case KW_OFF:
        	            						case KW_OK:
        	            						case KW_UNDEFINED:
        	            						case KW_UNSUPPLIED:
        	            							{
        	            								alt15=4;
        	            							}
        	            						    break;

        	            						default:
        	            						    if (BACKTRACKING>0)
        	            						    {
        	            						        FAILEDFLAG = ANTLR3_TRUE;
        	            						        return ;
        	            						    }
        	            						    CONSTRUCTEX();
        	            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	            						    EXCEPTION->message      = (void *)"";
        	            						    EXCEPTION->decisionNum  = 15;
        	            						    EXCEPTION->state        = 3;


        	            						    goto rulecontextEx;
        	            						}

        	            					}
        	            				    break;

        	            				default:
        	            				    if (BACKTRACKING>0)
        	            				    {
        	            				        FAILEDFLAG = ANTLR3_TRUE;
        	            				        return ;
        	            				    }
        	            				    CONSTRUCTEX();
        	            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	            				    EXCEPTION->message      = (void *)"";
        	            				    EXCEPTION->decisionNum  = 15;
        	            				    EXCEPTION->state        = 2;


        	            				    goto rulecontextEx;
        	            				}

        	            			}
        	            		    break;

        	            		default:
        	            		    if (BACKTRACKING>0)
        	            		    {
        	            		        FAILEDFLAG = ANTLR3_TRUE;
        	            		        return ;
        	            		    }
        	            		    CONSTRUCTEX();
        	            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	            		    EXCEPTION->message      = (void *)"";
        	            		    EXCEPTION->decisionNum  = 15;
        	            		    EXCEPTION->state        = 1;


        	            		    goto rulecontextEx;
        	            		}

        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 15;
        	                EXCEPTION->state        = 0;


        	                goto rulecontextEx;
        	            }

        	            switch (alt15) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:147:7: ^( CONTEXT COORDSYS LOCAL )
        	        	    {
        	        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context901); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(COORDSYS, &FOLLOW_COORDSYS_in_context904); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(LOCAL, &FOLLOW_LOCAL_in_context906); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:148:7: ^( CONTEXT COORDSYS WORLD )
        	        	    {
        	        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context916); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(COORDSYS, &FOLLOW_COORDSYS_in_context919); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(WORLD, &FOLLOW_WORLD_in_context921); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:149:7: ^( CONTEXT COORDSYS PARENT )
        	        	    {
        	        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context931); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(COORDSYS, &FOLLOW_COORDSYS_in_context933); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(PARENT, &FOLLOW_PARENT_in_context935); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:150:7: ^( CONTEXT COORDSYS operand )
        	        	    {
        	        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context945); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(COORDSYS, &FOLLOW_COORDSYS_in_context947); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_operand_in_context949);
        	        	        operand(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 6:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:152:4: KW_ABOUT ( ^( CONTEXT ABOUT PIVOT ) | ^( CONTEXT ABOUT SELECTION ) | ^( CONTEXT ABOUT COORDSYS ) | ^( CONTEXT ABOUT operand ) )
        	    {
        	         MATCHT(KW_ABOUT, &FOLLOW_KW_ABOUT_in_context961); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:153:3: ( ^( CONTEXT ABOUT PIVOT ) | ^( CONTEXT ABOUT SELECTION ) | ^( CONTEXT ABOUT COORDSYS ) | ^( CONTEXT ABOUT operand ) )
        	        {
        	            int alt16=4;
        	            switch ( LA(1) ) 
        	            {
        	            case CONTEXT:
        	            	{
        	            		switch ( LA(2) ) 
        	            		{
        	            		case DOWN:
        	            			{
        	            				switch ( LA(3) ) 
        	            				{
        	            				case ABOUT:
        	            					{
        	            						switch ( LA(4) ) 
        	            						{
        	            						case PIVOT:
        	            							{
        	            								alt16=1;
        	            							}
        	            						    break;
        	            						case SELECTION:
        	            							{
        	            								alt16=2;
        	            							}
        	            						    break;
        	            						case COORDSYS:
        	            							{
        	            								alt16=3;
        	            							}
        	            						    break;
        	            						case ESEQ:
        	            						case P_BOX2:
        	            						case P_P2:
        	            						case P_P3:
        	            						case ARR_A:
        	            						case ARR_BIT:
        	            						case OPERAND:
        	            						case SS_MINUS:
        	            						case DIGIT:
        	            						case HEX_LITERAL:
        	            						case STRING_LITERIAL:
        	            						case SS_HASH:
        	            						case KW_TRUE:
        	            						case KW_FALSE:
        	            						case KW_ON:
        	            						case KW_OFF:
        	            						case KW_OK:
        	            						case KW_UNDEFINED:
        	            						case KW_UNSUPPLIED:
        	            							{
        	            								alt16=4;
        	            							}
        	            						    break;

        	            						default:
        	            						    if (BACKTRACKING>0)
        	            						    {
        	            						        FAILEDFLAG = ANTLR3_TRUE;
        	            						        return ;
        	            						    }
        	            						    CONSTRUCTEX();
        	            						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	            						    EXCEPTION->message      = (void *)"";
        	            						    EXCEPTION->decisionNum  = 16;
        	            						    EXCEPTION->state        = 3;


        	            						    goto rulecontextEx;
        	            						}

        	            					}
        	            				    break;

        	            				default:
        	            				    if (BACKTRACKING>0)
        	            				    {
        	            				        FAILEDFLAG = ANTLR3_TRUE;
        	            				        return ;
        	            				    }
        	            				    CONSTRUCTEX();
        	            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	            				    EXCEPTION->message      = (void *)"";
        	            				    EXCEPTION->decisionNum  = 16;
        	            				    EXCEPTION->state        = 2;


        	            				    goto rulecontextEx;
        	            				}

        	            			}
        	            		    break;

        	            		default:
        	            		    if (BACKTRACKING>0)
        	            		    {
        	            		        FAILEDFLAG = ANTLR3_TRUE;
        	            		        return ;
        	            		    }
        	            		    CONSTRUCTEX();
        	            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	            		    EXCEPTION->message      = (void *)"";
        	            		    EXCEPTION->decisionNum  = 16;
        	            		    EXCEPTION->state        = 1;


        	            		    goto rulecontextEx;
        	            		}

        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 16;
        	                EXCEPTION->state        = 0;


        	                goto rulecontextEx;
        	            }

        	            switch (alt16) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:153:6: ^( CONTEXT ABOUT PIVOT )
        	        	    {
        	        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context970); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(ABOUT, &FOLLOW_ABOUT_in_context972); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(PIVOT, &FOLLOW_PIVOT_in_context974); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:154:8: ^( CONTEXT ABOUT SELECTION )
        	        	    {
        	        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context986); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(ABOUT, &FOLLOW_ABOUT_in_context988); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(SELECTION, &FOLLOW_SELECTION_in_context990); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:155:7: ^( CONTEXT ABOUT COORDSYS )
        	        	    {
        	        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context1000); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(ABOUT, &FOLLOW_ABOUT_in_context1002); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(COORDSYS, &FOLLOW_COORDSYS_in_context1004); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:156:6: ^( CONTEXT ABOUT operand )
        	        	    {
        	        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context1013); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(ABOUT, &FOLLOW_ABOUT_in_context1015); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_operand_in_context1017);
        	        	        operand(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecontextEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 7:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:158:5: ^( CONTEXT UNDO cexprx )
        	    {
        	         MATCHT(CONTEXT, &FOLLOW_CONTEXT_in_context1029); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(UNDO, &FOLLOW_UNDO_in_context1032); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_cexprx_in_context1035);
        	        cexprx(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecontextEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecontextEx; /* Prevent compiler warnings */
    rulecontextEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end context */

/** 
 * $ANTLR start set_context
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:161:1: set_context : ^( SET context ) ;
 */
static void
set_context(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:162:2: ( ^( SET context ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:163:3: ^( SET context )
        {
             MATCHT(SET, &FOLLOW_SET_in_set_context1054); 
            if  (HASEXCEPTION())
            {
                goto ruleset_contextEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleset_contextEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_context_in_set_context1056);
            context(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleset_contextEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleset_contextEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleset_contextEx; /* Prevent compiler warnings */
    ruleset_contextEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end set_context */

/** 
 * $ANTLR start argT
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:169:1: argT : ^( IDENTIFIER ( operand )? ) ;
 */
static void
argT(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:169:6: ( ^( IDENTIFIER ( operand )? ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:170:3: ^( IDENTIFIER ( operand )? )
        {
             MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_argT1076); 
            if  (HASEXCEPTION())
            {
                goto ruleargTEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
                MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleargTEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

                // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:170:17: ( operand )?
                {
                    int alt18=2;
                    switch ( LA(1) ) 
                    {
                        case ESEQ:
                        case P_BOX2:
                        case P_P2:
                        case P_P3:
                        case ARR_A:
                        case ARR_BIT:
                        case OPERAND:
                        case SS_MINUS:
                        case DIGIT:
                        case HEX_LITERAL:
                        case STRING_LITERIAL:
                        case SS_HASH:
                        case KW_TRUE:
                        case KW_FALSE:
                        case KW_ON:
                        case KW_OFF:
                        case KW_OK:
                        case KW_UNDEFINED:
                        case KW_UNSUPPLIED:
                        	{
                        		alt18=1;
                        	}
                            break;
                    }

                    switch (alt18) 
                    {
                	case 1:
                	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:170:18: operand
                	    {
                	        FOLLOWPUSH(FOLLOW_operand_in_argT1079);
                	        operand(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruleargTEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return ;
                	        }

                	    }
                	    break;

                    }
                }

                MATCHT(ANTLR3_TOKEN_UP, NULL); 
                if  (HASEXCEPTION())
                {
                    goto ruleargTEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargTEx; /* Prevent compiler warnings */
    ruleargTEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end argT */

/** 
 * $ANTLR start argument_expression_list
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:173:1: argument_expression_list : ( argT )+ ;
 */
static void
argument_expression_list(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:174:2: ( ( argT )+ )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:175:3: ( argT )+
        {
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:175:3: ( argT )+
            {
                int cnt19=0;

                for (;;)
                {
                    int alt19=2;
            	switch ( LA(1) ) 
            	{
            	case IDENTIFIER:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA19_2 = LA(2);
            			    if ( (synpred43_yatgFW(ctx)) ) 
            			    {
            			        alt19=1;
            			    }

            			}
            		}
            	    break;

            	}

            	switch (alt19) 
            	{
            	    case 1:
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:0:0: argT
            	        {
            	            FOLLOWPUSH(FOLLOW_argT_in_argument_expression_list1098);
            	            argT(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleargument_expression_listEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt19 >= 1 )
            		{
            		    goto loop19;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE;
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleargument_expression_listEx;
            	}
            	cnt19++;
                }
                loop19: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargument_expression_listEx; /* Prevent compiler warnings */
    ruleargument_expression_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end argument_expression_list */

/** 
 * $ANTLR start unary_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:178:1: unary_expression : operand ;
 */
static void
unary_expression(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:179:2: ( operand )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:179:4: operand
        {
            FOLLOWPUSH(FOLLOW_operand_in_unary_expression1110);
            operand(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleunary_expressionEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleunary_expressionEx; /* Prevent compiler warnings */
    ruleunary_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end unary_expression */

/** 
 * $ANTLR start operand
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:182:1: operand : ( ^(t1= OPERAND IDENTIFIER ( ^(field= DOT IDENTIFIER ) | ^(elm= ARR_IND expr_g ) | ^(arg= ARG_EXPR_L ( expr_g )* ) )* ID_MORE ) | constant );
 */
static void
operand(pyatgFW ctx)
{   
    pANTLR3_BASE_TREE    t1;
    pANTLR3_BASE_TREE    field;
    pANTLR3_BASE_TREE    elm;
    pANTLR3_BASE_TREE    arg;

    /* Initialize rule variables
     */


    t1       = NULL;
    field       = NULL;
    elm       = NULL;
    arg       = NULL;

    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:183:2: ( ^(t1= OPERAND IDENTIFIER ( ^(field= DOT IDENTIFIER ) | ^(elm= ARR_IND expr_g ) | ^(arg= ARG_EXPR_L ( expr_g )* ) )* ID_MORE ) | constant )
            
            ANTLR3_UINT32 alt22;

            alt22=2;

            switch ( LA(1) ) 
            {
            case OPERAND:
            	{
            		alt22=1;
            	}
                break;
            case ESEQ:
            case P_BOX2:
            case P_P2:
            case P_P3:
            case ARR_A:
            case ARR_BIT:
            case SS_MINUS:
            case DIGIT:
            case HEX_LITERAL:
            case STRING_LITERIAL:
            case SS_HASH:
            case KW_TRUE:
            case KW_FALSE:
            case KW_ON:
            case KW_OFF:
            case KW_OK:
            case KW_UNDEFINED:
            case KW_UNSUPPLIED:
            	{
            		alt22=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 22;
                EXCEPTION->state        = 0;


                goto ruleoperandEx;
            }

            switch (alt22) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:184:2: ^(t1= OPERAND IDENTIFIER ( ^(field= DOT IDENTIFIER ) | ^(elm= ARR_IND expr_g ) | ^(arg= ARG_EXPR_L ( expr_g )* ) )* ID_MORE )
        	    {
        	        t1 = (pANTLR3_BASE_TREE) MATCHT(OPERAND, &FOLLOW_OPERAND_in_operand1130); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperandEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperandEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_operand1132); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperandEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            ZInterp::Operand::_OPERAND(t1);
        	        }

        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:185:2: ( ^(field= DOT IDENTIFIER ) | ^(elm= ARR_IND expr_g ) | ^(arg= ARG_EXPR_L ( expr_g )* ) )*

        	        for (;;)
        	        {
        	            int alt21=4;
        	            switch ( LA(1) ) 
        	            {
        	            case DOT:
        	            	{
        	            		alt21=1;
        	            	}
        	                break;
        	            case ARR_IND:
        	            	{
        	            		alt21=2;
        	            	}
        	                break;
        	            case ARG_EXPR_L:
        	            	{
        	            		alt21=3;
        	            	}
        	                break;

        	            }

        	            switch (alt21) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:186:4: ^(field= DOT IDENTIFIER )
        	        	    {
        	        	        field = (pANTLR3_BASE_TREE) MATCHT(DOT, &FOLLOW_DOT_in_operand1149); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoperandEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoperandEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	         MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_operand1151); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoperandEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoperandEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	            ZInterp::Operand::AccessObjectField(t1,field);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:187:4: ^(elm= ARR_IND expr_g )
        	        	    {
        	        	        elm = (pANTLR3_BASE_TREE) MATCHT(ARR_IND, &FOLLOW_ARR_IND_in_operand1172); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoperandEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoperandEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_expr_g_in_operand1174);
        	        	        expr_g(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoperandEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoperandEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	            ZInterp::Operand::AccessListElement(t1,elm);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:188:4: ^(arg= ARG_EXPR_L ( expr_g )* )
        	        	    {
        	        	        arg = (pANTLR3_BASE_TREE) MATCHT(ARG_EXPR_L, &FOLLOW_ARG_EXPR_L_in_operand1194); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleoperandEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruleoperandEx;
        	        	            }
        	        	            if (HASFAILED())
        	        	            {
        	        	                return ;
        	        	            }

        	        	            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:188:25: ( expr_g )*

        	        	            for (;;)
        	        	            {
        	        	                int alt20=2;
        	        	                switch ( LA(1) ) 
        	        	                {
        	        	                case VDECL:
        	        	                case ESEQ:
        	        	                case EIF:
        	        	                case EWHILE:
        	        	                case EDO:
        	        	                case EFOR:
        	        	                case P_BOX2:
        	        	                case P_P2:
        	        	                case P_P3:
        	        	                case ARR_A:
        	        	                case ARR_BIT:
        	        	                case LP_EXIT:
        	        	                case LP_CONT:
        	        	                case CASE:
        	        	                case STRUCT:
        	        	                case ETRY:
        	        	                case RETURN:
        	        	                case FUN_DEF:
        	        	                case CONTEXT:
        	        	                case OPERAND:
        	        	                case SS_EQUAL:
        	        	                case SS_PLUS:
        	        	                case SS_MINUS:
        	        	                case SS_STAR:
        	        	                case SS_FSLASH:
        	        	                case SS_PERCENT:
        	        	                case DIGIT:
        	        	                case HEX_LITERAL:
        	        	                case STRING_LITERIAL:
        	        	                case SS_HASH:
        	        	                case KW_TRUE:
        	        	                case KW_FALSE:
        	        	                case KW_ON:
        	        	                case KW_OFF:
        	        	                case KW_OK:
        	        	                case KW_UNDEFINED:
        	        	                case KW_UNSUPPLIED:
        	        	                case SS_STAR_EQUAL:
        	        	                case SS_FSLASH_EQUAL:
        	        	                case SS_PERCENT_EQUAL:
        	        	                case SS_PLUS_EQUAL:
        	        	                case SS_MINUS_EQUAL:
        	        	                case SS_D_BAR:
        	        	                case SS_D_AMP:
        	        	                case SS_D_EQUAL:
        	        	                case SS_EXC_EQUAL:
        	        	                case SS_LT:
        	        	                case SS_GT:
        	        	                case SS_LT_EQUAL:
        	        	                case SS_GT_EQUAL:
        	        	                	{
        	        	                		alt20=1;
        	        	                	}
        	        	                    break;

        	        	                }

        	        	                switch (alt20) 
        	        	                {
        	        	            	case 1:
        	        	            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:0:0: expr_g
        	        	            	    {
        	        	            	        FOLLOWPUSH(FOLLOW_expr_g_in_operand1196);
        	        	            	        expr_g(ctx);

        	        	            	        FOLLOWPOP();
        	        	            	        if  (HASEXCEPTION())
        	        	            	        {
        	        	            	            goto ruleoperandEx;
        	        	            	        }
        	        	            	        if (HASFAILED())
        	        	            	        {
        	        	            	            return ;
        	        	            	        }

        	        	            	    }
        	        	            	    break;

        	        	            	default:
        	        	            	    goto loop20;	/* break out of the loop */
        	        	            	    break;
        	        	                }
        	        	            }
        	        	            loop20: ; /* Jump out to here if this rule does not match */


        	        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto ruleoperandEx;
        	        	            }
        	        	            if (HASFAILED())
        	        	            {
        	        	                return ;
        	        	            }
        	        	        }
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	            ZInterp::Operand::FunCall(t1,arg,ctx);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop21;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop21: ; /* Jump out to here if this rule does not match */

        	         MATCHT(ID_MORE, &FOLLOW_ID_MORE_in_operand1207); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperandEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperandEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:191:11: constant
        	    {
        	        FOLLOWPUSH(FOLLOW_constant_in_operand1222);
        	        constant(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperandEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleoperandEx; /* Prevent compiler warnings */
    ruleoperandEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end operand */

/** 
 * $ANTLR start operand_op
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:194:1: operand_op : ( ^( DOT IDENTIFIER ) | ^( ARR_IND expr_g ) );
 */
static void
operand_op(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:195:4: ( ^( DOT IDENTIFIER ) | ^( ARR_IND expr_g ) )
            
            ANTLR3_UINT32 alt23;

            alt23=2;

            switch ( LA(1) ) 
            {
            case DOT:
            	{
            		alt23=1;
            	}
                break;
            case ARR_IND:
            	{
            		alt23=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 23;
                EXCEPTION->state        = 0;


                goto ruleoperand_opEx;
            }

            switch (alt23) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:195:6: ^( DOT IDENTIFIER )
        	    {
        	         MATCHT(DOT, &FOLLOW_DOT_in_operand_op1244); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_operand_op1246); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:196:13: ^( ARR_IND expr_g )
        	    {
        	         MATCHT(ARR_IND, &FOLLOW_ARR_IND_in_operand_op1262); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expr_g_in_operand_op1264);
        	        expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleoperand_opEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleoperand_opEx; /* Prevent compiler warnings */
    ruleoperand_opEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end operand_op */

/** 
 * $ANTLR start constant
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:200:1: constant : ( (e= DIGIT | e= HEX_LITERAL | e= STRING_LITERIAL | e= KW_TRUE | e= KW_FALSE | e= KW_ON | e= KW_OFF | e= KW_OK | e= KW_UNDEFINED | e= KW_UNSUPPLIED ) | ^(c= ARR_A ( expr_g )* ) | SS_HASH IDENTIFIER | bitarray | box2 | point3 | point2 | SS_MINUS expr_g | expr_seq );
 */
static void
constant(pyatgFW ctx)
{   
    pANTLR3_BASE_TREE    e;
    pANTLR3_BASE_TREE    c;

    /* Initialize rule variables
     */


    e       = NULL;
    c       = NULL;

    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:201:6: ( (e= DIGIT | e= HEX_LITERAL | e= STRING_LITERIAL | e= KW_TRUE | e= KW_FALSE | e= KW_ON | e= KW_OFF | e= KW_OK | e= KW_UNDEFINED | e= KW_UNSUPPLIED ) | ^(c= ARR_A ( expr_g )* ) | SS_HASH IDENTIFIER | bitarray | box2 | point3 | point2 | SS_MINUS expr_g | expr_seq )
            
            ANTLR3_UINT32 alt26;

            alt26=9;

            switch ( LA(1) ) 
            {
            case DIGIT:
            case HEX_LITERAL:
            case STRING_LITERIAL:
            case KW_TRUE:
            case KW_FALSE:
            case KW_ON:
            case KW_OFF:
            case KW_OK:
            case KW_UNDEFINED:
            case KW_UNSUPPLIED:
            	{
            		alt26=1;
            	}
                break;
            case ARR_A:
            	{
            		alt26=2;
            	}
                break;
            case SS_HASH:
            	{
            		alt26=3;
            	}
                break;
            case ARR_BIT:
            	{
            		alt26=4;
            	}
                break;
            case P_BOX2:
            	{
            		alt26=5;
            	}
                break;
            case P_P3:
            	{
            		alt26=6;
            	}
                break;
            case P_P2:
            	{
            		alt26=7;
            	}
                break;
            case SS_MINUS:
            	{
            		alt26=8;
            	}
                break;
            case ESEQ:
            	{
            		alt26=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 26;
                EXCEPTION->state        = 0;


                goto ruleconstantEx;
            }

            switch (alt26) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:202:6: (e= DIGIT | e= HEX_LITERAL | e= STRING_LITERIAL | e= KW_TRUE | e= KW_FALSE | e= KW_ON | e= KW_OFF | e= KW_OK | e= KW_UNDEFINED | e= KW_UNSUPPLIED )
        	    {

        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:202:6: (e= DIGIT | e= HEX_LITERAL | e= STRING_LITERIAL | e= KW_TRUE | e= KW_FALSE | e= KW_ON | e= KW_OFF | e= KW_OK | e= KW_UNDEFINED | e= KW_UNSUPPLIED )
        	        {
        	            int alt24=10;
        	            switch ( LA(1) ) 
        	            {
        	            case DIGIT:
        	            	{
        	            		alt24=1;
        	            	}
        	                break;
        	            case HEX_LITERAL:
        	            	{
        	            		alt24=2;
        	            	}
        	                break;
        	            case STRING_LITERIAL:
        	            	{
        	            		alt24=3;
        	            	}
        	                break;
        	            case KW_TRUE:
        	            	{
        	            		alt24=4;
        	            	}
        	                break;
        	            case KW_FALSE:
        	            	{
        	            		alt24=5;
        	            	}
        	                break;
        	            case KW_ON:
        	            	{
        	            		alt24=6;
        	            	}
        	                break;
        	            case KW_OFF:
        	            	{
        	            		alt24=7;
        	            	}
        	                break;
        	            case KW_OK:
        	            	{
        	            		alt24=8;
        	            	}
        	                break;
        	            case KW_UNDEFINED:
        	            	{
        	            		alt24=9;
        	            	}
        	                break;
        	            case KW_UNSUPPLIED:
        	            	{
        	            		alt24=10;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return ;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 24;
        	                EXCEPTION->state        = 0;


        	                goto ruleconstantEx;
        	            }

        	            switch (alt24) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:203:8: e= DIGIT
        	        	    {
        	        	        e = (pANTLR3_BASE_TREE) MATCHT(DIGIT, &FOLLOW_DIGIT_in_constant1319); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleconstantEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:204:8: e= HEX_LITERAL
        	        	    {
        	        	        e = (pANTLR3_BASE_TREE) MATCHT(HEX_LITERAL, &FOLLOW_HEX_LITERAL_in_constant1334); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleconstantEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:205:8: e= STRING_LITERIAL
        	        	    {
        	        	        e = (pANTLR3_BASE_TREE) MATCHT(STRING_LITERIAL, &FOLLOW_STRING_LITERIAL_in_constant1347); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleconstantEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:206:8: e= KW_TRUE
        	        	    {
        	        	        e = (pANTLR3_BASE_TREE) MATCHT(KW_TRUE, &FOLLOW_KW_TRUE_in_constant1360); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleconstantEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:207:8: e= KW_FALSE
        	        	    {
        	        	        e = (pANTLR3_BASE_TREE) MATCHT(KW_FALSE, &FOLLOW_KW_FALSE_in_constant1373); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleconstantEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:208:8: e= KW_ON
        	        	    {
        	        	        e = (pANTLR3_BASE_TREE) MATCHT(KW_ON, &FOLLOW_KW_ON_in_constant1386); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleconstantEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 7:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:209:8: e= KW_OFF
        	        	    {
        	        	        e = (pANTLR3_BASE_TREE) MATCHT(KW_OFF, &FOLLOW_KW_OFF_in_constant1399); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleconstantEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 8:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:210:8: e= KW_OK
        	        	    {
        	        	        e = (pANTLR3_BASE_TREE) MATCHT(KW_OK, &FOLLOW_KW_OK_in_constant1412); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleconstantEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 9:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:211:8: e= KW_UNDEFINED
        	        	    {
        	        	        e = (pANTLR3_BASE_TREE) MATCHT(KW_UNDEFINED, &FOLLOW_KW_UNDEFINED_in_constant1425); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleconstantEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 10:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:212:8: e= KW_UNSUPPLIED
        	        	    {
        	        	        e = (pANTLR3_BASE_TREE) MATCHT(KW_UNSUPPLIED, &FOLLOW_KW_UNSUPPLIED_in_constant1438); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleconstantEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return ;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             ZInterp::Constant::Exec(e); 
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:215:8: ^(c= ARR_A ( expr_g )* )
        	    {
        	        c = (pANTLR3_BASE_TREE) MATCHT(ARR_A, &FOLLOW_ARR_A_in_constant1464); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        if ( LA(1)==ANTLR3_TOKEN_DOWN ) {
        	            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleconstantEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }

        	            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:215:19: ( expr_g )*

        	            for (;;)
        	            {
        	                int alt25=2;
        	                switch ( LA(1) ) 
        	                {
        	                case VDECL:
        	                case ESEQ:
        	                case EIF:
        	                case EWHILE:
        	                case EDO:
        	                case EFOR:
        	                case P_BOX2:
        	                case P_P2:
        	                case P_P3:
        	                case ARR_A:
        	                case ARR_BIT:
        	                case LP_EXIT:
        	                case LP_CONT:
        	                case CASE:
        	                case STRUCT:
        	                case ETRY:
        	                case RETURN:
        	                case FUN_DEF:
        	                case CONTEXT:
        	                case OPERAND:
        	                case SS_EQUAL:
        	                case SS_PLUS:
        	                case SS_MINUS:
        	                case SS_STAR:
        	                case SS_FSLASH:
        	                case SS_PERCENT:
        	                case DIGIT:
        	                case HEX_LITERAL:
        	                case STRING_LITERIAL:
        	                case SS_HASH:
        	                case KW_TRUE:
        	                case KW_FALSE:
        	                case KW_ON:
        	                case KW_OFF:
        	                case KW_OK:
        	                case KW_UNDEFINED:
        	                case KW_UNSUPPLIED:
        	                case SS_STAR_EQUAL:
        	                case SS_FSLASH_EQUAL:
        	                case SS_PERCENT_EQUAL:
        	                case SS_PLUS_EQUAL:
        	                case SS_MINUS_EQUAL:
        	                case SS_D_BAR:
        	                case SS_D_AMP:
        	                case SS_D_EQUAL:
        	                case SS_EXC_EQUAL:
        	                case SS_LT:
        	                case SS_GT:
        	                case SS_LT_EQUAL:
        	                case SS_GT_EQUAL:
        	                	{
        	                		alt25=1;
        	                	}
        	                    break;

        	                }

        	                switch (alt25) 
        	                {
        	            	case 1:
        	            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:0:0: expr_g
        	            	    {
        	            	        FOLLOWPUSH(FOLLOW_expr_g_in_constant1467);
        	            	        expr_g(ctx);

        	            	        FOLLOWPOP();
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto ruleconstantEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return ;
        	            	        }

        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop25;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop25: ; /* Jump out to here if this rule does not match */


        	            MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleconstantEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return ;
        	            }
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	             ZInterp::Constant::ComplexExec(c); 
        	        }

        	    }
        	    break;
        	case 3:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:217:8: SS_HASH IDENTIFIER
        	    {
        	         MATCHT(SS_HASH, &FOLLOW_SS_HASH_in_constant1484); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	         MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_constant1486); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 4:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:218:8: bitarray
        	    {
        	        FOLLOWPUSH(FOLLOW_bitarray_in_constant1495);
        	        bitarray(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 5:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:219:8: box2
        	    {
        	        FOLLOWPUSH(FOLLOW_box2_in_constant1504);
        	        box2(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 6:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:220:7: point3
        	    {
        	        FOLLOWPUSH(FOLLOW_point3_in_constant1512);
        	        point3(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 7:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:221:7: point2
        	    {
        	        FOLLOWPUSH(FOLLOW_point2_in_constant1520);
        	        point2(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 8:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:222:8: SS_MINUS expr_g
        	    {
        	         MATCHT(SS_MINUS, &FOLLOW_SS_MINUS_in_constant1529); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expr_g_in_constant1531);
        	        expr_g(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 9:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:223:7: expr_seq
        	    {
        	        FOLLOWPUSH(FOLLOW_expr_seq_in_constant1539);
        	        expr_seq(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconstantEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstantEx; /* Prevent compiler warnings */
    ruleconstantEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end constant */

/** 
 * $ANTLR start assignment_expression
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:226:1: assignment_expression : ( ^(r= assignment_operator l= lvalue e= expr ) | cexprx );
 */
static void
assignment_expression(pyatgFW ctx)
{   
    yatgFW_assignment_operator_return r;
    #undef	RETURN_TYPE_r
    #define	RETURN_TYPE_r yatgFW_assignment_operator_return

    yatgFW_lvalue_return l;
    #undef	RETURN_TYPE_l
    #define	RETURN_TYPE_l yatgFW_lvalue_return

    yatgFW_expr_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e yatgFW_expr_return

    /* Initialize rule variables
     */






    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:227:2: ( ^(r= assignment_operator l= lvalue e= expr ) | cexprx )
            
            ANTLR3_UINT32 alt27;

            alt27=2;

            switch ( LA(1) ) 
            {
            case SS_EQUAL:
            case SS_STAR_EQUAL:
            case SS_FSLASH_EQUAL:
            case SS_PERCENT_EQUAL:
            case SS_PLUS_EQUAL:
            case SS_MINUS_EQUAL:
            	{
            		alt27=1;
            	}
                break;
            case ESEQ:
            case P_BOX2:
            case P_P2:
            case P_P3:
            case ARR_A:
            case ARR_BIT:
            case OPERAND:
            case SS_PLUS:
            case SS_MINUS:
            case SS_STAR:
            case SS_FSLASH:
            case SS_PERCENT:
            case DIGIT:
            case HEX_LITERAL:
            case STRING_LITERIAL:
            case SS_HASH:
            case KW_TRUE:
            case KW_FALSE:
            case KW_ON:
            case KW_OFF:
            case KW_OK:
            case KW_UNDEFINED:
            case KW_UNSUPPLIED:
            case SS_D_BAR:
            case SS_D_AMP:
            case SS_D_EQUAL:
            case SS_EXC_EQUAL:
            case SS_LT:
            case SS_GT:
            case SS_LT_EQUAL:
            case SS_GT_EQUAL:
            	{
            		alt27=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 27;
                EXCEPTION->state        = 0;


                goto ruleassignment_expressionEx;
            }

            switch (alt27) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:228:2: ^(r= assignment_operator l= lvalue e= expr )
        	    {
        	        FOLLOWPUSH(FOLLOW_assignment_operator_in_assignment_expression1564);
        	        r=assignment_operator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_lvalue_in_assignment_expression1568);
        	        l=lvalue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        FOLLOWPUSH(FOLLOW_expr_in_assignment_expression1572);
        	        e=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {

        	            	ZInterp::AssingmentExpr::Exec((r.start),(l.start),(e.start));
        	            	
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:232:4: cexprx
        	    {
        	        FOLLOWPUSH(FOLLOW_cexprx_in_assignment_expression1581);
        	        cexprx(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignment_expressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignment_expressionEx; /* Prevent compiler warnings */
    ruleassignment_expressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end assignment_expression */

/** 
 * $ANTLR start cexprx
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:235:1: cexprx : ( ( ^(r= SS_D_BAR t1= cexprx t2= cexprx ) | ^(r= SS_D_AMP t1= cexprx t2= cexprx ) | ^(r= SS_D_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_EXC_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_LT t1= cexprx t2= cexprx ) | ^(r= SS_GT t1= cexprx t2= cexprx ) | ^(r= SS_LT_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_GT_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_PLUS t1= cexprx t2= cexprx ) | ^(r= SS_MINUS t1= cexprx t2= cexprx ) | ^(r= SS_STAR t1= cexprx t2= cexprx ) | ^(r= SS_FSLASH t1= cexprx t2= cexprx ) | ^(r= SS_PERCENT t1= cexprx t2= cexprx ) ) | unary_expression );
 */
static yatgFW_cexprx_return
cexprx(pyatgFW ctx)
{   
    yatgFW_cexprx_return retval;

    pANTLR3_BASE_TREE    r;
    yatgFW_cexprx_return t1;
    #undef	RETURN_TYPE_t1
    #define	RETURN_TYPE_t1 yatgFW_cexprx_return

    yatgFW_cexprx_return t2;
    #undef	RETURN_TYPE_t2
    #define	RETURN_TYPE_t2 yatgFW_cexprx_return

    /* Initialize rule variables
     */


    r       = NULL;


    retval.start = LT(1); retval.stop = retval.start;

    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:235:8: ( ( ^(r= SS_D_BAR t1= cexprx t2= cexprx ) | ^(r= SS_D_AMP t1= cexprx t2= cexprx ) | ^(r= SS_D_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_EXC_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_LT t1= cexprx t2= cexprx ) | ^(r= SS_GT t1= cexprx t2= cexprx ) | ^(r= SS_LT_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_GT_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_PLUS t1= cexprx t2= cexprx ) | ^(r= SS_MINUS t1= cexprx t2= cexprx ) | ^(r= SS_STAR t1= cexprx t2= cexprx ) | ^(r= SS_FSLASH t1= cexprx t2= cexprx ) | ^(r= SS_PERCENT t1= cexprx t2= cexprx ) ) | unary_expression )
            
            ANTLR3_UINT32 alt29;

            alt29=2;

            switch ( LA(1) ) 
            {
            case SS_PLUS:
            case SS_STAR:
            case SS_FSLASH:
            case SS_PERCENT:
            case SS_D_BAR:
            case SS_D_AMP:
            case SS_D_EQUAL:
            case SS_EXC_EQUAL:
            case SS_LT:
            case SS_GT:
            case SS_LT_EQUAL:
            case SS_GT_EQUAL:
            	{
            		alt29=1;
            	}
                break;
            case SS_MINUS:
            	{
            		switch ( LA(2) ) 
            		{
            		case DOWN:
            			{
            				alt29=1;
            			}
            		    break;
            		case VDECL:
            		case ESEQ:
            		case EIF:
            		case EWHILE:
            		case EDO:
            		case EFOR:
            		case P_BOX2:
            		case P_P2:
            		case P_P3:
            		case ARR_A:
            		case ARR_BIT:
            		case LP_EXIT:
            		case LP_CONT:
            		case CASE:
            		case STRUCT:
            		case ETRY:
            		case RETURN:
            		case FUN_DEF:
            		case CONTEXT:
            		case OPERAND:
            		case SS_EQUAL:
            		case SS_PLUS:
            		case SS_MINUS:
            		case SS_STAR:
            		case SS_FSLASH:
            		case SS_PERCENT:
            		case DIGIT:
            		case HEX_LITERAL:
            		case STRING_LITERIAL:
            		case SS_HASH:
            		case KW_TRUE:
            		case KW_FALSE:
            		case KW_ON:
            		case KW_OFF:
            		case KW_OK:
            		case KW_UNDEFINED:
            		case KW_UNSUPPLIED:
            		case SS_STAR_EQUAL:
            		case SS_FSLASH_EQUAL:
            		case SS_PERCENT_EQUAL:
            		case SS_PLUS_EQUAL:
            		case SS_MINUS_EQUAL:
            		case SS_D_BAR:
            		case SS_D_AMP:
            		case SS_D_EQUAL:
            		case SS_EXC_EQUAL:
            		case SS_LT:
            		case SS_GT:
            		case SS_LT_EQUAL:
            		case SS_GT_EQUAL:
            			{
            				alt29=2;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return retval;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 29;
            		    EXCEPTION->state        = 2;


            		    goto rulecexprxEx;
            		}

            	}
                break;
            case ESEQ:
            case P_BOX2:
            case P_P2:
            case P_P3:
            case ARR_A:
            case ARR_BIT:
            case OPERAND:
            case DIGIT:
            case HEX_LITERAL:
            case STRING_LITERIAL:
            case SS_HASH:
            case KW_TRUE:
            case KW_FALSE:
            case KW_ON:
            case KW_OFF:
            case KW_OK:
            case KW_UNDEFINED:
            case KW_UNSUPPLIED:
            	{
            		alt29=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 29;
                EXCEPTION->state        = 0;


                goto rulecexprxEx;
            }

            switch (alt29) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:236:2: ( ^(r= SS_D_BAR t1= cexprx t2= cexprx ) | ^(r= SS_D_AMP t1= cexprx t2= cexprx ) | ^(r= SS_D_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_EXC_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_LT t1= cexprx t2= cexprx ) | ^(r= SS_GT t1= cexprx t2= cexprx ) | ^(r= SS_LT_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_GT_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_PLUS t1= cexprx t2= cexprx ) | ^(r= SS_MINUS t1= cexprx t2= cexprx ) | ^(r= SS_STAR t1= cexprx t2= cexprx ) | ^(r= SS_FSLASH t1= cexprx t2= cexprx ) | ^(r= SS_PERCENT t1= cexprx t2= cexprx ) )
        	    {

        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:236:2: ( ^(r= SS_D_BAR t1= cexprx t2= cexprx ) | ^(r= SS_D_AMP t1= cexprx t2= cexprx ) | ^(r= SS_D_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_EXC_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_LT t1= cexprx t2= cexprx ) | ^(r= SS_GT t1= cexprx t2= cexprx ) | ^(r= SS_LT_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_GT_EQUAL t1= cexprx t2= cexprx ) | ^(r= SS_PLUS t1= cexprx t2= cexprx ) | ^(r= SS_MINUS t1= cexprx t2= cexprx ) | ^(r= SS_STAR t1= cexprx t2= cexprx ) | ^(r= SS_FSLASH t1= cexprx t2= cexprx ) | ^(r= SS_PERCENT t1= cexprx t2= cexprx ) )
        	        {
        	            int alt28=13;
        	            switch ( LA(1) ) 
        	            {
        	            case SS_D_BAR:
        	            	{
        	            		alt28=1;
        	            	}
        	                break;
        	            case SS_D_AMP:
        	            	{
        	            		alt28=2;
        	            	}
        	                break;
        	            case SS_D_EQUAL:
        	            	{
        	            		alt28=3;
        	            	}
        	                break;
        	            case SS_EXC_EQUAL:
        	            	{
        	            		alt28=4;
        	            	}
        	                break;
        	            case SS_LT:
        	            	{
        	            		alt28=5;
        	            	}
        	                break;
        	            case SS_GT:
        	            	{
        	            		alt28=6;
        	            	}
        	                break;
        	            case SS_LT_EQUAL:
        	            	{
        	            		alt28=7;
        	            	}
        	                break;
        	            case SS_GT_EQUAL:
        	            	{
        	            		alt28=8;
        	            	}
        	                break;
        	            case SS_PLUS:
        	            	{
        	            		alt28=9;
        	            	}
        	                break;
        	            case SS_MINUS:
        	            	{
        	            		alt28=10;
        	            	}
        	                break;
        	            case SS_STAR:
        	            	{
        	            		alt28=11;
        	            	}
        	                break;
        	            case SS_FSLASH:
        	            	{
        	            		alt28=12;
        	            	}
        	                break;
        	            case SS_PERCENT:
        	            	{
        	            		alt28=13;
        	            	}
        	                break;

        	            default:
        	                if (BACKTRACKING>0)
        	                {
        	                    FAILEDFLAG = ANTLR3_TRUE;
        	                    return retval;
        	                }
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 28;
        	                EXCEPTION->state        = 0;


        	                goto rulecexprxEx;
        	            }

        	            switch (alt28) 
        	            {
        	        	case 1:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:237:4: ^(r= SS_D_BAR t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_D_BAR, &FOLLOW_SS_D_BAR_in_cexprx1603); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1607);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1611);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:238:4: ^(r= SS_D_AMP t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_D_AMP, &FOLLOW_SS_D_AMP_in_cexprx1622); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1626);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1630);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:239:4: ^(r= SS_D_EQUAL t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_D_EQUAL, &FOLLOW_SS_D_EQUAL_in_cexprx1641); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1645);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1649);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:240:4: ^(r= SS_EXC_EQUAL t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_EXC_EQUAL, &FOLLOW_SS_EXC_EQUAL_in_cexprx1660); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1664);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1668);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:241:4: ^(r= SS_LT t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_LT, &FOLLOW_SS_LT_in_cexprx1679); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1683);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1687);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:242:4: ^(r= SS_GT t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_GT, &FOLLOW_SS_GT_in_cexprx1698); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1702);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1706);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 7:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:243:4: ^(r= SS_LT_EQUAL t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_LT_EQUAL, &FOLLOW_SS_LT_EQUAL_in_cexprx1717); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1721);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1725);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 8:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:244:4: ^(r= SS_GT_EQUAL t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_GT_EQUAL, &FOLLOW_SS_GT_EQUAL_in_cexprx1736); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1740);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1744);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 9:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:245:4: ^(r= SS_PLUS t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_PLUS, &FOLLOW_SS_PLUS_in_cexprx1755); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1759);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1763);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 10:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:246:4: ^(r= SS_MINUS t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_MINUS, &FOLLOW_SS_MINUS_in_cexprx1775); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1779);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1783);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 11:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:247:4: ^(r= SS_STAR t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_STAR, &FOLLOW_SS_STAR_in_cexprx1795); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1799);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1803);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 12:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:248:4: ^(r= SS_FSLASH t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_FSLASH, &FOLLOW_SS_FSLASH_in_cexprx1815); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1819);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1823);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;
        	        	case 13:
        	        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:249:4: ^(r= SS_PERCENT t1= cexprx t2= cexprx )
        	        	    {
        	        	        r = (pANTLR3_BASE_TREE) MATCHT(SS_PERCENT, &FOLLOW_SS_PERCENT_in_cexprx1835); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1839);
        	        	        t1=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        FOLLOWPUSH(FOLLOW_cexprx_in_cexprx1843);
        	        	        t2=cexprx(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecexprxEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        if ( BACKTRACKING==0 ) 
        	        {
        	            ZInterp::Cexprx::Exec(r,(t1.start),(t2.start));
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:253:4: unary_expression
        	    {
        	        FOLLOWPUSH(FOLLOW_unary_expression_in_cexprx1858);
        	        unary_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecexprxEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecexprxEx; /* Prevent compiler warnings */
    rulecexprxEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end cexprx */

/** 
 * $ANTLR start lvalue
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:259:1: lvalue : unary_expression ;
 */
static yatgFW_lvalue_return
lvalue(pyatgFW ctx)
{   
    yatgFW_lvalue_return retval;

    /* Initialize rule variables
     */


    retval.start = LT(1); retval.stop = retval.start;

    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:260:2: ( unary_expression )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:261:4: unary_expression
        {
            FOLLOWPUSH(FOLLOW_unary_expression_in_lvalue1877);
            unary_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelvalueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelvalueEx; /* Prevent compiler warnings */
    rulelvalueEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end lvalue */

/** 
 * $ANTLR start assignment_operator
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:264:1: assignment_operator : ( SS_EQUAL | SS_STAR_EQUAL | SS_FSLASH_EQUAL | SS_PERCENT_EQUAL | SS_PLUS_EQUAL | SS_MINUS_EQUAL );
 */
static yatgFW_assignment_operator_return
assignment_operator(pyatgFW ctx)
{   
    yatgFW_assignment_operator_return retval;

    /* Initialize rule variables
     */


    retval.start = LT(1); retval.stop = retval.start;

    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:265:2: ( SS_EQUAL | SS_STAR_EQUAL | SS_FSLASH_EQUAL | SS_PERCENT_EQUAL | SS_PLUS_EQUAL | SS_MINUS_EQUAL )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:
        {
            if ( LA(1) == SS_EQUAL || ((LA(1) >= SS_STAR_EQUAL) && (LA(1) <= SS_MINUS_EQUAL)) )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_assignment_operator0);    goto ruleassignment_operatorEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignment_operatorEx; /* Prevent compiler warnings */
    ruleassignment_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end assignment_operator */

/** 
 * $ANTLR start expr_seq
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:275:1: expr_seq : ^(e= ESEQ ( expr )+ ) ;
 */
static void
expr_seq(pyatgFW ctx)
{   
    pANTLR3_BASE_TREE    e;

    /* Initialize rule variables
     */


    e       = NULL;

    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:276:2: ( ^(e= ESEQ ( expr )+ ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:277:2: ^(e= ESEQ ( expr )+ )
        {
            e = (pANTLR3_BASE_TREE) MATCHT(ESEQ, &FOLLOW_ESEQ_in_expr_seq1930); 
            if  (HASEXCEPTION())
            {
                goto ruleexpr_seqEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            if ( BACKTRACKING==0 ) 
            {
                ZInterp::global::IncScope();
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpr_seqEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:277:41: ( expr )+
            {
                int cnt30=0;

                for (;;)
                {
                    int alt30=2;
            	switch ( LA(1) ) 
            	{
            	case VDECL:
            	case ESEQ:
            	case EIF:
            	case EWHILE:
            	case EDO:
            	case EFOR:
            	case P_BOX2:
            	case P_P2:
            	case P_P3:
            	case ARR_A:
            	case ARR_BIT:
            	case LP_EXIT:
            	case LP_CONT:
            	case CASE:
            	case STRUCT:
            	case ETRY:
            	case RETURN:
            	case FUN_DEF:
            	case CONTEXT:
            	case OPERAND:
            	case SS_EQUAL:
            	case SS_PLUS:
            	case SS_MINUS:
            	case SS_STAR:
            	case SS_FSLASH:
            	case SS_PERCENT:
            	case DIGIT:
            	case HEX_LITERAL:
            	case STRING_LITERIAL:
            	case SS_HASH:
            	case KW_TRUE:
            	case KW_FALSE:
            	case KW_ON:
            	case KW_OFF:
            	case KW_OK:
            	case KW_UNDEFINED:
            	case KW_UNSUPPLIED:
            	case SS_STAR_EQUAL:
            	case SS_FSLASH_EQUAL:
            	case SS_PERCENT_EQUAL:
            	case SS_PLUS_EQUAL:
            	case SS_MINUS_EQUAL:
            	case SS_D_BAR:
            	case SS_D_AMP:
            	case SS_D_EQUAL:
            	case SS_EXC_EQUAL:
            	case SS_LT:
            	case SS_GT:
            	case SS_LT_EQUAL:
            	case SS_GT_EQUAL:
            		{
            			alt30=1;
            		}
            	    break;

            	}

            	switch (alt30) 
            	{
            	    case 1:
            	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:0:0: expr
            	        {
            	            FOLLOWPUSH(FOLLOW_expr_in_expr_seq1933);
            	            expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleexpr_seqEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return ;
            	            }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt30 >= 1 )
            		{
            		    goto loop30;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE;
            		    return ;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleexpr_seqEx;
            	}
            	cnt30++;
                }
                loop30: ;	/* Jump to here if this rule does not match */
            }
            if ( BACKTRACKING==0 ) 
            {
                ZInterp::global::DecScope();
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto ruleexpr_seqEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            if ( BACKTRACKING==0 ) 
            {

                	ZInterp::ExprSeq::_ESEQ(e);
                	
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpr_seqEx; /* Prevent compiler warnings */
    ruleexpr_seqEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end expr_seq */

/** 
 * $ANTLR start expr_g
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:282:1: expr_g : ( expr_seq | expr );
 */
static yatgFW_expr_g_return
expr_g(pyatgFW ctx)
{   
    yatgFW_expr_g_return retval;

    /* Initialize rule variables
     */


    retval.start = LT(1); retval.stop = retval.start;

    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:283:2: ( expr_seq | expr )
            
            ANTLR3_UINT32 alt31;

            alt31=2;

            switch ( LA(1) ) 
            {
            case ESEQ:
            	{

            		{
            		    int LA31_1 = LA(2);
            		    if ( (synpred88_yatgFW(ctx)) ) 
            		    {
            		        alt31=1;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt31=2;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE;
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 31;
            		        EXCEPTION->state        = 1;


            		        goto ruleexpr_gEx;
            		    }
            		}
            	}
                break;
            case VDECL:
            case EIF:
            case EWHILE:
            case EDO:
            case EFOR:
            case P_BOX2:
            case P_P2:
            case P_P3:
            case ARR_A:
            case ARR_BIT:
            case LP_EXIT:
            case LP_CONT:
            case CASE:
            case STRUCT:
            case ETRY:
            case RETURN:
            case FUN_DEF:
            case CONTEXT:
            case OPERAND:
            case SS_EQUAL:
            case SS_PLUS:
            case SS_MINUS:
            case SS_STAR:
            case SS_FSLASH:
            case SS_PERCENT:
            case DIGIT:
            case HEX_LITERAL:
            case STRING_LITERIAL:
            case SS_HASH:
            case KW_TRUE:
            case KW_FALSE:
            case KW_ON:
            case KW_OFF:
            case KW_OK:
            case KW_UNDEFINED:
            case KW_UNSUPPLIED:
            case SS_STAR_EQUAL:
            case SS_FSLASH_EQUAL:
            case SS_PERCENT_EQUAL:
            case SS_PLUS_EQUAL:
            case SS_MINUS_EQUAL:
            case SS_D_BAR:
            case SS_D_AMP:
            case SS_D_EQUAL:
            case SS_EXC_EQUAL:
            case SS_LT:
            case SS_GT:
            case SS_LT_EQUAL:
            case SS_GT_EQUAL:
            	{
            		alt31=2;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 31;
                EXCEPTION->state        = 0;


                goto ruleexpr_gEx;
            }

            switch (alt31) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:283:5: expr_seq
        	    {
        	        FOLLOWPUSH(FOLLOW_expr_seq_in_expr_g1950);
        	        expr_seq(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpr_gEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:284:5: expr
        	    {
        	        FOLLOWPUSH(FOLLOW_expr_in_expr_g1957);
        	        expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpr_gEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpr_gEx; /* Prevent compiler warnings */
    ruleexpr_gEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return retval;
}
/* $ANTLR end expr_g */

/** 
 * $ANTLR start box2
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:288:1: box2 : ^( P_BOX2 expr_g expr_g expr_g expr_g ) ;
 */
static void
box2(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:289:2: ( ^( P_BOX2 expr_g expr_g expr_g expr_g ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:290:4: ^( P_BOX2 expr_g expr_g expr_g expr_g )
        {
             MATCHT(P_BOX2, &FOLLOW_P_BOX2_in_box21981); 
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_box21984);
            expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_box21987);
            expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_box21990);
            expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_box21993);
            expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulebox2Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebox2Ex; /* Prevent compiler warnings */
    rulebox2Ex: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end box2 */

/** 
 * $ANTLR start point3
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:293:1: point3 : ^( P_P3 expr_g expr_g expr_g ) ;
 */
static void
point3(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:294:2: ( ^( P_P3 expr_g expr_g expr_g ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:295:4: ^( P_P3 expr_g expr_g expr_g )
        {
             MATCHT(P_P3, &FOLLOW_P_P3_in_point32011); 
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_point32014);
            expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_point32017);
            expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_point32020);
            expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepoint3Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepoint3Ex; /* Prevent compiler warnings */
    rulepoint3Ex: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end point3 */

/** 
 * $ANTLR start point2
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:298:1: point2 : ^( P_P2 expr_g expr_g ) ;
 */
static void
point2(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:299:2: ( ^( P_P2 expr_g expr_g ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:300:4: ^( P_P2 expr_g expr_g )
        {
             MATCHT(P_P2, &FOLLOW_P_P2_in_point22039); 
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_point22042);
            expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_expr_g_in_point22045);
            expr_g(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulepoint2Ex;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepoint2Ex; /* Prevent compiler warnings */
    rulepoint2Ex: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end point2 */

/** 
 * $ANTLR start array
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:303:1: array : ( ARR_A | ^( ARR_A ( expr_g )+ ) );
 */
static void
array(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:304:2: ( ARR_A | ^( ARR_A ( expr_g )+ ) )
            
            ANTLR3_UINT32 alt33;

            alt33=2;

            switch ( LA(1) ) 
            {
            case ARR_A:
            	{
            		switch ( LA(2) ) 
            		{
            		case DOWN:
            			{
            				alt33=2;
            			}
            		    break;
            		case EOF:
            			{
            				alt33=1;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return ;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 33;
            		    EXCEPTION->state        = 1;


            		    goto rulearrayEx;
            		}

            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 33;
                EXCEPTION->state        = 0;


                goto rulearrayEx;
            }

            switch (alt33) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:305:5: ARR_A
        	    {
        	         MATCHT(ARR_A, &FOLLOW_ARR_A_in_array2064); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:306:4: ^( ARR_A ( expr_g )+ )
        	    {
        	         MATCHT(ARR_A, &FOLLOW_ARR_A_in_array2071); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:306:13: ( expr_g )+
        	        {
        	            int cnt32=0;

        	            for (;;)
        	            {
        	                int alt32=2;
        	        	switch ( LA(1) ) 
        	        	{
        	        	case VDECL:
        	        	case ESEQ:
        	        	case EIF:
        	        	case EWHILE:
        	        	case EDO:
        	        	case EFOR:
        	        	case P_BOX2:
        	        	case P_P2:
        	        	case P_P3:
        	        	case ARR_A:
        	        	case ARR_BIT:
        	        	case LP_EXIT:
        	        	case LP_CONT:
        	        	case CASE:
        	        	case STRUCT:
        	        	case ETRY:
        	        	case RETURN:
        	        	case FUN_DEF:
        	        	case CONTEXT:
        	        	case OPERAND:
        	        	case SS_EQUAL:
        	        	case SS_PLUS:
        	        	case SS_MINUS:
        	        	case SS_STAR:
        	        	case SS_FSLASH:
        	        	case SS_PERCENT:
        	        	case DIGIT:
        	        	case HEX_LITERAL:
        	        	case STRING_LITERIAL:
        	        	case SS_HASH:
        	        	case KW_TRUE:
        	        	case KW_FALSE:
        	        	case KW_ON:
        	        	case KW_OFF:
        	        	case KW_OK:
        	        	case KW_UNDEFINED:
        	        	case KW_UNSUPPLIED:
        	        	case SS_STAR_EQUAL:
        	        	case SS_FSLASH_EQUAL:
        	        	case SS_PERCENT_EQUAL:
        	        	case SS_PLUS_EQUAL:
        	        	case SS_MINUS_EQUAL:
        	        	case SS_D_BAR:
        	        	case SS_D_AMP:
        	        	case SS_D_EQUAL:
        	        	case SS_EXC_EQUAL:
        	        	case SS_LT:
        	        	case SS_GT:
        	        	case SS_LT_EQUAL:
        	        	case SS_GT_EQUAL:
        	        		{
        	        			alt32=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt32) 
        	        	{
        	        	    case 1:
        	        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:0:0: expr_g
        	        	        {
        	        	            FOLLOWPUSH(FOLLOW_expr_g_in_array2074);
        	        	            expr_g(ctx);

        	        	            FOLLOWPOP();
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto rulearrayEx;
        	        	            }
        	        	            if (HASFAILED())
        	        	            {
        	        	                return ;
        	        	            }

        	        	        }
        	        	        break;

        	        	    default:
        	        	    
        	        		if ( cnt32 >= 1 )
        	        		{
        	        		    goto loop32;
        	        		}
        	        		if (BACKTRACKING>0)
        	        		{
        	        		    FAILEDFLAG = ANTLR3_TRUE;
        	        		    return ;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto rulearrayEx;
        	        	}
        	        	cnt32++;
        	            }
        	            loop32: ;	/* Jump to here if this rule does not match */
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayEx; /* Prevent compiler warnings */
    rulearrayEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end array */

/** 
 * $ANTLR start bitarray
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:309:1: bitarray : ( ARR_BIT | ^( ARR_BIT ( arrrange )+ ) );
 */
static void
bitarray(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        {
            //  C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:310:2: ( ARR_BIT | ^( ARR_BIT ( arrrange )+ ) )
            
            ANTLR3_UINT32 alt35;

            alt35=2;

            switch ( LA(1) ) 
            {
            case ARR_BIT:
            	{
            		switch ( LA(2) ) 
            		{
            		case DOWN:
            			{
            				alt35=2;
            			}
            		    break;
            		case EOF:
            		case UP:
            		case VDECL:
            		case ESEQ:
            		case EIF:
            		case EWHILE:
            		case EDO:
            		case EFOR:
            		case P_BOX2:
            		case P_P2:
            		case P_P3:
            		case ARR_A:
            		case ARR_BIT:
            		case LP_EXIT:
            		case LP_CONT:
            		case CASE:
            		case STRUCT:
            		case ETRY:
            		case RETURN:
            		case FUN_DEF:
            		case CONTEXT:
            		case OPERAND:
            		case SS_EQUAL:
            		case SS_PLUS:
            		case SS_MINUS:
            		case SS_STAR:
            		case SS_FSLASH:
            		case SS_PERCENT:
            		case DIGIT:
            		case HEX_LITERAL:
            		case STRING_LITERIAL:
            		case SS_HASH:
            		case KW_TRUE:
            		case KW_FALSE:
            		case KW_ON:
            		case KW_OFF:
            		case KW_OK:
            		case KW_UNDEFINED:
            		case KW_UNSUPPLIED:
            		case SS_STAR_EQUAL:
            		case SS_FSLASH_EQUAL:
            		case SS_PERCENT_EQUAL:
            		case SS_PLUS_EQUAL:
            		case SS_MINUS_EQUAL:
            		case SS_D_BAR:
            		case SS_D_AMP:
            		case SS_D_EQUAL:
            		case SS_EXC_EQUAL:
            		case SS_LT:
            		case SS_GT:
            		case SS_LT_EQUAL:
            		case SS_GT_EQUAL:
            			{
            				alt35=1;
            			}
            		    break;

            		default:
            		    if (BACKTRACKING>0)
            		    {
            		        FAILEDFLAG = ANTLR3_TRUE;
            		        return ;
            		    }
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 35;
            		    EXCEPTION->state        = 1;


            		    goto rulebitarrayEx;
            		}

            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 35;
                EXCEPTION->state        = 0;


                goto rulebitarrayEx;
            }

            switch (alt35) 
            {
        	case 1:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:310:5: ARR_BIT
        	    {
        	         MATCHT(ARR_BIT, &FOLLOW_ARR_BIT_in_bitarray2089); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;
        	case 2:
        	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:311:5: ^( ARR_BIT ( arrrange )+ )
        	    {
        	         MATCHT(ARR_BIT, &FOLLOW_ARR_BIT_in_bitarray2098); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	        MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }
        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:311:15: ( arrrange )+
        	        {
        	            int cnt34=0;

        	            for (;;)
        	            {
        	                int alt34=2;
        	        	switch ( LA(1) ) 
        	        	{
        	        	case ARR_BIT_RANGE:
        	        		{
        	        			alt34=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt34) 
        	        	{
        	        	    case 1:
        	        	        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:0:0: arrrange
        	        	        {
        	        	            FOLLOWPUSH(FOLLOW_arrrange_in_bitarray2100);
        	        	            arrrange(ctx);

        	        	            FOLLOWPOP();
        	        	            if  (HASEXCEPTION())
        	        	            {
        	        	                goto rulebitarrayEx;
        	        	            }
        	        	            if (HASFAILED())
        	        	            {
        	        	                return ;
        	        	            }

        	        	        }
        	        	        break;

        	        	    default:
        	        	    
        	        		if ( cnt34 >= 1 )
        	        		{
        	        		    goto loop34;
        	        		}
        	        		if (BACKTRACKING>0)
        	        		{
        	        		    FAILEDFLAG = ANTLR3_TRUE;
        	        		    return ;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		CONSTRUCTEX();
        	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        	        		goto rulebitarrayEx;
        	        	}
        	        	cnt34++;
        	            }
        	            loop34: ;	/* Jump to here if this rule does not match */
        	        }

        	        MATCHT(ANTLR3_TOKEN_UP, NULL); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebitarrayEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebitarrayEx; /* Prevent compiler warnings */
    rulebitarrayEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end bitarray */

/** 
 * $ANTLR start arrrange
 * C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:314:1: arrrange : ^( ARR_BIT_RANGE arrrange ( arrrange )? ) ;
 */
static void
arrrange(pyatgFW ctx)
{   
    /* Initialize rule variables
     */


    {
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:315:2: ( ^( ARR_BIT_RANGE arrrange ( arrrange )? ) )
        // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:316:4: ^( ARR_BIT_RANGE arrrange ( arrrange )? )
        {
             MATCHT(ARR_BIT_RANGE, &FOLLOW_ARR_BIT_RANGE_in_arrrange2119); 
            if  (HASEXCEPTION())
            {
                goto rulearrrangeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            MATCHT(ANTLR3_TOKEN_DOWN, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulearrrangeEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            FOLLOWPUSH(FOLLOW_arrrange_in_arrrange2122);
            arrrange(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearrrangeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:316:30: ( arrrange )?
            {
                int alt36=2;
                switch ( LA(1) ) 
                {
                    case ARR_BIT_RANGE:
                    	{
                    		alt36=1;
                    	}
                        break;
                }

                switch (alt36) 
                {
            	case 1:
            	    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:0:0: arrrange
            	    {
            	        FOLLOWPUSH(FOLLOW_arrrange_in_arrrange2124);
            	        arrrange(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulearrrangeEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return ;
            	        }

            	    }
            	    break;

                }
            }

            MATCHT(ANTLR3_TOKEN_UP, NULL); 
            if  (HASEXCEPTION())
            {
                goto rulearrrangeEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulearrrangeEx; /* Prevent compiler warnings */
    rulearrrangeEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end arrrange */

// $ANTLR start synpred2_yatgFW
static void synpred2_yatgFW_fragment(pyatgFW ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:28:4: ( assignment_expression )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:28:4: assignment_expression
    {
        FOLLOWPUSH(FOLLOW_assignment_expression_in_synpred2_yatgFW108);
        assignment_expression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred2_yatgFWEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred2_yatgFWEx; /* Prevent compiler warnings */
rulesynpred2_yatgFWEx: ;

}
// $ANTLR end synpred2_yatgFW

// $ANTLR start synpred43_yatgFW
static void synpred43_yatgFW_fragment(pyatgFW ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:175:3: ( argT )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:175:3: argT
    {
        FOLLOWPUSH(FOLLOW_argT_in_synpred43_yatgFW1098);
        argT(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred43_yatgFWEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred43_yatgFWEx; /* Prevent compiler warnings */
rulesynpred43_yatgFWEx: ;

}
// $ANTLR end synpred43_yatgFW

// $ANTLR start synpred88_yatgFW
static void synpred88_yatgFW_fragment(pyatgFW ctx ) 
{
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:283:5: ( expr_seq )
    // C:\\Zlang\\src\\Zzparser\\Grammar\\yatgFW.g:283:5: expr_seq
    {
        FOLLOWPUSH(FOLLOW_expr_seq_in_synpred88_yatgFW1950);
        expr_seq(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred88_yatgFWEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred88_yatgFWEx; /* Prevent compiler warnings */
rulesynpred88_yatgFWEx: ;

}
// $ANTLR end synpred88_yatgFW
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred43_yatgFW(pyatgFW ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred43_yatgFW_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred88_yatgFW(pyatgFW ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred88_yatgFW_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred2_yatgFW(pyatgFW ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred2_yatgFW_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
